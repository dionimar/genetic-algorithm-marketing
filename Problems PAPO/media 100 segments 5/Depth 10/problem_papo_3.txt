#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 100;
static const int segments = 5;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49), cons_event(50), cons_event(51), cons_event(52), cons_event(53), cons_event(54), cons_event(55), cons_event(56), cons_event(57), cons_event(58), cons_event(59), cons_event(60), cons_event(61), cons_event(62), cons_event(63), cons_event(64), cons_event(65), cons_event(66), cons_event(67), cons_event(68), cons_event(69), cons_event(70), cons_event(71), cons_event(72), cons_event(73), cons_event(74), cons_event(75), cons_event(76), cons_event(77), cons_event(78), cons_event(79), cons_event(80), cons_event(81), cons_event(82), cons_event(83), cons_event(84), cons_event(85), cons_event(86), cons_event(87), cons_event(88), cons_event(89), cons_event(90), cons_event(91), cons_event(92), cons_event(93), cons_event(94), cons_event(95), cons_event(96), cons_event(97), cons_event(98), cons_event(99)};

static const std::vector<Syntax_Tree> restrictions = {cons_indep(cons_indep(cons_incl(cons_indep(cons_indep(cons_incl(cons_indep(cons_incl(cons_excl(cons_excl(events[10], events[98]),events[18]),events[4]),events[28]),events[78]),events[69]),events[52]),events[58]),events[6]),events[56]),cons_excl(cons_indep(cons_indep(cons_incl(cons_incl(cons_indep(cons_indep(cons_incl(cons_excl(cons_excl(events[19], events[80]),events[83]),events[0]),events[96]),events[61]),events[4]),events[13]),events[89]),events[64]),events[18]),cons_indep(cons_incl(cons_indep(cons_excl(cons_indep(cons_excl(cons_indep(cons_excl(cons_incl(cons_incl(events[32], events[42]),events[76]),events[72]),events[57]),events[22]),events[92]),events[2]),events[59]),events[86]),events[96]),cons_indep(cons_incl(cons_indep(cons_indep(cons_excl(cons_excl(cons_excl(cons_excl(cons_incl(cons_indep(events[79], events[71]),events[18]),events[16]),events[39]),events[47]),events[91]),events[89]),events[21]),events[27]),events[59]),cons_indep(cons_indep(cons_incl(cons_incl(cons_excl(cons_incl(cons_excl(cons_excl(cons_indep(cons_indep(events[41], events[91]),events[8]),events[43]),events[20]),events[77]),events[44]),events[47]),events[60]),events[64]),events[83])};


static const std::vector< std::vector<float> > prob = {{0.529355, 0.603338, 0.652728, 0.145267, 0.699433, 0.942423, 0.133846, 0.733638, 0.563337, 0.475919, 0.99674, 0.404701, 0.914444, 0.48234, 0.820146, 0.390074, 0.0113557, 0.730119, 0.568385, 0.0715856, 0.284864, 0.151669, 0.101011, 0.54539, 0.477782, 0.228412, 0.750393, 0.78575, 0.552874, 0.457346, 0.446934, 0.304421, 0.00253049, 0.464532, 0.553286, 0.226099, 0.276523, 0.624901, 0.481885, 0.845549, 0.633189, 0.760839, 0.780008, 0.415533, 0.965367, 0.283789, 0.180792, 0.501148, 0.687221, 0.421252, 0.656796, 0.91986, 0.323704, 0.49012, 0.045303, 0.682144, 0.926207, 0.747702, 0.237004, 0.409804, 0.981866, 0.774153, 0.795353, 0.895877, 0.736736, 0.734325, 0.802489, 0.459632, 0.953686, 0.0298399, 0.477402, 0.57628, 0.947801, 0.058245, 0.639567, 0.308484, 0.387015, 0.951184, 0.512909, 0.469641, 0.803241, 0.540589, 0.603773, 0.93014, 0.106345, 0.519775, 0.541021, 0.432852, 0.766916, 0.201122, 0.00523068, 0.42623, 0.563691, 0.0786276, 0.825481, 0.0451766, 0.534432, 0.753317, 0.583475, 0.895016},
{0.291456, 0.355863, 0.367098, 0.73767, 0.682585, 0.89424, 0.500121, 0.387072, 0.468595, 0.492766, 0.424065, 0.621682, 0.462596, 0.412515, 0.086612, 0.230778, 0.367632, 0.692655, 0.160695, 0.535083, 0.411112, 0.481463, 0.0998117, 0.349283, 0.576757, 0.845486, 0.0985997, 0.629301, 0.410201, 0.600667, 0.624273, 0.703292, 0.0112677, 0.345928, 0.2045, 0.117697, 0.239249, 0.765005, 0.476555, 0.387633, 0.596742, 0.334394, 0.400446, 0.852458, 0.526785, 0.196937, 0.44579, 0.398848, 0.433865, 0.221079, 0.647127, 0.346002, 0.421865, 0.672196, 0.964433, 0.415046, 0.492415, 0.766907, 0.186098, 0.238756, 0.617845, 0.43385, 0.428781, 0.701165, 0.559145, 0.640156, 0.58846, 0.64931, 0.153525, 0.298129, 0.269129, 0.916364, 0.488997, 0.34102, 0.980534, 0.42231, 0.368392, 0.224231, 0.41785, 0.619133, 0.0591579, 0.319217, 0.749979, 0.362452, 0.649599, 0.00516245, 0.795474, 0.248564, 0.368132, 0.0187489, 0.192584, 0.639946, 0.70155, 0.435777, 0.784078, 0.763719, 0.31322, 0.830367, 0.52925, 0.449731},
{0.274047, 0.209528, 0.900741, 0.193079, 0.0605512, 0.703797, 0.0693599, 0.321476, 0.792937, 0.796084, 0.673972, 0.667833, 0.838464, 0.446788, 0.52672, 0.937993, 0.71552, 0.247167, 0.475116, 0.880882, 0.743209, 0.806851, 0.093693, 0.997541, 0.764883, 0.812304, 0.426789, 0.137986, 0.707565, 0.377741, 0.811508, 0.701051, 0.238247, 0.594835, 0.810115, 0.223028, 0.486287, 0.801602, 0.567974, 0.698864, 0.524028, 0.930204, 0.962283, 0.416166, 0.205833, 0.922097, 0.884083, 0.0619281, 0.750948, 0.333033, 0.26044, 0.189126, 0.0678952, 0.438813, 0.775037, 0.22982, 0.613886, 0.971655, 0.823981, 0.130271, 0.453251, 0.67092, 0.912614, 0.500605, 0.701239, 0.302344, 0.841078, 0.997654, 0.66858, 0.191772, 0.924861, 0.173042, 0.530719, 0.128743, 0.812158, 0.723172, 0.456185, 0.731908, 0.0343963, 0.939578, 0.354304, 0.713792, 0.556311, 0.609893, 0.914426, 0.671771, 0.400727, 0.560092, 0.0585887, 0.286558, 0.199884, 0.333167, 0.613791, 0.864408, 0.807655, 0.495376, 0.727521, 0.50895, 0.0940564, 0.941644},
{0.847445, 0.615182, 0.515061, 0.839133, 0.851368, 0.302254, 0.34137, 0.620982, 0.160892, 0.291116, 0.661665, 0.0759784, 0.184256, 0.157716, 0.476595, 0.583479, 0.150407, 0.329085, 0.870143, 0.750386, 0.396221, 0.975464, 0.450497, 0.55639, 0.914803, 0.0704456, 0.252904, 0.962566, 0.67738, 0.28948, 0.276906, 0.133673, 0.68232, 0.583208, 0.175022, 0.674997, 0.715789, 0.137542, 0.947146, 0.964276, 0.619359, 0.233295, 0.736778, 0.761042, 0.426837, 0.58611, 0.383565, 0.821395, 0.27182, 0.142656, 0.0897912, 0.150383, 0.0507231, 0.733455, 0.356321, 0.845825, 0.663784, 0.929118, 0.527505, 0.46639, 0.80444, 0.394828, 0.861858, 0.892827, 0.747349, 0.892862, 0.433945, 0.719844, 0.778652, 0.824245, 0.928073, 0.282613, 0.657221, 0.0384502, 0.00108898, 0.992013, 0.198837, 0.549593, 0.642553, 0.487796, 0.889034, 0.732866, 0.191131, 0.228128, 0.153674, 0.166291, 0.0837123, 0.460376, 0.746213, 0.346246, 0.767316, 0.0032552, 0.22159, 0.530364, 0.996502, 0.736887, 0.674576, 0.418362, 0.963329, 0.776354},
{0.678616, 0.227057, 0.0747994, 0.312205, 0.439022, 0.370187, 0.924338, 0.170829, 0.19863, 0.257904, 0.530577, 0.450535, 0.0705357, 0.702701, 0.90587, 7.44326e06, 0.803489, 0.0406773, 0.0546285, 0.760432, 0.547753, 0.637945, 0.0173663, 0.740682, 0.0724469, 0.871014, 0.44051, 0.385638, 0.896417, 0.275018, 0.933449, 0.110121, 0.443615, 0.0923445, 0.423379, 0.576096, 0.949614, 0.555959, 0.725424, 0.113283, 0.42116, 0.9204, 0.885447, 0.332471, 0.427704, 0.60572, 0.931892, 0.824454, 0.808497, 0.204094, 0.250987, 0.542306, 0.69434, 0.519929, 0.591746, 0.354178, 0.555931, 0.405539, 0.6103, 0.299208, 0.989076, 0.987607, 0.817513, 0.315814, 0.305952, 0.267969, 0.615738, 0.189522, 0.12541, 0.895885, 0.303462, 0.638955, 0.102691, 0.799059, 0.892607, 0.484899, 0.828072, 0.689159, 0.470658, 0.118207, 0.633272, 0.708305, 0.702279, 0.438545, 0.166572, 0.964534, 0.997907, 0.296286, 0.0123732, 0.817585, 0.732627, 0.791671, 0.298028, 0.604105, 0.837881, 0.0791102, 0.0727855, 0.830912, 0.42147, 0.8353},
};

static const std::vector<float> costs = {326.396, 23.6509, 56.4781, 351.863, 900.061, 951.625, 797.883, 226.857, 477.779, 278.536, 824.455, 840.712, 328.198, 802.704, 15.0239, 401.15, 149.991, 919.01, 241.965, 872.662, 826.223, 639.895, 490.621, 38.4534, 784.657, 722.669, 607.853, 777.756, 490.588, 544.866, 482.431, 864.024, 183.927, 529.236, 46.9909, 609.048, 914.082, 562.567, 213.036, 128.207, 645.723, 264.185, 759.162, 143.319, 485.219, 504.528, 822.658, 774.971, 363.404, 91.0217, 124.296, 5.58611, 307.147, 639.832, 139.693, 474.433, 600.074, 66.2597, 479.739, 793.155, 464.474, 820.339, 958.258, 798.701, 584.641, 545.245, 771.647, 431.026, 675.976, 715.216, 746.109, 151.467, 142.938, 173.672, 603.516, 818.255, 201.359, 325.984, 865.849, 629.837, 868.858, 306.618, 458.951, 115.875, 305.167, 578.688, 242.713, 978.339, 115.891, 859.127, 260.686, 580.787, 666.954, 354.466, 339.401, 678.98, 407.546, 433.606, 535.207, 818.091};

static const std::vector<float> min_impressions = {0.376456, 0.328605, 0.456954, 0.728368, 0.872863};

//
#endif
