#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 100;
static const int segments = 5;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49), cons_event(50), cons_event(51), cons_event(52), cons_event(53), cons_event(54), cons_event(55), cons_event(56), cons_event(57), cons_event(58), cons_event(59), cons_event(60), cons_event(61), cons_event(62), cons_event(63), cons_event(64), cons_event(65), cons_event(66), cons_event(67), cons_event(68), cons_event(69), cons_event(70), cons_event(71), cons_event(72), cons_event(73), cons_event(74), cons_event(75), cons_event(76), cons_event(77), cons_event(78), cons_event(79), cons_event(80), cons_event(81), cons_event(82), cons_event(83), cons_event(84), cons_event(85), cons_event(86), cons_event(87), cons_event(88), cons_event(89), cons_event(90), cons_event(91), cons_event(92), cons_event(93), cons_event(94), cons_event(95), cons_event(96), cons_event(97), cons_event(98), cons_event(99)};

static const std::vector<Syntax_Tree> restrictions = {cons_indep(cons_incl(cons_excl(cons_excl(cons_excl(cons_indep(cons_indep(cons_excl(cons_indep(cons_excl(events[37], events[50]),events[81]),events[48]),events[7]),events[23]),events[38]),events[61]),events[92]),events[42]),events[39]),cons_excl(cons_incl(cons_incl(cons_excl(cons_indep(cons_indep(cons_excl(cons_excl(cons_indep(cons_indep(events[32], events[85]),events[87]),events[9]),events[91]),events[6]),events[27]),events[14]),events[16]),events[11]),events[47]),cons_excl(cons_incl(cons_incl(cons_incl(cons_indep(cons_indep(cons_excl(cons_indep(cons_excl(cons_incl(events[21], events[49]),events[99]),events[41]),events[63]),events[42]),events[20]),events[32]),events[84]),events[56]),events[27]),cons_indep(cons_indep(cons_incl(cons_excl(cons_excl(cons_excl(cons_excl(cons_incl(cons_incl(cons_incl(events[30], events[7]),events[57]),events[25]),events[78]),events[37]),events[42]),events[75]),events[59]),events[94]),events[96]),cons_indep(cons_indep(cons_excl(cons_excl(cons_indep(cons_indep(cons_indep(cons_excl(cons_indep(cons_excl(events[83], events[26]),events[12]),events[49]),events[23]),events[28]),events[86]),events[72]),events[65]),events[87]),events[50])};


static const std::vector< std::vector<float> > prob = {{0.572885, 0.908555, 0.693884, 0.8955, 0.706482, 0.611326, 0.478788, 0.105026, 0.668481, 0.474537, 0.662871, 0.743769, 0.676081, 0.629317, 0.385312, 0.970664, 0.124724, 0.851494, 0.778737, 0.169265, 0.222927, 0.195624, 0.821094, 0.444573, 0.120945, 0.290904, 0.946581, 0.606523, 0.879436, 0.151513, 0.563882, 0.175412, 0.485099, 0.113879, 0.679504, 0.190968, 0.488745, 0.469751, 0.663654, 0.920132, 0.913617, 0.838428, 0.722436, 0.715484, 0.908863, 0.232986, 0.524209, 0.273153, 0.0372552, 0.864826, 0.208376, 0.310811, 0.712625, 0.832014, 0.273654, 0.0848735, 0.279711, 0.98933, 0.633047, 0.791277, 0.839204, 0.699126, 0.69087, 0.43954, 0.229102, 0.192368, 0.410258, 0.446795, 0.544896, 0.347995, 0.434248, 0.518877, 0.0568855, 0.108889, 0.640334, 0.735675, 0.981255, 0.250167, 0.957591, 0.28343, 0.626717, 0.717413, 0.981892, 0.213748, 0.345027, 0.212801, 0.687589, 0.524845, 0.425236, 0.59431, 0.611654, 0.438595, 0.751778, 0.905776, 0.54468, 0.599691, 0.570717, 0.526924, 0.611745, 0.579199},
{0.268201, 0.337674, 0.476009, 0.0623675, 0.679269, 0.511537, 0.194418, 0.749633, 0.844619, 0.534598, 0.384064, 0.182448, 0.262987, 0.217483, 0.748605, 0.677656, 0.807706, 0.460139, 0.779368, 0.967141, 0.734723, 0.155347, 0.590895, 0.696653, 0.978893, 0.338428, 0.501734, 0.734958, 0.650239, 0.443998, 0.550575, 0.2597, 0.817687, 0.503395, 0.813893, 0.461844, 0.278543, 0.679559, 0.133483, 0.310925, 0.896023, 0.0594112, 0.640111, 0.306756, 0.574298, 0.588393, 0.70871, 0.768932, 0.793909, 0.502535, 0.0368069, 0.872487, 0.378125, 0.230383, 0.678453, 0.335893, 0.641312, 0.494577, 0.817331, 0.0714147, 0.903744, 0.296858, 0.0163886, 0.80362, 0.965925, 0.791549, 0.303967, 0.119317, 0.41864, 0.396399, 0.552522, 0.996168, 0.0674004, 0.497469, 0.798797, 0.453758, 0.896735, 0.531693, 0.921619, 0.982519, 0.746088, 0.431495, 0.823074, 0.451503, 0.903768, 0.129629, 0.552264, 0.259362, 0.848628, 0.931445, 0.990877, 0.337878, 0.435602, 0.513372, 0.651007, 0.184937, 0.00799516, 0.666817, 0.603167, 0.475551},
{0.887328, 0.839807, 0.0658457, 0.796756, 0.593634, 0.981388, 0.555095, 0.974812, 0.808996, 0.803127, 0.10013, 0.194108, 0.931505, 0.10941, 0.235267, 0.189052, 0.915197, 0.649317, 0.595391, 0.811237, 0.854527, 0.607413, 0.00108409, 0.0273903, 0.0320824, 0.631895, 0.868353, 0.489855, 0.643028, 0.397866, 0.264777, 0.655393, 0.58538, 0.733943, 0.0904855, 0.395338, 0.267811, 0.648723, 0.345116, 0.812056, 0.694868, 0.870728, 0.601279, 0.857282, 0.991771, 0.686039, 0.503718, 0.731965, 0.226451, 0.143296, 0.24856, 0.663408, 0.170043, 0.707613, 0.649218, 0.609904, 0.106514, 0.662282, 0.326712, 0.763585, 0.570232, 0.730333, 0.367614, 0.683281, 0.0408447, 0.030586, 0.74647, 0.182255, 0.42677, 0.637311, 0.0135818, 0.680459, 0.318405, 0.541782, 0.765076, 0.000691207, 0.680391, 0.699393, 0.718091, 0.860276, 0.996923, 0.54617, 0.345639, 0.0341935, 0.677293, 0.695357, 0.779349, 0.00878847, 0.239261, 0.835255, 0.470454, 0.264892, 0.528202, 0.469405, 0.306672, 0.267914, 0.750353, 0.310906, 0.698981, 0.0829471},
{0.963089, 0.510436, 0.115649, 0.637469, 0.336281, 0.721702, 0.433222, 0.879487, 0.829611, 0.89921, 0.0748293, 0.724037, 0.535895, 0.183488, 0.046115, 0.244767, 0.131719, 0.0730135, 0.137727, 0.214939, 0.488195, 0.970414, 0.883339, 0.258706, 0.47935, 0.323481, 0.213322, 0.338603, 0.698863, 0.19676, 0.437935, 0.480249, 0.0613985, 0.37225, 0.973982, 0.277187, 0.96637, 0.8818, 0.559419, 0.793044, 0.64516, 0.730528, 0.73409, 0.383466, 0.481185, 0.52761, 0.139761, 0.283492, 0.844167, 0.49951, 0.293189, 0.00348912, 0.88727, 0.910512, 0.922723, 0.356215, 0.101491, 0.203112, 0.641582, 0.256245, 0.982296, 0.548404, 0.127485, 0.59478, 0.843634, 0.475958, 0.0293608, 0.361046, 0.21539, 0.83319, 0.596725, 0.998222, 0.912401, 0.231528, 0.680346, 0.787513, 0.0242818, 0.187711, 0.12995, 0.155412, 0.793166, 0.495358, 0.940487, 0.142498, 0.155522, 0.512831, 0.0602543, 0.736201, 0.510408, 0.828056, 0.56494, 0.195982, 0.930123, 0.68308, 0.969646, 0.785339, 0.729334, 0.909464, 0.532461, 0.818544},
{0.778469, 0.320539, 0.169052, 0.785447, 0.983749, 0.522217, 0.604766, 0.613607, 0.177586, 0.582033, 0.9884, 0.641505, 0.262709, 0.0225035, 0.877873, 0.479049, 0.437974, 0.322506, 0.945885, 0.176035, 0.991527, 0.727885, 0.185898, 0.450316, 0.626911, 0.994667, 0.328294, 0.106275, 0.113971, 0.258854, 0.91304, 0.35532, 0.996962, 0.287864, 0.204652, 0.222389, 0.882862, 0.663599, 0.688933, 0.433844, 0.116954, 0.672773, 0.106809, 0.544208, 0.178359, 0.692319, 0.155531, 0.533195, 0.889006, 0.812998, 0.663397, 0.374327, 0.447298, 0.591778, 0.299619, 0.338682, 0.0901659, 0.697359, 0.0774927, 0.57305, 0.751893, 0.075873, 0.391106, 0.0611943, 0.880248, 0.0834331, 0.157432, 0.254687, 0.151219, 0.706415, 0.758721, 0.395034, 0.894228, 0.316446, 0.732979, 0.0447674, 0.759911, 0.878501, 0.940268, 0.721698, 0.424933, 0.932289, 0.635131, 0.658209, 0.700707, 0.748728, 0.658006, 0.77397, 0.0782268, 0.242299, 0.029139, 0.255185, 0.228313, 0.259612, 0.512195, 0.218389, 0.806685, 0.92009, 0.63669, 0.309618},
};

static const std::vector<float> costs = {875.58, 308.755, 384.026, 422.144, 533.407, 901.64, 973.423, 561.552, 480.765, 227.692, 334.705, 273.649, 119.413, 31.2495, 370.361, 370.268, 129.599, 109.709, 414.868, 233.372, 406.425, 549.087, 126.014, 66.6014, 159.828, 364.276, 360.191, 403.533, 350.148, 73.1329, 18.8977, 451.789, 196.905, 130.533, 252.294, 2.17794, 991.552, 48.6557, 757.385, 256.619, 318.386, 510.396, 374.997, 671.911, 728.324, 825.604, 906.682, 835.596, 392.402, 387.786, 218.622, 117.853, 635.514, 798.234, 41.4961, 150.363, 178.311, 578.346, 148.558, 107.284, 503.379, 554.377, 489.352, 702.926, 568.57, 953.953, 523.504, 316.424, 462.143, 302.229, 817.044, 769.977, 582.836, 305.623, 445.833, 318.449, 678.252, 127.862, 463.114, 733.337, 913.849, 395.215, 890.726, 753.377, 739.001, 997.99, 37.9828, 642.576, 109.279, 386.365, 559.339, 892.245, 850.24, 618.478, 699.559, 358.494, 401.649, 10.1492, 165.548, 437.873};

static const std::vector<float> min_impressions = {0.717732, 0.051316, 0.111933, 0.885457, 0.997218};

//
#endif
