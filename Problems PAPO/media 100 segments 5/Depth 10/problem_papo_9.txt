#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 100;
static const int segments = 5;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49), cons_event(50), cons_event(51), cons_event(52), cons_event(53), cons_event(54), cons_event(55), cons_event(56), cons_event(57), cons_event(58), cons_event(59), cons_event(60), cons_event(61), cons_event(62), cons_event(63), cons_event(64), cons_event(65), cons_event(66), cons_event(67), cons_event(68), cons_event(69), cons_event(70), cons_event(71), cons_event(72), cons_event(73), cons_event(74), cons_event(75), cons_event(76), cons_event(77), cons_event(78), cons_event(79), cons_event(80), cons_event(81), cons_event(82), cons_event(83), cons_event(84), cons_event(85), cons_event(86), cons_event(87), cons_event(88), cons_event(89), cons_event(90), cons_event(91), cons_event(92), cons_event(93), cons_event(94), cons_event(95), cons_event(96), cons_event(97), cons_event(98), cons_event(99)};

static const std::vector<Syntax_Tree> restrictions = {cons_incl(cons_indep(cons_incl(cons_excl(cons_incl(cons_excl(cons_incl(cons_indep(cons_excl(cons_excl(events[43], events[16]),events[29]),events[2]),events[5]),events[3]),events[66]),events[50]),events[58]),events[14]),events[17]),cons_incl(cons_excl(cons_indep(cons_incl(cons_incl(cons_excl(cons_incl(cons_incl(cons_excl(cons_indep(events[77], events[37]),events[2]),events[49]),events[58]),events[68]),events[99]),events[23]),events[10]),events[92]),events[7]),cons_excl(cons_excl(cons_indep(cons_indep(cons_indep(cons_excl(cons_indep(cons_indep(cons_excl(cons_indep(events[36], events[4]),events[88]),events[79]),events[66]),events[6]),events[34]),events[73]),events[69]),events[90]),events[15]),cons_incl(cons_incl(cons_incl(cons_incl(cons_excl(cons_excl(cons_excl(cons_incl(cons_incl(cons_excl(events[85], events[33]),events[41]),events[12]),events[26]),events[43]),events[21]),events[1]),events[83]),events[38]),events[8]),cons_incl(cons_excl(cons_incl(cons_excl(cons_incl(cons_indep(cons_incl(cons_excl(cons_excl(cons_incl(events[22], events[74]),events[72]),events[77]),events[50]),events[55]),events[8]),events[80]),events[30]),events[89]),events[66])};


static const std::vector< std::vector<float> > prob = {{0.42687, 0.291843, 0.419749, 0.999234, 0.35347, 0.0797175, 0.875717, 0.845962, 0.108829, 0.282462, 0.676311, 0.618867, 0.603508, 0.824957, 0.866138, 0.937279, 0.640462, 0.899239, 0.58264, 0.999494, 0.809401, 0.8232, 0.295768, 0.479416, 0.453598, 0.546221, 0.5646, 0.196244, 0.925865, 0.877754, 0.949138, 0.385384, 0.102869, 0.925783, 0.0539118, 0.788842, 0.376995, 0.105194, 0.862997, 0.615524, 0.0934652, 0.760273, 0.0888843, 0.282984, 0.947774, 0.830008, 0.418265, 0.232198, 0.914254, 0.457566, 0.393405, 0.845235, 0.810755, 0.809285, 0.839693, 0.125828, 0.021394, 0.231855, 0.411188, 0.930506, 0.471582, 0.168904, 0.997954, 0.807672, 0.356266, 0.641085, 0.514803, 0.46377, 0.325965, 0.708786, 0.301916, 0.974983, 0.890695, 0.615054, 0.351693, 0.324534, 0.748594, 0.431777, 0.123339, 0.737753, 0.513238, 0.0643256, 0.134981, 0.564437, 0.833166, 0.786367, 0.712964, 0.853014, 0.0594554, 0.25274, 0.331592, 0.20379, 0.70418, 0.353369, 0.666795, 0.835166, 0.9687, 0.524978, 0.0315862, 0.299136},
{0.533796, 0.776641, 0.439296, 0.929656, 0.653701, 0.0550163, 0.448023, 0.373584, 0.35967, 0.296352, 0.424268, 0.341051, 0.567961, 0.0765263, 0.711913, 0.071807, 0.72707, 0.583518, 0.043362, 0.336026, 0.935805, 0.688494, 0.762514, 0.372481, 0.594141, 0.423692, 0.853606, 0.506213, 0.862438, 0.79765, 0.18327, 0.514778, 0.425663, 0.815233, 0.343214, 0.52083, 0.716262, 0.866974, 0.663305, 0.0032487, 0.605697, 0.0422343, 0.112494, 0.00341412, 0.931988, 0.438005, 0.886698, 0.491745, 0.693327, 0.912499, 0.0648518, 0.695309, 0.638578, 0.463385, 0.454463, 0.868935, 0.0770728, 0.892163, 0.542729, 0.148834, 0.267572, 0.753646, 0.305951, 0.526151, 0.630151, 0.0861463, 0.0239719, 0.103925, 0.5145, 0.44153, 0.938949, 0.0403509, 0.198379, 0.992497, 0.608675, 0.266251, 0.840458, 0.863869, 0.160563, 0.333384, 0.465331, 0.131656, 0.620769, 0.615162, 0.0857093, 0.980251, 0.928446, 0.850352, 0.0876658, 0.431984, 0.0139047, 0.153735, 0.61366, 0.743638, 0.834772, 0.647616, 0.759933, 0.901348, 0.217167, 0.655232},
{0.168018, 0.85911, 0.78536, 0.349011, 0.559871, 0.563302, 0.11628, 0.74855, 0.566028, 0.792848, 0.417658, 0.300244, 0.428911, 0.313253, 0.793873, 0.5533, 0.810963, 0.24182, 0.0994116, 0.868327, 0.514783, 0.723056, 0.235357, 0.395598, 0.798711, 0.203675, 0.345163, 0.636189, 0.798478, 0.51837, 0.204864, 0.930399, 0.424275, 0.733203, 0.301593, 0.405781, 0.237193, 0.333658, 0.756771, 0.0303829, 0.454023, 0.358346, 0.12669, 0.41658, 0.966029, 0.101394, 0.831469, 0.860379, 0.170775, 0.166637, 0.930376, 0.253188, 0.34763, 0.805188, 0.0932091, 0.20773, 0.172765, 0.21098, 0.944307, 0.204169, 0.827574, 0.193571, 0.277378, 0.84526, 0.892923, 0.919173, 0.77653, 0.370625, 0.00595172, 0.199901, 0.0900077, 0.321376, 0.460447, 0.15926, 0.300358, 0.464141, 0.33817, 0.360979, 0.68254, 0.245329, 0.573667, 0.556641, 0.155457, 0.838526, 0.0279501, 0.240179, 0.760169, 0.459283, 0.0568582, 0.22224, 0.835837, 0.537266, 0.429247, 0.489773, 0.041275, 0.584071, 0.588417, 0.894701, 0.209281, 0.285751},
{0.943293, 0.39837, 0.561801, 0.00106949, 0.570113, 0.831542, 0.114214, 0.237844, 0.869062, 0.23717, 0.666497, 0.190384, 0.651506, 0.786834, 0.730735, 0.33801, 0.682051, 0.362506, 0.742453, 0.512721, 0.73766, 0.440719, 0.270397, 0.0875274, 0.370203, 0.940737, 0.538554, 0.203761, 0.403996, 0.751032, 0.617196, 0.178978, 0.796496, 0.514604, 0.280417, 0.561301, 0.892147, 0.421812, 0.520409, 0.425476, 0.00983804, 0.386928, 0.584037, 0.683121, 0.221967, 0.27532, 0.0499605, 0.8778, 0.081126, 0.69717, 0.907709, 0.0625894, 0.973853, 0.154961, 0.281297, 0.878462, 0.748384, 0.594707, 0.548782, 0.945819, 0.0627917, 0.739797, 0.515859, 0.681206, 0.289869, 0.0318163, 0.958051, 0.533836, 0.65916, 0.331257, 0.98058, 0.927974, 0.206193, 0.137265, 0.983094, 0.309709, 0.794462, 0.0629338, 0.436454, 0.994959, 0.158135, 0.579386, 0.529507, 0.125897, 0.00914054, 0.367748, 0.61882, 0.433777, 0.201419, 0.837474, 0.20661, 0.304145, 0.104471, 0.420634, 0.301618, 0.989454, 0.241011, 0.830301, 0.738912, 0.787865},
{0.980013, 0.0945829, 0.951789, 0.499438, 0.558331, 0.422347, 0.890202, 0.716958, 0.544523, 0.181438, 0.644474, 0.274462, 0.473381, 0.373846, 0.378123, 0.478823, 0.722194, 0.129654, 0.0420101, 0.173849, 0.0193887, 0.119699, 0.359564, 0.533152, 0.830159, 0.137655, 0.655966, 0.202411, 0.716383, 0.855727, 0.792448, 0.608296, 0.644232, 0.536437, 0.489934, 0.295825, 0.407471, 0.592374, 0.973828, 0.777279, 0.221241, 0.543846, 0.204221, 0.730934, 0.140697, 0.718457, 0.906721, 0.318961, 0.511851, 0.51618, 0.778566, 0.684474, 0.828677, 0.0929256, 0.0837922, 0.431348, 0.845398, 0.572489, 0.825827, 0.176604, 0.215846, 0.246171, 0.90262, 0.564585, 0.192579, 0.44255, 0.0630906, 0.442924, 0.564911, 0.506011, 0.967186, 0.513974, 0.239793, 0.77005, 0.751196, 0.8364, 0.759431, 0.200834, 0.36032, 0.0800076, 0.981115, 0.798263, 0.243873, 0.971193, 0.203707, 0.427186, 0.466399, 0.0977383, 0.157893, 0.303046, 0.402971, 0.735761, 0.540987, 0.0139003, 0.218184, 0.97311, 0.744211, 0.912264, 0.112429, 0.601976},
};

static const std::vector<float> costs = {568.138, 203.548, 244.359, 334.054, 988.707, 317.795, 653.498, 518.207, 396.299, 219.448, 41.4369, 839.451, 77.4624, 833.502, 507.678, 337.968, 343.768, 286.942, 142.807, 955.999, 373.476, 49.5885, 833.447, 215.539, 257.756, 762.349, 819.076, 344.051, 794.745, 102.557, 955.105, 821.002, 334.846, 552.657, 774.79, 102.229, 695.388, 744.433, 181.921, 199.421, 30.6453, 927.803, 988.714, 557.065, 749.486, 844.301, 277.884, 585.918, 456.925, 867.365, 333.956, 131.536, 976.483, 809.663, 841.146, 196.27, 231.872, 140.479, 991.15, 730.85, 681.874, 402.226, 360.084, 584.579, 506.849, 390.536, 311.601, 486.856, 923.096, 949.957, 762.682, 8.34186, 89.7059, 958.829, 131.319, 913.159, 249.431, 610.754, 29.7785, 718.716, 262.576, 287.086, 687.301, 682.55, 536.579, 747.133, 121.74, 12.7618, 507.351, 466.92, 499.78, 312.314, 138.601, 114.537, 153.513, 292.326, 365.762, 867.147, 720.66, 332.242};

static const std::vector<float> min_impressions = {0.267373, 0.181227, 0.0611632, 0.16022, 0.0510897};

//
#endif
