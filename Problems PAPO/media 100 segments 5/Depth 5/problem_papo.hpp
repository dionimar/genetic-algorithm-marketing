#ifndef PROBLEM_H
#define PROBLEM_H
#include "syntax_tree.hpp"
#include <iostream>

#define PAPO

static const int media = 100;
static const int segments = 5;

static const std::vector<Syntax_Tree> events = {
    cons_event(0),  cons_event(1),  cons_event(2),  cons_event(3),
    cons_event(4),  cons_event(5),  cons_event(6),  cons_event(7),
    cons_event(8),  cons_event(9),  cons_event(10), cons_event(11),
    cons_event(12), cons_event(13), cons_event(14), cons_event(15),
    cons_event(16), cons_event(17), cons_event(18), cons_event(19),
    cons_event(20), cons_event(21), cons_event(22), cons_event(23),
    cons_event(24), cons_event(25), cons_event(26), cons_event(27),
    cons_event(28), cons_event(29), cons_event(30), cons_event(31),
    cons_event(32), cons_event(33), cons_event(34), cons_event(35),
    cons_event(36), cons_event(37), cons_event(38), cons_event(39),
    cons_event(40), cons_event(41), cons_event(42), cons_event(43),
    cons_event(44), cons_event(45), cons_event(46), cons_event(47),
    cons_event(48), cons_event(49), cons_event(50), cons_event(51),
    cons_event(52), cons_event(53), cons_event(54), cons_event(55),
    cons_event(56), cons_event(57), cons_event(58), cons_event(59),
    cons_event(60), cons_event(61), cons_event(62), cons_event(63),
    cons_event(64), cons_event(65), cons_event(66), cons_event(67),
    cons_event(68), cons_event(69), cons_event(70), cons_event(71),
    cons_event(72), cons_event(73), cons_event(74), cons_event(75),
    cons_event(76), cons_event(77), cons_event(78), cons_event(79),
    cons_event(80), cons_event(81), cons_event(82), cons_event(83),
    cons_event(84), cons_event(85), cons_event(86), cons_event(87),
    cons_event(88), cons_event(89), cons_event(90), cons_event(91),
    cons_event(92), cons_event(93), cons_event(94), cons_event(95),
    cons_event(96), cons_event(97), cons_event(98), cons_event(99)};

static const std::vector<Syntax_Tree> restrictions = {
    cons_indep(
        cons_indep(
            cons_indep(cons_excl(cons_excl(events[84], events[54]), events[68]),
                       events[66]),
            events[64]),
        events[71]),
    cons_excl(cons_excl(cons_incl(cons_incl(cons_excl(events[67], events[2]),
                                            events[36]),
                                  events[50]),
                        events[30]),
              events[17]),
    cons_indep(
        cons_indep(
            cons_indep(cons_incl(cons_indep(events[83], events[56]), events[0]),
                       events[91]),
            events[19]),
        events[41]),
    cons_indep(cons_indep(cons_incl(cons_excl(cons_excl(events[63], events[98]),
                                              events[89]),
                                    events[53]),
                          events[62]),
               events[67]),
    cons_excl(cons_indep(cons_excl(cons_excl(cons_incl(events[65], events[11]),
                                             events[77]),
                                   events[13]),
                         events[38]),
              events[42])};

static const std::vector<std::vector<float>> prob = {
    {0.381879, 0.211208,   0.0337284, 0.0938153, 0.257044,  0.594451,
     0.113794, 0.263187,   0.885021,  0.396141,  0.332522,  0.473346,
     0.368364, 0.756273,   0.590513,  0.874035,  0.580533,  0.382549,
     0.609976, 0.0216571,  0.318943,  0.0917795, 0.792669,  0.202353,
     0.493973, 0.0872035,  0.797353,  0.504728,  0.527815,  0.988676,
     0.774578, 0.792003,   0.477877,  0.0706678, 0.400317,  0.751148,
     0.381392, 0.268242,   0.341118,  0.268711,  0.284318,  0.415946,
     0.843129, 0.629438,   0.956756,  0.560689,  0.364066,  0.194374,
     0.860088, 0.474091,   0.622179,  0.673263,  0.188933,  0.251234,
     0.194958, 0.741688,   0.844758,  0.706116,  0.992326,  0.381625,
     0.961592, 0.383808,   0.715231,  0.570701,  0.373739,  0.941692,
     0.318471, 0.658416,   0.201627,  0.896435,  0.0385621, 0.451412,
     0.247316, 0.552607,   0.548643,  0.993461,  0.0412285, 0.983319,
     0.972111, 0.650895,   0.881222,  0.682552,  0.663084,  0.826063,
     0.570804, 0.417804,   0.590585,  0.815101,  0.914581,  0.636566,
     0.346642, 0.00489967, 0.484849,  0.838175,  0.685399,  0.0650876,
     0.493944, 0.42952,    0.665139,  0.249587},
    {0.685439, 0.0461112, 0.896392, 0.553737,  0.738345,  0.999047,  0.485029,
     0.758403, 0.987879,  0.347408, 0.191334,  0.714288,  0.0105241, 0.461138,
     0.988086, 0.534446,  0.487781, 0.462681,  0.772018,  0.14136,   0.434108,
     0.299052, 0.0405366, 0.590805, 0.322006,  0.160303,  0.675483,  0.379806,
     0.433534, 0.338598,  0.166978, 0.715286,  0.593858,  0.950927,  0.206445,
     0.211136, 0.285672,  0.974579, 0.794906,  0.0437303, 0.824445,  0.114607,
     0.411892, 0.64925,   0.940023, 0.127321,  0.448208,  0.244803,  0.103708,
     0.504637, 0.587276,  0.759499, 0.175963,  0.685263,  0.687671,  0.795224,
     0.416841, 0.998587,  0.208794, 0.602623,  0.300243,  0.216337,  0.609371,
     0.597097, 0.4645,    0.675432, 0.550889,  0.189506,  0.583388,  0.269579,
     0.333289, 0.430263,  0.769529, 0.304587,  0.236407,  0.951004,  0.48484,
     0.272635, 0.448241,  0.861357, 0.0428276, 0.607644,  0.933368,  0.589281,
     0.731394, 0.903393,  0.444293, 0.759294,  0.803611,  0.813193,  0.0109537,
     0.601215, 0.543567,  0.559225, 0.73789,   0.904185,  0.0416239, 0.834516,
     0.729163, 0.920043},
    {0.582574, 0.837004, 0.144939,  0.22465,   0.0524935, 0.129764,  0.270581,
     0.656454, 0.595985, 0.674189,  0.635888,  0.643696,  0.0717948, 0.554236,
     0.748454, 0.889347, 0.586409,  0.0941035, 0.136174,  0.13206,   0.21439,
     0.869861, 0.539107, 0.887685,  0.269517,  0.56899,   0.625945,  0.892028,
     0.6593,   0.607454, 0.72599,   0.866384,  0.863161,  0.984552,  0.678229,
     0.228013, 0.728938, 0.567842,  0.33821,   0.675417,  0.670573,  0.872154,
     0.670649, 0.794825, 0.0390138, 0.527514,  0.848697,  0.306197,  0.296777,
     0.280282, 0.271677, 0.134913,  0.163413,  0.101011,  0.225807,  0.574235,
     0.553779, 0.735548, 0.462778,  0.667804,  0.860721,  0.387891,  0.75064,
     0.981031, 0.29164,  0.874595,  0.538899,  0.173625,  0.423538,  0.806599,
     0.790266, 0.39925,  0.611381,  0.116289,  0.936383,  0.716729,  0.815463,
     0.180862, 0.506223, 0.863652,  0.0972719, 0.151739,  0.518162,  0.60786,
     0.466681, 0.579412, 0.938771,  0.447343,  0.942044,  0.102899,  0.593497,
     0.638701, 0.205873, 0.459826,  0.650436,  0.930829,  0.871844,  0.987757,
     0.376799, 0.916807},
    {0.804506,  0.123433,  0.525789,   0.459517,   0.802625, 0.00880484,
     0.127543,  0.0645964, 0.896909,   0.25832,    0.901005, 0.103159,
     0.355677,  0.895291,  0.382278,   0.903105,   0.638081, 0.848675,
     0.120705,  0.404855,  0.528772,   0.4415,     0.659014, 0.927986,
     0.096969,  0.51141,   0.925587,   0.647646,   0.72766,  0.496233,
     0.350586,  0.17778,   0.976965,   0.911123,   0.667518, 0.493118,
     0.346081,  0.867077,  0.744022,   0.101481,   0.734794, 0.0855421,
     0.400472,  0.896673,  0.896669,   0.739596,   0.561609, 0.943794,
     0.706945,  0.216885,  0.00985397, 0.46506,    0.139642, 0.340168,
     0.49659,   0.478911,  0.444961,   0.00398961, 0.832999, 0.165592,
     0.393637,  0.343433,  0.251161,   0.432069,   0.835643, 0.919406,
     0.215643,  0.695191,  0.422918,   0.319899,   0.727107, 0.163765,
     0.730843,  0.824729,  0.604762,   0.471923,   0.113352, 0.790589,
     0.454941,  0.560236,  0.0152423,  0.601982,   0.494696, 0.615096,
     0.0884581, 0.790566,  0.315798,   0.504704,   0.322131, 0.427217,
     0.995222,  0.334044,  0.380155,   0.513279,   0.167852, 0.755587,
     0.957057,  0.957858,  0.0325539,  0.354902},
    {0.340714,  0.977787,  0.512061,  0.339214,  0.755031,  0.175953,
     0.0455378, 0.804133,  0.838109,  0.428226,  0.980655,  0.502788,
     0.670861,  0.887889,  0.0154407, 0.0615926, 0.0494473, 0.342342,
     0.856872,  0.240564,  0.76872,   0.142891,  0.944008,  0.0799555,
     0.637256,  0.83491,   0.215333,  0.496785,  0.288826,  0.0673208,
     0.447082,  0.780754,  0.755306,  0.332756,  0.867599,  0.965756,
     0.118176,  0.767042,  0.391692,  0.947568,  0.194171,  0.395178,
     0.725204,  0.945174,  0.825158,  0.648998,  0.586991,  0.98107,
     0.530655,  0.844665,  0.0946064, 0.563165,  0.0935479, 0.558982,
     0.738405,  0.0478309, 0.539566,  0.98809,   0.425293,  0.500174,
     0.969789,  0.0698542, 0.433561,  0.028874,  0.926162,  0.925522,
     0.640391,  0.0895126, 0.343665,  0.727499,  0.220263,  0.956536,
     0.304216,  0.937224,  0.865668,  0.620525,  0.273136,  0.0125096,
     0.910085,  0.517283,  0.193094,  0.862404,  0.227475,  0.500867,
     0.299673,  0.184357,  0.677104,  0.25356,   0.483064,  0.844068,
     0.25438,   0.665672,  0.708203,  0.168579,  0.563777,  0.2235,
     0.406808,  0.838996,  0.288061,  0.567272},
};

static const std::vector<float> costs = {
    400.839, 117.482, 94.3029, 645.868, 300.805, 537.112, 223.344, 238.438,
    432.755, 566.294, 334.935, 981.157, 542.921, 454.311, 659.927, 705.014,
    395.984, 261.043, 173.556, 562.917, 463.013, 533.035, 860.487, 340.734,
    744.878, 406.39,  386.21,  912.033, 751.772, 800.229, 519.359, 566.455,
    602.669, 478.087, 738.726, 289.513, 688.341, 147.959, 545.78,  250.958,
    551.398, 234.499, 797.278, 481.484, 877.666, 803.498, 645.529, 589.453,
    509.103, 463.612, 231.084, 92.8326, 234.229, 273.883, 207.007, 843.197,
    555.619, 267.277, 331.254, 110.821, 888.33,  10.5791, 471.535, 614.394,
    43.3475, 694.434, 233.643, 250.621, 712.323, 623.321, 118.712, 829.892,
    811.04,  344.644, 125.406, 105.345, 301.157, 467.967, 231.455, 341.043,
    392.599, 5.99777, 32.6881, 201.955, 827.448, 983.458, 865.944, 378.245,
    8.51533, 387.712, 863.566, 713.21,  415.381, 534.57,  603.618, 716.06,
    503.614, 906.57,  978.376, 520.155};

static const std::vector<float> min_impressions = {0.77466, 0.302268, 0.247562,
                                                   0.440147, 0.266859};

//
#endif
