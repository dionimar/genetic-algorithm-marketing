#ifndef PROBLEM_H
#define PROBLEM_H
#include "syntax_tree.hpp"
#include <iostream>

#define PAPO

static const int media = 50;
static const int segments = 10;

static const std::vector<Syntax_Tree> events = {
    cons_event(0),  cons_event(1),  cons_event(2),  cons_event(3),
    cons_event(4),  cons_event(5),  cons_event(6),  cons_event(7),
    cons_event(8),  cons_event(9),  cons_event(10), cons_event(11),
    cons_event(12), cons_event(13), cons_event(14), cons_event(15),
    cons_event(16), cons_event(17), cons_event(18), cons_event(19),
    cons_event(20), cons_event(21), cons_event(22), cons_event(23),
    cons_event(24), cons_event(25), cons_event(26), cons_event(27),
    cons_event(28), cons_event(29), cons_event(30), cons_event(31),
    cons_event(32), cons_event(33), cons_event(34), cons_event(35),
    cons_event(36), cons_event(37), cons_event(38), cons_event(39),
    cons_event(40), cons_event(41), cons_event(42), cons_event(43),
    cons_event(44), cons_event(45), cons_event(46), cons_event(47),
    cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {
    cons_indep(cons_incl(cons_excl(cons_indep(cons_indep(events[38], events[2]),
                                              events[33]),
                                   events[23]),
                         events[21]),
               events[39]),
    cons_incl(cons_excl(cons_incl(cons_incl(cons_incl(events[30], events[45]),
                                            events[26]),
                                  events[39]),
                        events[13]),
              events[31]),
    cons_excl(cons_excl(cons_excl(cons_indep(cons_indep(events[5], events[39]),
                                             events[16]),
                                  events[38]),
                        events[8]),
              events[29]),
    cons_indep(cons_indep(cons_incl(cons_incl(cons_indep(events[1], events[10]),
                                              events[8]),
                                    events[13]),
                          events[7]),
               events[34]),
    cons_excl(
        cons_indep(cons_indep(cons_indep(cons_incl(events[44], events[23]),
                                         events[29]),
                              events[9]),
                   events[16]),
        events[30]),
    cons_incl(cons_excl(cons_excl(cons_incl(cons_excl(events[42], events[22]),
                                            events[11]),
                                  events[48]),
                        events[47]),
              events[14]),
    cons_excl(cons_excl(cons_incl(cons_indep(cons_excl(events[4], events[35]),
                                             events[49]),
                                  events[7]),
                        events[36]),
              events[40]),
    cons_indep(
        cons_indep(
            cons_indep(cons_excl(cons_incl(events[17], events[19]), events[33]),
                       events[49]),
            events[21]),
        events[37]),
    cons_excl(cons_excl(cons_incl(cons_incl(cons_incl(events[29], events[31]),
                                            events[36]),
                                  events[39]),
                        events[45]),
              events[18]),
    cons_incl(cons_incl(cons_incl(cons_excl(cons_indep(events[25], events[32]),
                                            events[1]),
                                  events[14]),
                        events[20]),
              events[22])};
static const std::vector<std::vector<float>> prob = {
    {0.203446,    0.159005, 0.894672, 0.881637, 0.38612,  0.632908,  0.0440517,
     0.65909,     0.213048, 0.401491, 0.821813, 0.519363, 0.0721937, 0.670741,
     0.000729787, 0.46716,  0.238818, 0.161822, 0.160887, 0.381334,  0.415024,
     0.293986,    0.896048, 0.870445, 0.988976, 0.962682, 0.762417,  0.877647,
     0.694556,    0.536044, 0.934776, 0.256433, 0.327786, 0.0988034, 0.367052,
     0.158518,    0.150383, 0.621899, 0.878255, 0.343652, 0.236921,  0.510669,
     0.523045,    0.468289, 0.290617, 0.571437, 0.352765, 0.589911,  0.203571,
     0.876161},
    {0.0091635, 0.918314,    0.447311, 0.842387,  0.975356, 0.643371,  0.28009,
     0.259721,  0.808961,    0.424469, 0.585062,  0.021193, 0.427656,  0.453802,
     0.539361,  0.726823,    0.280686, 0.866359,  0.771655, 0.28902,   0.754019,
     0.682247,  0.644826,    0.12296,  0.138244,  0.137031, 0.706013,  0.958164,
     0.150033,  0.510437,    0.046644, 0.494053,  0.545957, 0.924623,  0.782045,
     0.36374,   0.0309926,   0.369198, 0.663252,  0.214452, 0.477982,  0.438342,
     0.504494,  0.000308828, 0.362783, 0.0373122, 0.653165, 0.0652454, 0.807072,
     0.534057},
    {0.21333,   0.228409,  0.119927, 0.810481, 0.0200938, 0.334988, 0.545425,
     0.722266,  0.63351,   0.297956, 0.345577, 0.839995,  0.482637, 0.427227,
     0.571242,  0.0963917, 0.993044, 0.447873, 0.793866,  0.14492,  0.558966,
     0.857861,  0.31198,   0.810452, 0.560013, 0.570411,  0.784217, 0.456454,
     0.157157,  0.679468,  0.475971, 0.201252, 0.809434,  0.622659, 0.705281,
     0.0493913, 0.774866,  0.804723, 0.683863, 0.853385,  0.946849, 0.598858,
     0.032021,  0.5419,    0.761252, 0.772773, 0.965638,  0.191711, 0.248674,
     0.394616},
    {0.390586,  0.582069, 0.9668,   0.436574, 0.248286,  0.562348, 0.867096,
     0.194031,  0.519828, 0.325234, 0.228157, 0.127077,  0.407634, 0.0585508,
     0.0404153, 0.28666,  0.800346, 0.401135, 0.0939265, 0.110806, 0.971637,
     0.061299,  0.520436, 0.849135, 0.645903, 0.686406,  0.822122, 0.89819,
     0.640028,  0.740658, 0.201599, 0.26738,  0.325901,  0.214144, 0.825526,
     0.0734236, 0.242195, 0.897416, 0.559415, 0.569652,  0.43016,  0.350682,
     0.10848,   0.629652, 0.382647, 0.61028,  0.738781,  0.454739, 0.969709,
     0.580637},
    {0.933855,  0.470888,  0.868765,  0.937421,  0.416183,    0.17354,
     0.494535,  0.671904,  0.0196056, 0.210647,  0.783777,    0.467109,
     0.428115,  0.0938057, 0.834186,  0.362893,  0.875621,    0.216456,
     0.50251,   0.697586,  0.806135,  0.0656571, 0.95327,     0.887218,
     0.0596321, 0.906358,  0.32154,   0.436774,  0.784506,    0.747095,
     0.617652,  0.508463,  0.931021,  0.496447,  0.72839,     0.0297147,
     0.174769,  0.0460638, 0.730657,  0.401518,  0.133732,    0.948243,
     0.112139,  0.624417,  0.185148,  0.992146,  0.000100456, 0.855555,
     0.36457,   0.72111},
    {0.453041,  0.685634,  0.173334,  0.354586, 0.241165, 0.641795,  0.856487,
     0.861662,  0.59902,   0.490484,  0.203116, 0.810511, 0.0200921, 0.686336,
     0.861393,  0.841132,  0.746645,  0.463939, 0.40527,  0.685139,  0.949392,
     0.73737,   0.477916,  0.231157,  0.585247, 0.759077, 0.467089,  0.684715,
     0.0967355, 0.0240441, 0.0309993, 0.853937, 0.700525, 0.179172,  0.954866,
     0.775181,  0.44513,   0.849213,  0.173866, 0.16692,  0.632156,  0.0643168,
     0.944436,  0.131509,  0.187869,  0.905597, 0.407209, 0.327058,  0.583499,
     0.964609},
    {0.893979,   0.694519, 0.329176, 0.925485,  0.693663,  0.96361,   0.103471,
     0.47344,    0.856718, 0.860744, 0.650209,  0.342199,  0.85715,   0.278389,
     0.24601,    0.7028,   0.363279, 0.886452,  0.532555,  0.116602,  0.0910699,
     0.261009,   0.942693, 0.684559, 0.227311,  0.877039,  0.67019,   0.650753,
     0.815106,   0.271771, 0.64197,  0.0692742, 0.322952,  0.477054,  0.958955,
     0.967749,   0.344378, 0.495043, 0.900059,  0.0343759, 0.0289543, 0.86776,
     0.00806001, 0.724974, 0.123245, 0.552489,  0.931749,  0.65123,   0.593886,
     0.682843},
    {0.728218,  0.102782, 0.263413, 0.154977, 0.443747, 0.834924,  0.238764,
     0.299742,  0.184772, 0.928488, 0.822502, 0.180847, 0.488087,  0.017623,
     0.58209,   0.509144, 0.260053, 0.87685,  0.54103,  0.364035,  0.0112906,
     0.961476,  0.246628, 0.226338, 0.977313, 0.631218, 0.314683,  0.379503,
     0.0743514, 0.33725,  0.359937, 0.434914, 0.127614, 0.234024,  0.0645039,
     0.151644,  0.298274, 0.838793, 0.011461, 0.287221, 0.757746,  0.273464,
     0.197334,  0.497414, 0.24034,  0.262151, 0.12075,  0.0423125, 0.881862,
     0.401922},
    {0.788476,  0.177097,   0.681239, 0.468289,  0.736723,  0.931203,
     0.933921,  0.771985,   0.123426, 0.812149,  0.671797,  0.318227,
     0.561123,  0.00470629, 0.496863, 0.987588,  0.827403,  0.183218,
     0.0866355, 0.793639,   0.589044, 0.790737,  0.0278856, 0.487254,
     0.868136,  0.585753,   0.613744, 0.985648,  0.339204,  0.771299,
     0.0563892, 0.523149,   0.248902, 0.013949,  0.601555,  0.641795,
     0.574275,  0.559736,   0.698793, 0.766892,  0.956934,  0.0182991,
     0.387717,  0.621246,   0.468648, 0.0767784, 0.882082,  0.0714404,
     0.738686,  0.330385},
    {0.714234, 0.635657, 0.250657, 0.746991, 0.494246, 0.115207, 0.947228,
     0.532549, 0.984539, 0.337124, 0.219582, 0.322096, 0.970641, 0.583651,
     0.625542, 0.594024, 0.483973, 0.829771, 0.466935, 0.345859, 0.622883,
     0.873551, 0.907119, 0.812861, 0.384167, 0.176669, 0.905345, 0.551467,
     0.3928,   0.821673, 0.564107, 0.275989, 0.725875, 0.740186, 0.654406,
     0.462178, 0.961978, 0.890759, 0.7435,   0.700676, 0.511006, 0.105257,
     0.228806, 0.440299, 0.97077,  0.691795, 0.741808, 0.576419, 0.333332,
     0.198908},
};

static const std::vector<float> costs = {
    702.625, 604.981, 321.659, 476.288, 544.736, 782.958, 126.158, 651.09,
    698.13,  922.246, 664.396, 309.101, 414.847, 728.334, 531.75,  547.099,
    828.654, 547.894, 500.587, 222.204, 381.385, 607.058, 141.605, 19.7703,
    473.786, 759.607, 616.908, 128.699, 934.644, 617.656, 421.912, 928.533,
    890.312, 348.128, 447.347, 773.255, 837.079, 485.157, 138.613, 526.03,
    593.784, 177,     348.992, 127.84,  423.131, 986.851, 248.201, 22.4357,
    465.906, 105.897};

static const std::vector<float> min_impressions = {
    0.0617284, 0.159506, 0.28255,  0.605249, 0.0736749,
    0.119104,  0.266252, 0.993893, 0.380151, 0.092753};

//
#endif
