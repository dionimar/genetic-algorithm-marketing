#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 100;
static const int segments = 5;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49), cons_event(50), cons_event(51), cons_event(52), cons_event(53), cons_event(54), cons_event(55), cons_event(56), cons_event(57), cons_event(58), cons_event(59), cons_event(60), cons_event(61), cons_event(62), cons_event(63), cons_event(64), cons_event(65), cons_event(66), cons_event(67), cons_event(68), cons_event(69), cons_event(70), cons_event(71), cons_event(72), cons_event(73), cons_event(74), cons_event(75), cons_event(76), cons_event(77), cons_event(78), cons_event(79), cons_event(80), cons_event(81), cons_event(82), cons_event(83), cons_event(84), cons_event(85), cons_event(86), cons_event(87), cons_event(88), cons_event(89), cons_event(90), cons_event(91), cons_event(92), cons_event(93), cons_event(94), cons_event(95), cons_event(96), cons_event(97), cons_event(98), cons_event(99)};

static const std::vector<Syntax_Tree> restrictions = {cons_indep(cons_indep(cons_excl(cons_incl(cons_incl(cons_indep(cons_indep(cons_incl(cons_excl(cons_excl(events[0], events[36]),events[64]),events[60]),events[59]),events[58]),events[18]),events[74]),events[5]),events[35]),events[50]),cons_excl(cons_indep(cons_incl(cons_excl(cons_excl(cons_indep(cons_excl(cons_incl(cons_indep(cons_excl(events[19], events[68]),events[85]),events[25]),events[18]),events[65]),events[2]),events[56]),events[62]),events[0]),events[72]),cons_indep(cons_incl(cons_indep(cons_excl(cons_excl(cons_indep(cons_indep(cons_excl(cons_excl(cons_indep(events[97], events[5]),events[41]),events[36]),events[12]),events[35]),events[33]),events[9]),events[39]),events[34]),events[44]),cons_excl(cons_incl(cons_incl(cons_incl(cons_excl(cons_incl(cons_indep(cons_incl(cons_indep(cons_incl(events[28], events[30]),events[78]),events[46]),events[62]),events[50]),events[61]),events[69]),events[4]),events[34]),events[5]),cons_incl(cons_indep(cons_indep(cons_incl(cons_indep(cons_excl(cons_incl(cons_indep(cons_indep(cons_excl(events[11], events[48]),events[56]),events[29]),events[85]),events[47]),events[41]),events[79]),events[30]),events[35]),events[83])};


static const std::vector< std::vector<float> > prob = {{0.305814, 0.940197, 0.0468376, 0.619028, 0.235234, 0.318751, 0.850536, 0.025978, 0.0593539, 0.618282, 0.406409, 0.41796, 0.498805, 0.326687, 0.904873, 0.553658, 0.992283, 0.0552304, 0.548127, 0.609827, 0.00497526, 0.698523, 0.504836, 3.62304e05, 0.478506, 0.0297333, 0.743855, 0.484969, 0.0269949, 0.209428, 0.67512, 0.0519084, 0.115171, 0.814379, 0.654347, 0.940991, 0.996726, 0.0824019, 0.921718, 0.786363, 0.139889, 0.86622, 0.823706, 0.873104, 0.846788, 0.197508, 0.797338, 0.122608, 0.576585, 0.703867, 0.454268, 0.714346, 0.644063, 0.309623, 0.699909, 0.258503, 0.180903, 0.668082, 0.883428, 0.248614, 0.318837, 0.358192, 0.591744, 0.125239, 0.105704, 0.749933, 0.341217, 0.225017, 0.957513, 0.938955, 0.934943, 0.165231, 0.383657, 0.378622, 0.0157704, 0.565133, 0.539443, 0.688247, 0.551852, 0.50649, 0.271956, 0.187937, 0.234281, 0.582205, 0.187407, 0.243046, 0.233986, 0.0772422, 0.981149, 0.110718, 0.159723, 0.0205938, 0.762727, 0.148651, 0.685565, 0.496283, 0.209911, 0.203019, 0.94218, 0.0667651},
{0.528745, 0.321923, 0.179841, 0.670635, 0.144724, 0.0799192, 0.778761, 0.847196, 0.27975, 0.228512, 0.727329, 0.684516, 0.1423, 0.223776, 0.505845, 0.21771, 0.755984, 0.829216, 0.876019, 0.322161, 0.948028, 0.181059, 0.999646, 0.596877, 0.636776, 0.345348, 0.510559, 0.81247, 0.838672, 0.737624, 0.510433, 0.953481, 0.79098, 0.430919, 0.449299, 0.753059, 0.0884941, 0.276064, 0.229295, 0.148588, 0.543875, 0.66804, 0.288289, 0.688137, 0.577319, 0.983922, 0.725255, 0.566379, 0.386184, 0.412898, 0.451336, 0.658559, 0.929049, 0.47641, 0.59043, 0.844084, 0.788553, 0.583477, 0.961407, 0.502164, 0.400133, 0.509151, 0.0426576, 0.837469, 0.560999, 0.43398, 0.424672, 0.895497, 0.166713, 0.0239344, 0.430222, 0.28027, 0.813325, 0.784123, 0.0713661, 0.394307, 0.923321, 0.805552, 0.845132, 0.792717, 0.163716, 0.196496, 0.631814, 0.248325, 0.0316165, 0.370422, 0.539534, 0.187954, 0.414684, 0.819773, 0.291636, 0.67868, 0.258877, 0.72322, 0.103985, 0.389464, 0.611563, 0.920528, 0.344708, 0.11824},
{0.968675, 0.713878, 0.618956, 0.1935, 0.613036, 0.0907879, 0.124321, 0.399467, 0.160111, 0.846108, 0.625982, 0.442658, 0.363604, 0.465269, 0.303597, 0.0329113, 0.228686, 0.360007, 0.362725, 0.0725312, 0.433869, 0.599681, 0.408733, 0.418389, 0.242543, 0.967714, 0.0521421, 0.57543, 0.439629, 0.329603, 0.0722735, 0.0713082, 0.599384, 0.562383, 0.616439, 0.521348, 0.936254, 0.330948, 0.401814, 0.239639, 0.413582, 0.546749, 0.738593, 0.461755, 0.925033, 0.832789, 0.8682, 0.0309198, 0.354619, 0.206185, 0.0312012, 0.936204, 0.304649, 0.599403, 0.909837, 0.400777, 0.124994, 0.499448, 0.48144, 0.435768, 0.635262, 0.389705, 0.105466, 0.671601, 0.891614, 0.354855, 0.690538, 0.414552, 0.466269, 0.38661, 0.0847635, 0.755384, 0.0411156, 0.615227, 0.424075, 0.913708, 0.75145, 0.496058, 0.921, 0.340979, 0.759504, 0.0737039, 0.714544, 0.33189, 0.100925, 0.633776, 0.859074, 0.503508, 0.426679, 0.10835, 0.8851, 0.251404, 0.297266, 0.839842, 0.152129, 0.731375, 0.892782, 0.485811, 0.174494, 0.366334},
{0.0299031, 0.786328, 0.0778547, 0.752727, 0.101795, 0.788893, 0.51704, 0.64552, 0.41625, 0.804496, 0.479854, 0.884756, 0.129767, 0.200469, 0.110459, 0.19662, 0.239408, 0.554145, 0.559581, 0.741228, 0.388302, 0.467784, 0.781473, 0.120059, 0.363704, 0.159963, 0.802709, 0.146832, 0.567222, 0.606324, 0.528551, 0.0633563, 0.469237, 0.426246, 0.975584, 0.837182, 0.317647, 0.417627, 0.221593, 0.666046, 0.830076, 0.687617, 0.485932, 0.686346, 0.498936, 0.243057, 0.890252, 0.316703, 0.800554, 0.270338, 0.336877, 0.446023, 0.868865, 0.907399, 0.302161, 0.507836, 0.437246, 0.973426, 0.571464, 0.349181, 0.501678, 0.306802, 0.730824, 0.98258, 0.427671, 0.207871, 0.137019, 0.508669, 0.87894, 0.512319, 0.675319, 0.530918, 0.965974, 0.743198, 0.403939, 0.187724, 0.459518, 0.21309, 0.34088, 0.760796, 0.490291, 0.586681, 0.134486, 0.926489, 0.944954, 0.718205, 0.789897, 0.545437, 0.269731, 0.198895, 0.0197558, 0.850312, 0.625885, 0.393222, 0.272971, 0.145979, 0.318746, 0.459083, 0.451318, 0.178417},
{0.360438, 0.963461, 0.990282, 0.2074, 0.315317, 0.68338, 0.270211, 0.296648, 0.44438, 0.0943985, 0.436507, 0.598193, 0.836556, 0.617236, 0.348515, 0.61883, 0.902307, 0.683628, 0.153632, 0.534321, 0.974424, 0.318926, 0.403779, 0.199295, 0.571495, 0.67999, 0.445336, 0.565114, 0.438603, 0.9769, 0.272658, 0.0398127, 0.879932, 0.758576, 0.216973, 0.894817, 0.518569, 0.450167, 0.918297, 0.715612, 0.0290275, 0.68599, 0.705875, 0.502513, 0.836783, 0.257252, 0.574946, 0.874395, 0.206876, 0.92708, 0.727221, 0.719316, 0.100283, 0.792526, 0.969375, 0.591557, 0.573314, 0.893094, 0.0441934, 0.97221, 0.300822, 0.505976, 0.271308, 0.697769, 0.642697, 0.769723, 0.78727, 0.82202, 0.806584, 0.347825, 0.0279908, 0.4487, 0.336312, 0.190463, 0.589213, 0.97995, 0.711294, 0.256575, 0.0934741, 0.418711, 0.745875, 0.468569, 0.921176, 0.757682, 0.113155, 0.853116, 0.648637, 0.789491, 0.467199, 0.534432, 0.0290408, 0.0739207, 0.437913, 0.922312, 0.0109604, 0.789063, 0.564672, 0.267018, 0.717268, 0.00621497},
};

static const std::vector<float> costs = {872.668, 306.718, 976.98, 158.576, 32.5074, 79.5953, 434.294, 946.401, 751.238, 41.7007, 158.744, 453.007, 958.134, 89.0749, 578.243, 83.3298, 321.813, 206.085, 174.248, 793.558, 78.7099, 172.055, 575.464, 577.267, 853.871, 915.102, 305.84, 160.878, 670.36, 964.037, 49.9382, 744.871, 999.616, 902.768, 435.995, 398.112, 942.961, 323.337, 750.612, 41.3951, 900.627, 403.349, 715.268, 114.406, 402.306, 613.499, 838.33, 583.889, 757.854, 881.326, 997.723, 919.607, 814.417, 936.284, 744.688, 893.902, 866.468, 165.863, 614.995, 314.928, 222.915, 320.445, 625.453, 591.027, 127.283, 238.704, 333.863, 425.466, 201.363, 769.044, 611.68, 472.908, 364.023, 233.842, 966.919, 263.999, 250.162, 558.036, 853.069, 973.829, 311.013, 638.332, 152.263, 164.639, 215.504, 535.022, 372.747, 919.658, 348.446, 622.227, 778.748, 81.516, 73.5219, 192.29, 178.544, 782.808, 862.286, 886.289, 762.383, 401.655};

static const std::vector<float> min_impressions = {0.922205, 0.318116, 0.656663, 0.575239, 0.0490225};

//
#endif
