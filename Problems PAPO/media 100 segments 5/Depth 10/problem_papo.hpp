#ifndef PROBLEM_H
#define PROBLEM_H
#include "syntax_tree.hpp"
#include <iostream>

#define PAPO

static const int media = 100;
static const int segments = 5;

static const std::vector<Syntax_Tree> events = {
    cons_event(0),  cons_event(1),  cons_event(2),  cons_event(3),
    cons_event(4),  cons_event(5),  cons_event(6),  cons_event(7),
    cons_event(8),  cons_event(9),  cons_event(10), cons_event(11),
    cons_event(12), cons_event(13), cons_event(14), cons_event(15),
    cons_event(16), cons_event(17), cons_event(18), cons_event(19),
    cons_event(20), cons_event(21), cons_event(22), cons_event(23),
    cons_event(24), cons_event(25), cons_event(26), cons_event(27),
    cons_event(28), cons_event(29), cons_event(30), cons_event(31),
    cons_event(32), cons_event(33), cons_event(34), cons_event(35),
    cons_event(36), cons_event(37), cons_event(38), cons_event(39),
    cons_event(40), cons_event(41), cons_event(42), cons_event(43),
    cons_event(44), cons_event(45), cons_event(46), cons_event(47),
    cons_event(48), cons_event(49), cons_event(50), cons_event(51),
    cons_event(52), cons_event(53), cons_event(54), cons_event(55),
    cons_event(56), cons_event(57), cons_event(58), cons_event(59),
    cons_event(60), cons_event(61), cons_event(62), cons_event(63),
    cons_event(64), cons_event(65), cons_event(66), cons_event(67),
    cons_event(68), cons_event(69), cons_event(70), cons_event(71),
    cons_event(72), cons_event(73), cons_event(74), cons_event(75),
    cons_event(76), cons_event(77), cons_event(78), cons_event(79),
    cons_event(80), cons_event(81), cons_event(82), cons_event(83),
    cons_event(84), cons_event(85), cons_event(86), cons_event(87),
    cons_event(88), cons_event(89), cons_event(90), cons_event(91),
    cons_event(92), cons_event(93), cons_event(94), cons_event(95),
    cons_event(96), cons_event(97), cons_event(98), cons_event(99)};

static const std::vector<Syntax_Tree> restrictions = {
    cons_excl(
        cons_indep(
            cons_excl(
                cons_indep(
                    cons_excl(cons_incl(cons_incl(cons_indep(
                                                      cons_indep(
                                                          cons_excl(events[1],
                                                                    events[90]),
                                                          events[35]),
                                                      events[24]),
                                                  events[4]),
                                        events[39]),
                              events[52]),
                    events[23]),
                events[0]),
            events[78]),
        events[10]),
    cons_indep(
        cons_excl(
            cons_incl(
                cons_incl(
                    cons_indep(
                        cons_excl(cons_incl(cons_incl(cons_indep(
                                                          cons_incl(events[96],
                                                                    events[37]),
                                                          events[92]),
                                                      events[23]),
                                            events[55]),
                                  events[7]),
                        events[93]),
                    events[86]),
                events[85]),
            events[66]),
        events[73]),
    cons_incl(
        cons_incl(
            cons_incl(
                cons_excl(
                    cons_excl(cons_indep(
                                  cons_indep(
                                      cons_excl(cons_excl(cons_incl(events[59],
                                                                    events[97]),
                                                          events[68]),
                                                events[22]),
                                      events[51]),
                                  events[70]),
                              events[80]),
                    events[93]),
                events[25]),
            events[27]),
        events[19]),
    cons_excl(
        cons_excl(
            cons_indep(
                cons_excl(
                    cons_incl(cons_indep(
                                  cons_incl(cons_incl(cons_indep(
                                                          cons_incl(events[65],
                                                                    events[50]),
                                                          events[35]),
                                                      events[45]),
                                            events[96]),
                                  events[42]),
                              events[39]),
                    events[27]),
                events[13]),
            events[90]),
        events[54]),
    cons_incl(
        cons_indep(
            cons_excl(
                cons_excl(cons_incl(cons_indep(
                                        cons_indep(
                                            cons_incl(cons_excl(cons_indep(
                                                                    events[92],
                                                                    events[66]),
                                                                events[25]),
                                                      events[41]),
                                            events[46]),
                                        events[91]),
                                    events[69]),
                          events[14]),
                events[30]),
            events[11]),
        events[37])};

static const std::vector<std::vector<float>> prob = {
    {0.219602,   0.9088,    0.389528,  0.27942,   0.614469,  0.292246,
     0.702395,   0.0288904, 0.549659,  0.994751,  0.522024,  0.739728,
     0.123741,   0.44911,   0.961623,  0.731053,  0.360946,  0.623787,
     0.00768591, 0.141765,  0.873244,  0.908361,  0.234563,  0.388134,
     0.853648,   0.58737,   0.519808,  0.980305,  0.622652,  0.495853,
     0.915713,   0.580783,  0.409742,  0.430158,  0.965878,  0.716194,
     0.605374,   0.665019,  0.236357,  0.126611,  0.545595,  0.206752,
     0.158647,   0.363935,  0.173666,  0.127662,  0.410206,  0.280387,
     0.0726819,  0.687748,  0.202464,  0.267213,  0.668353,  0.29312,
     0.374789,   0.897561,  0.541176,  0.387698,  0.0868611, 0.332946,
     0.0695356,  0.553848,  0.620508,  0.719683,  0.0671611, 0.142596,
     0.413322,   0.315178,  0.808519,  0.630623,  0.476698,  0.379075,
     0.106144,   0.61251,   0.0619808, 0.557969,  0.0648769, 0.505304,
     0.654597,   0.0153491, 0.924443,  0.336813,  0.932059,  0.0180969,
     0.748227,   0.64791,   0.282952,  0.0730423, 0.986328,  0.833027,
     0.456837,   0.207081,  0.76581,   0.684086,  0.198828,  0.038345,
     0.205653,   0.0230865, 0.815421,  0.333212},
    {0.148708,  0.157204, 0.752138,  0.364889, 0.0079618, 0.441929,   0.190367,
     0.290368,  0.681876, 0.0601832, 0.106256, 0.758345,  0.814561,   0.680153,
     0.780824,  0.190438, 0.791479,  0.147202, 0.64442,   0.358667,   0.221117,
     0.772688,  0.746828, 0.455435,  0.196307, 0.378323,  0.71025,    0.5163,
     0.990675,  0.428944, 0.418977,  0.630217, 0.799727,  0.909242,   0.302826,
     0.728986,  0.712025, 0.5745,    0.436898, 0.763559,  0.30943,    0.657367,
     0.943985,  0.115653, 0.824896,  0.4694,   0.188683,  0.251552,   0.445088,
     0.0986104, 0.307841, 0.10875,   0.950938, 0.670812,  0.25532,    0.0636849,
     0.779099,  0.246696, 0.320364,  0.296037, 0.302594,  0.43508,    0.824183,
     0.0697735, 0.682876, 0.381498,  0.971188, 0.199597,  0.00948351, 0.701917,
     0.856152,  0.368256, 0.0574298, 0.773986, 0.48293,   0.0862897,  0.770953,
     0.089729,  0.744295, 0.382319,  0.361847, 0.538749,  0.270634,   0.64845,
     0.843278,  0.564006, 0.987407,  0.282454, 0.123075,  0.958335,   0.138017,
     0.343588,  0.360799, 0.0683885, 0.925122, 0.795217,  0.100144,   0.167146,
     0.0208995, 0.616733},
    {0.425204,  0.135209,  0.305384, 0.305658,  0.897712,   0.81743,
     0.143877,  0.569638,  0.849232, 0.311155,  0.140507,   0.47673,
     0.293398,  0.17117,   0.638925, 0.860869,  0.569895,   0.455012,
     0.878763,  0.544214,  0.412314, 0.529945,  0.96343,    0.354775,
     0.180701,  0.227905,  0.306187, 0.502204,  0.137322,   0.78035,
     0.545685,  0.714423,  0.987408, 0.544565,  0.231695,   0.560156,
     0.843636,  0.145603,  0.943362, 0.104354,  0.00673791, 0.384168,
     0.508555,  0.747423,  0.894682, 0.358509,  0.377112,   0.538674,
     0.883477,  0.947508,  0.221725, 0.755712,  0.369442,   0.0214505,
     0.242307,  0.232435,  0.610586, 0.76091,   0.842134,   0.61149,
     0.492066,  0.423985,  0.739972, 0.0672458, 0.0955963,  0.711286,
     0.0659503, 0.390497,  0.146497, 0.659025,  0.188984,   0.627402,
     0.588386,  0.147965,  0.522575, 0.347365,  0.462849,   0.530818,
     0.110888,  0.818614,  0.859097, 0.608069,  0.420513,   0.818895,
     0.162443,  0.265911,  0.513683, 0.0568892, 0.918433,   0.471628,
     0.320539,  0.316138,  0.558284, 0.118122,  0.661738,   0.67385,
     0.0105472, 0.0461157, 0.940177, 0.945164},
    {0.767524,   0.461469,  0.442283,   0.551262,  0.771752,  0.719715,
     0.00655575, 0.436946,  0.182384,   0.6034,    0.86928,   0.697593,
     0.392375,   0.793953,  0.513535,   0.399226,  0.0510974, 0.679916,
     0.524607,   0.29311,   0.898597,   0.997086,  0.222047,  0.684045,
     0.797779,   0.894873,  0.317769,   0.665392,  0.706991,  0.542246,
     0.887999,   0.645606,  0.1366,     0.0254159, 0.931607,  0.215406,
     0.778538,   0.551327,  0.0388499,  0.401645,  0.778463,  0.231859,
     0.246679,   0.221251,  0.266073,   0.751411,  0.258603,  0.406112,
     0.790754,   0.0689055, 0.160134,   0.0926222, 0.263582,  0.14502,
     0.48788,    0.639786,  0.887168,   0.14326,   0.197364,  0.634351,
     0.97902,    0.705793,  0.490745,   0.57042,   0.454159,  0.707506,
     0.612226,   0.180166,  0.00511314, 0.425392,  0.621029,  0.781961,
     0.936296,   0.243468,  0.826569,   0.251333,  0.721178,  0.300094,
     0.87221,    0.737071,  0.645969,   0.148536,  0.275532,  0.75496,
     0.695572,   0.644493,  0.830092,   0.803191,  0.0168229, 0.815894,
     0.298734,   0.468246,  0.239863,   0.510518,  0.801359,  0.828681,
     0.838462,   0.425216,  0.575093,   0.784139},
    {0.433519,  0.687535,  0.343048,  0.84051,  0.286999,  0.680964, 0.846072,
     0.743779,  0.708803,  0.689249,  0.524977, 0.0804757, 0.722007, 0.299805,
     0.0473124, 0.377216,  0.431245,  0.431791, 0.143454,  0.831233, 0.941922,
     0.226111,  0.818114,  0.412578,  0.499261, 0.655388,  0.171115, 0.450602,
     0.389788,  0.575694,  0.0416557, 0.957032, 0.322076,  0.319716, 0.574493,
     0.955371,  0.904473,  0.878463,  0.196735, 0.549256,  0.849012, 0.164384,
     0.761327,  0.236892,  0.709627,  0.884868, 0.194691,  0.205293, 0.894636,
     0.0294729, 0.103515,  0.476613,  0.544308, 0.268331,  0.814986, 0.863181,
     0.49641,   0.383896,  0.959099,  0.232008, 0.39702,   0.271287, 0.674239,
     0.242052,  0.515102,  0.390797,  0.916342, 0.18457,   0.298146, 0.54274,
     0.81246,   0.127255,  0.0545217, 0.911145, 0.108546,  0.293416, 0.918467,
     0.683421,  0.634064,  0.306172,  0.882864, 0.832907,  0.289427, 0.311597,
     0.118524,  0.109633,  0.0493277, 0.756052, 0.678389,  0.436582, 0.931965,
     0.401444,  0.0809282, 0.649543,  0.937544, 0.778926,  0.819417, 0.479331,
     0.893591,  0.953957},
};

static const std::vector<float> costs = {
    930.514, 9.02735, 275.661, 39.1417, 126.741, 421.703, 865.636, 190.854,
    819.398, 619.986, 487.059, 616.449, 433.74,  146.947, 760.094, 51.5479,
    820.401, 425.592, 87.581,  475.79,  30.4359, 811.262, 671.898, 552.634,
    903.539, 543.223, 657.426, 558.594, 454.113, 612.031, 873.413, 825.335,
    524.904, 543.408, 915.752, 725.829, 810.975, 161.526, 456.706, 310.595,
    731.583, 898.8,   66.2122, 18.7081, 296.74,  397.857, 291.11,  796.516,
    182.85,  284.668, 298.743, 97.8594, 674.336, 130.702, 981.386, 683.434,
    257.241, 921.788, 896.358, 472.047, 518.16,  341.195, 15.2286, 361.983,
    714.731, 308.45,  418.289, 496.41,  868.974, 172.174, 52.8087, 556.781,
    869.489, 80.8322, 833.725, 521.465, 711.832, 276.423, 619.803, 857.702,
    185.235, 275.822, 357.361, 450.545, 527.594, 971.562, 178.374, 936.718,
    292.092, 115.711, 370.526, 54.0098, 614.201, 565.058, 821.483, 418.97,
    185.077, 224.725, 880.578, 421.186};

static const std::vector<float> min_impressions = {0.590893, 0.607514, 0.167215,
                                                   0.040173, 0.450057};

//
#endif
