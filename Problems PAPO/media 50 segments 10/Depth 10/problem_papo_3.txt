#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 10;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_indep(cons_indep(cons_excl(cons_incl(cons_incl(cons_incl(cons_incl(cons_excl(cons_excl(cons_indep(events[1], events[8]),events[9]),events[16]),events[24]),events[27]),events[19]),events[43]),events[4]),events[18]),events[41]),cons_indep(cons_excl(cons_indep(cons_indep(cons_indep(cons_incl(cons_excl(cons_incl(cons_incl(cons_indep(events[23], events[2]),events[33]),events[16]),events[10]),events[41]),events[6]),events[32]),events[0]),events[30]),events[39]),cons_incl(cons_excl(cons_indep(cons_indep(cons_indep(cons_indep(cons_indep(cons_indep(cons_incl(cons_excl(events[1], events[45]),events[10]),events[22]),events[3]),events[27]),events[18]),events[6]),events[39]),events[44]),events[40]),cons_indep(cons_excl(cons_excl(cons_incl(cons_incl(cons_incl(cons_indep(cons_incl(cons_incl(cons_incl(events[10], events[31]),events[45]),events[2]),events[4]),events[38]),events[36]),events[17]),events[15]),events[21]),events[6]),cons_indep(cons_incl(cons_excl(cons_indep(cons_excl(cons_indep(cons_indep(cons_indep(cons_indep(cons_incl(events[36], events[29]),events[44]),events[5]),events[8]),events[12]),events[39]),events[17]),events[6]),events[26]),events[32]),cons_excl(cons_excl(cons_incl(cons_incl(cons_excl(cons_incl(cons_excl(cons_excl(cons_excl(cons_excl(events[36], events[27]),events[46]),events[5]),events[30]),events[13]),events[22]),events[28]),events[32]),events[37]),events[0]),cons_indep(cons_incl(cons_excl(cons_incl(cons_incl(cons_incl(cons_incl(cons_indep(cons_indep(cons_indep(events[18], events[23]),events[48]),events[15]),events[22]),events[17]),events[2]),events[4]),events[37]),events[5]),events[0]),cons_excl(cons_excl(cons_indep(cons_indep(cons_excl(cons_incl(cons_excl(cons_indep(cons_excl(cons_excl(events[31], events[45]),events[1]),events[19]),events[6]),events[32]),events[3]),events[48]),events[23]),events[0]),events[35]),cons_incl(cons_excl(cons_incl(cons_excl(cons_excl(cons_incl(cons_excl(cons_indep(cons_indep(cons_excl(events[41], events[42]),events[36]),events[18]),events[24]),events[4]),events[21]),events[22]),events[23]),events[10]),events[28]),cons_incl(cons_incl(cons_incl(cons_incl(cons_indep(cons_excl(cons_indep(cons_indep(cons_indep(cons_indep(events[41], events[11]),events[43]),events[0]),events[37]),events[25]),events[31]),events[27]),events[32]),events[29]),events[12])};


static const std::vector< std::vector<float> > prob = {{0.280547, 0.335019, 0.564652, 0.191437, 0.395795, 0.463666, 0.329093, 0.682385, 0.723846, 0.582364, 0.703093, 0.60947, 0.231117, 0.109762, 0.436135, 0.529564, 0.937717, 0.0859665, 0.593353, 0.778205, 0.179864, 0.844794, 0.315435, 0.157466, 0.266534, 0.751813, 0.316583, 0.580973, 0.0190651, 0.602052, 0.928679, 0.655394, 0.124886, 0.845651, 0.759589, 0.178602, 0.592487, 0.388461, 0.719963, 0.342818, 0.260703, 0.839245, 0.667666, 0.0785503, 0.65949, 0.430689, 0.720972, 0.293925, 0.168574, 0.672443},
{0.999606, 0.71764, 0.0174714, 0.35345, 0.873477, 0.720783, 0.320011, 0.63765, 0.800768, 0.348625, 0.818682, 0.57252, 0.953644, 0.826015, 0.488481, 0.480908, 0.952847, 0.411388, 0.731937, 0.0792246, 0.918353, 0.617755, 0.803814, 0.0356419, 0.0829237, 0.827983, 0.071043, 0.81558, 0.783223, 0.964171, 0.371654, 0.0573711, 0.979191, 0.971753, 0.00112641, 0.197269, 0.864148, 0.181729, 0.862881, 0.460243, 0.306967, 0.433048, 0.44878, 0.86932, 0.487147, 0.0771023, 0.81972, 0.426596, 0.95927, 0.840641},
{0.759114, 0.253993, 0.19082, 0.7854, 0.754767, 0.613589, 0.259226, 0.719913, 0.470113, 0.858289, 0.668806, 0.494701, 0.994112, 0.155179, 0.900482, 0.367868, 0.589941, 0.709704, 0.833724, 0.141169, 0.214193, 0.768018, 0.363356, 0.0963218, 0.708204, 0.545799, 0.716119, 0.789749, 0.987951, 0.454405, 0.368018, 0.646378, 0.900816, 0.116397, 0.66566, 0.834442, 0.324212, 0.265562, 0.250754, 0.0821817, 0.81276, 0.258363, 0.259794, 0.457002, 0.454244, 0.0620386, 0.527499, 0.0146082, 0.619757, 0.912567},
{0.827374, 0.865303, 0.277204, 0.449441, 0.112671, 0.22231, 0.531371, 0.28558, 0.106198, 0.367244, 0.425487, 0.175315, 0.816337, 0.107705, 0.260761, 0.153287, 0.866902, 0.286558, 0.737369, 0.881568, 0.673734, 0.412176, 0.235212, 0.111389, 0.0170599, 0.959956, 0.276591, 0.0379844, 0.537544, 0.526605, 0.123134, 0.0644418, 0.821296, 0.644481, 0.75773, 0.163934, 0.94946, 0.231268, 0.715477, 0.825604, 0.604087, 0.148201, 0.708355, 0.454397, 0.837385, 0.416907, 0.6813, 0.880524, 0.68286, 0.722644},
{0.829657, 0.130577, 0.796472, 0.360398, 0.865875, 0.37133, 0.407131, 0.66389, 0.348203, 0.597235, 0.117933, 0.828831, 0.443736, 0.0759509, 0.632884, 0.306114, 0.273187, 0.140517, 0.119824, 0.140564, 0.414575, 0.533001, 0.39229, 0.859416, 0.637824, 0.603407, 0.0974336, 0.833345, 0.864661, 0.928309, 0.245086, 0.460055, 0.744151, 0.723683, 0.955634, 0.181804, 0.974066, 0.026556, 0.0548957, 0.512007, 0.96046, 0.566897, 0.978197, 0.986768, 0.814982, 0.397222, 0.0791892, 0.387449, 0.535583, 0.260173},
{0.383571, 0.525718, 0.472897, 0.537989, 0.877076, 0.0164978, 0.635015, 0.643626, 0.0514306, 0.357098, 0.0355266, 0.124967, 0.159201, 0.793172, 0.951144, 0.767551, 0.643019, 0.735807, 0.829572, 0.716213, 0.942089, 0.717655, 0.982795, 0.739422, 0.00626647, 0.342269, 0.158102, 0.551956, 0.412174, 0.908309, 0.746294, 0.0144425, 0.386802, 0.571688, 0.648419, 0.621659, 0.509282, 0.780403, 0.888901, 0.0204858, 0.462061, 0.961843, 0.591606, 0.661051, 0.36598, 0.722357, 0.0227758, 0.294627, 0.852072, 0.0125922},
{0.76148, 0.565509, 0.852638, 0.712716, 0.333605, 0.147191, 0.297997, 0.00282143, 0.0780521, 0.326004, 0.340817, 0.653683, 0.452723, 0.29325, 0.256389, 0.991896, 0.656899, 0.170382, 0.179455, 0.0149984, 0.0412886, 0.653938, 0.744079, 0.645518, 0.592436, 0.916548, 0.321668, 0.317436, 0.902025, 0.402196, 0.68068, 0.817478, 0.251742, 0.771979, 0.511465, 0.837028, 0.999178, 0.50189, 0.00446205, 0.465523, 0.791673, 0.384865, 0.241208, 0.297822, 0.68317, 0.422397, 0.0596399, 0.508886, 0.81476, 0.158768},
{0.788542, 0.432865, 0.21526, 0.577268, 0.103088, 0.173815, 0.295208, 0.190401, 0.933325, 0.404985, 0.369771, 0.585008, 0.512872, 0.451551, 0.360722, 0.995596, 0.701151, 0.615124, 0.963595, 0.132753, 0.18064, 0.906834, 0.981745, 0.961829, 0.901288, 0.64275, 0.649121, 0.712692, 0.969832, 0.270316, 0.51437, 0.0705904, 0.366975, 0.636394, 0.881315, 0.908983, 0.80257, 0.133161, 0.319417, 0.249713, 0.273729, 0.39509, 0.546398, 0.206461, 0.726936, 0.956145, 0.123092, 0.370547, 0.301656, 0.684499},
{0.568045, 0.36307, 0.180114, 0.289132, 0.374717, 0.943204, 0.291268, 0.845686, 0.0280131, 0.0264269, 0.477666, 0.196164, 0.511359, 0.823607, 0.484363, 0.182017, 0.883679, 0.624473, 0.83959, 0.939268, 0.0214395, 0.568702, 0.0362302, 0.930679, 0.858298, 0.384759, 0.699665, 0.392969, 0.841568, 0.0878371, 0.384887, 0.127096, 0.456388, 0.0723853, 0.284681, 0.0260734, 0.164157, 0.0122544, 0.28686, 0.13982, 0.524032, 0.0704202, 0.103314, 0.932248, 0.38161, 0.0409078, 0.538364, 0.457355, 0.893069, 0.754708},
{0.908994, 0.602776, 0.67787, 0.783497, 0.481992, 0.0517476, 0.905708, 0.2327, 0.0559735, 0.391219, 0.183239, 0.0358793, 0.57898, 0.934406, 0.0566368, 0.118376, 0.854516, 0.662061, 0.495273, 0.450657, 0.313169, 0.555732, 0.867938, 0.426348, 0.155472, 0.186761, 0.571717, 0.917523, 0.505226, 0.993532, 0.382419, 0.45578, 0.113533, 0.458099, 0.301425, 0.508869, 0.873501, 0.718919, 0.19586, 0.096265, 0.809772, 0.259887, 0.169873, 0.330623, 0.503421, 0.893181, 0.286068, 0.130083, 0.181398, 0.240669},
};

static const std::vector<float> costs = {174.247, 637.062, 269.453, 613.807, 527.268, 693.646, 199.067, 296.844, 564.866, 215.968, 155.198, 157.763, 821.969, 400.788, 169.59, 174.678, 916.452, 836.425, 770.066, 384.216, 544.743, 37.7244, 784.485, 219.982, 472.49, 280.522, 140.011, 13.3061, 541.837, 740.718, 699.355, 714.944, 410.814, 94.2733, 444.935, 346.351, 510.935, 322.526, 450.417, 992.314, 622.562, 551.324, 324.377, 860.358, 580.301, 835.585, 738.007, 480.305, 463.135, 722.649};

static const std::vector<float> min_impressions = {0.492238, 0.465423, 0.731196, 0.22584, 0.0825946, 0.0785696, 0.164867, 0.126088, 0.516092, 0.539003};

//
#endif
