#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 10;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_excl(cons_incl(cons_excl(cons_excl(cons_indep(events[42], events[41]),events[7]),events[3]),events[5]),events[36]),cons_incl(cons_incl(cons_incl(cons_indep(cons_excl(events[41], events[7]),events[29]),events[4]),events[22]),events[38]),cons_excl(cons_excl(cons_incl(cons_indep(cons_incl(events[12], events[6]),events[39]),events[2]),events[29]),events[31]),cons_incl(cons_excl(cons_excl(cons_incl(cons_excl(events[17], events[4]),events[49]),events[47]),events[3]),events[30]),cons_incl(cons_excl(cons_indep(cons_excl(cons_indep(events[40], events[24]),events[1]),events[29]),events[23]),events[0]),cons_indep(cons_incl(cons_indep(cons_excl(cons_incl(events[34], events[27]),events[26]),events[31]),events[35]),events[32]),cons_excl(cons_indep(cons_incl(cons_incl(cons_indep(events[24], events[34]),events[28]),events[19]),events[31]),events[6]),cons_incl(cons_excl(cons_excl(cons_indep(cons_incl(events[19], events[14]),events[22]),events[8]),events[39]),events[44]),cons_incl(cons_excl(cons_excl(cons_incl(cons_indep(events[12], events[49]),events[0]),events[42]),events[24]),events[35]),cons_indep(cons_incl(cons_excl(cons_indep(cons_incl(events[29], events[21]),events[46]),events[10]),events[6]),events[5])};


static const std::vector< std::vector<float> > prob = {{0.354503, 0.363685, 0.72492, 0.299264, 0.0909937, 0.664187, 0.996744, 0.518691, 0.0675266, 0.988692, 0.194108, 0.792096, 0.543205, 0.950773, 0.201827, 0.899044, 0.122555, 0.16783, 0.840972, 0.605786, 0.165046, 0.988193, 0.735863, 0.196327, 0.187622, 0.987135, 0.453327, 0.0410184, 0.921476, 0.692581, 0.0296361, 0.39895, 0.47541, 0.836696, 0.168532, 0.652162, 0.127075, 0.83025, 0.448075, 0.841663, 0.0773428, 0.656104, 0.418686, 0.965422, 0.860395, 0.357879, 0.249538, 0.295876, 0.069732, 0.97076},
{0.362767, 0.823437, 0.967589, 0.0920716, 0.584501, 0.390216, 0.922127, 0.945103, 0.478117, 0.249888, 0.282736, 0.842485, 0.161333, 0.309519, 0.124959, 0.487643, 0.678177, 0.751538, 0.280914, 0.0880806, 0.424916, 0.837918, 0.208531, 0.46799, 0.0059347, 0.27066, 0.742956, 0.926645, 0.429861, 0.288716, 0.85635, 0.770996, 0.189131, 0.703967, 0.398061, 0.414262, 0.807414, 0.337027, 0.99737, 0.237282, 0.398477, 0.544765, 0.678309, 0.648004, 0.661143, 0.206568, 0.289284, 0.0710493, 0.506189, 0.55641},
{0.242638, 0.250849, 0.545563, 0.581257, 0.0149306, 0.935057, 0.11913, 0.22189, 0.746602, 0.497731, 0.967339, 0.123017, 0.600179, 0.500222, 0.419071, 0.687192, 0.991761, 0.68651, 0.932735, 0.0333923, 0.21798, 0.497993, 0.551922, 0.0441382, 0.471022, 0.689823, 0.720243, 0.0704533, 0.999971, 0.435649, 0.10305, 0.980343, 0.937366, 0.600993, 0.0710403, 0.409582, 0.724813, 0.699139, 0.989776, 0.469999, 0.0877244, 0.447814, 0.150734, 0.64467, 0.826949, 0.205719, 0.0913821, 0.683345, 0.440147, 0.303968},
{0.509595, 0.207331, 0.918153, 0.766068, 0.583716, 0.805722, 0.298086, 0.498968, 0.491377, 0.55224, 0.59069, 0.0368132, 0.237798, 0.433773, 0.644969, 0.0468151, 0.152076, 0.590651, 0.488651, 0.544537, 0.457888, 0.610171, 0.263667, 0.812355, 0.97999, 0.796024, 0.500778, 0.380479, 0.799259, 0.654445, 0.964245, 0.446228, 0.5579, 0.984511, 0.068625, 0.460056, 0.461604, 0.564813, 0.185346, 0.264417, 0.0279444, 0.544702, 0.196494, 0.261486, 0.305558, 0.250558, 0.0919104, 0.0297511, 0.736597, 0.619165},
{0.688849, 0.159687, 0.896148, 0.996801, 0.223505, 0.712169, 0.428924, 0.745298, 0.0243117, 0.625432, 0.679763, 0.436188, 0.783389, 0.602448, 0.828054, 0.10098, 0.205826, 0.0464186, 0.689669, 0.704636, 0.587804, 0.135719, 0.322012, 0.46836, 0.770742, 0.440302, 0.120263, 0.59864, 0.951634, 0.835061, 0.996905, 0.375942, 0.90139, 0.15615, 0.920577, 0.30953, 0.666663, 0.107571, 0.960908, 0.746584, 0.591966, 0.53809, 0.0941261, 0.510294, 0.987582, 0.671274, 0.496488, 0.621032, 0.976094, 0.368173},
{0.318997, 0.234939, 0.229663, 0.437729, 0.558706, 0.262163, 0.610326, 0.369477, 0.31139, 0.481933, 0.827928, 0.223992, 0.528699, 0.618177, 0.683112, 0.755568, 0.557686, 0.912865, 0.35685, 0.772167, 0.0990397, 0.0331496, 0.579327, 0.975823, 0.0347777, 0.970577, 0.85921, 0.125677, 0.0844857, 0.460683, 0.977635, 0.64596, 0.675415, 0.364313, 0.768678, 0.956115, 0.377657, 0.328234, 0.847365, 0.873947, 0.459131, 0.960235, 0.665051, 0.337679, 0.495735, 0.6863, 0.883972, 0.908617, 0.568209, 0.610049},
{0.53838, 0.0264445, 0.22319, 0.855353, 0.712253, 0.405934, 0.730231, 0.506498, 0.396158, 0.184473, 0.559411, 0.338777, 0.451115, 0.990982, 0.772579, 0.149465, 0.803524, 0.318447, 0.512425, 0.93217, 0.597024, 0.705987, 0.518772, 0.742954, 0.600958, 0.542277, 0.758644, 0.636372, 0.589211, 0.424014, 0.718857, 0.422553, 0.136651, 0.829227, 0.978282, 0.433506, 0.900601, 0.992567, 0.0409124, 0.447891, 0.021187, 0.729311, 0.423442, 0.388129, 0.449232, 0.44859, 0.930587, 0.848572, 0.227463, 0.526529},
{0.259515, 0.206184, 0.261118, 0.0914472, 0.498826, 0.46278, 0.131974, 0.254582, 0.119388, 0.922326, 0.896237, 0.249098, 0.240404, 0.297013, 0.712994, 0.623633, 0.511311, 0.43223, 0.649457, 0.502826, 0.845398, 0.471925, 0.138883, 0.547357, 0.817699, 0.995531, 0.866839, 0.171316, 0.858379, 0.36748, 0.990868, 0.224216, 0.361361, 0.251043, 0.215136, 0.549584, 0.789871, 0.996918, 0.40008, 0.0536134, 0.252467, 0.410837, 0.296697, 0.861391, 0.581214, 0.761152, 0.819508, 0.0643767, 0.192412, 0.56707},
{0.239329, 0.893156, 0.0777823, 0.796031, 0.392149, 0.674152, 0.0357385, 0.294782, 0.69541, 0.214037, 0.221582, 0.160455, 0.946098, 0.50164, 0.568548, 0.607608, 0.380345, 0.545982, 0.848928, 0.886381, 0.0768959, 0.512184, 0.0409798, 0.28888, 0.282459, 0.775239, 0.401478, 0.895383, 0.30803, 0.0589596, 0.344877, 0.0235039, 0.870206, 0.502885, 0.0915423, 0.982688, 0.700275, 0.783561, 0.200341, 0.193047, 0.37893, 0.940389, 0.773572, 0.641, 0.0260909, 0.167583, 0.242742, 0.994744, 0.964483, 0.602458},
{0.806723, 0.644394, 0.546379, 0.475613, 0.192704, 0.81091, 0.225351, 0.831271, 0.130872, 0.300997, 0.772907, 0.675302, 0.056719, 0.245978, 0.831468, 0.19195, 0.981804, 0.518224, 0.290719, 0.740997, 0.114099, 0.971018, 0.822824, 0.923855, 0.246398, 0.639622, 0.936651, 0.116024, 0.909272, 0.00679698, 0.763387, 0.76027, 0.700781, 0.911315, 0.286427, 0.437892, 0.685665, 0.0476024, 0.843328, 0.0196781, 0.241352, 0.528965, 0.894563, 0.302164, 0.950533, 0.732239, 0.637749, 0.773444, 0.356731, 0.645681},
};

static const std::vector<float> costs = {117.68, 773.325, 120.842, 361.499, 582.113, 955.723, 515.012, 726.075, 27.8151, 769.268, 469.42, 135.135, 975.78, 135.562, 257.818, 658.538, 198.219, 485.274, 904.2, 526.327, 857.535, 712.962, 623.83, 381.426, 510.943, 344.489, 184.811, 436.622, 699.084, 965.07, 49.2277, 201.215, 677.803, 536.49, 608.334, 408.617, 128.412, 5.98626, 279.537, 937.33, 239.654, 479.533, 133.727, 834.724, 704.123, 232.573, 224.582, 73.0615, 841.116, 80.0512};

static const std::vector<float> min_impressions = {0.665657, 0.995647, 0.0766331, 0.962348, 0.50668, 0.4859, 0.31257, 0.293666, 0.864812, 0.0777798};

//
#endif
