#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 5;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_indep(cons_incl(cons_excl(cons_indep(cons_indep(events[3], events[23]),events[19]),events[47]),events[27]),events[11]),cons_incl(cons_indep(cons_incl(cons_excl(cons_indep(events[38], events[26]),events[22]),events[0]),events[45]),events[11]),cons_indep(cons_incl(cons_indep(cons_incl(cons_incl(events[22], events[13]),events[31]),events[9]),events[40]),events[34]),cons_excl(cons_excl(cons_excl(cons_indep(cons_incl(events[10], events[19]),events[30]),events[14]),events[40]),events[0]),cons_incl(cons_excl(cons_indep(cons_indep(cons_excl(events[9], events[17]),events[6]),events[1]),events[37]),events[29])};


static const std::vector< std::vector<float> > prob = {{0.391722, 0.499417, 0.103736, 0.318444, 0.337746, 0.335511, 0.697783, 0.635138, 0.402685, 0.313358, 0.368665, 0.229811, 0.167506, 0.911768, 0.477126, 0.689804, 0.687281, 0.044489, 0.596184, 0.623226, 0.237798, 0.886611, 0.138187, 0.457518, 0.846788, 0.850018, 0.955765, 0.178254, 0.996427, 0.290344, 0.761844, 0.719048, 0.0459481, 0.250498, 0.641957, 0.270091, 0.0351362, 0.602135, 0.528784, 0.111774, 0.550311, 0.0276262, 0.788935, 0.889992, 0.834408, 0.276461, 0.985859, 0.203413, 0.639036, 0.233623},
{0.418183, 0.585566, 0.311332, 0.755271, 0.832079, 0.494807, 0.829776, 0.177745, 0.528655, 0.102124, 0.624028, 0.981913, 0.913328, 0.052578, 0.620436, 0.307624, 0.0471101, 0.632563, 0.90203, 0.19366, 0.0918022, 0.510905, 0.168607, 0.139451, 0.553103, 0.943005, 0.931232, 0.864443, 0.923835, 0.888484, 0.78799, 0.935252, 0.0640275, 0.834366, 0.0566823, 0.38037, 0.975056, 0.243193, 0.423867, 0.354461, 0.482311, 0.776583, 0.0938096, 0.0963027, 0.793179, 0.323411, 0.580293, 0.275932, 0.205319, 0.0734033},
{0.0877546, 0.169007, 0.695068, 0.732991, 0.955829, 0.126046, 0.952018, 0.062959, 0.404632, 0.571119, 0.773722, 0.825441, 0.283009, 0.597435, 0.48057, 0.00256128, 0.631335, 0.827002, 0.632472, 0.0595764, 0.742848, 0.264092, 0.855039, 0.443888, 0.35883, 0.192249, 0.838522, 0.648357, 0.623112, 0.368096, 0.538514, 0.352552, 0.509053, 0.787915, 0.585499, 0.105578, 0.362487, 0.893904, 0.725198, 0.62575, 0.420364, 0.293261, 0.018276, 0.177779, 0.828603, 0.622074, 0.664146, 0.223072, 0.569093, 0.495568},
{0.231393, 0.998804, 0.128261, 0.615829, 0.996201, 0.913115, 0.299923, 0.372655, 0.513292, 0.655681, 0.606891, 0.170931, 0.108154, 0.016029, 0.0262352, 0.0569855, 0.462702, 0.657086, 0.453734, 0.650337, 0.962665, 0.74807, 0.2114, 0.776688, 0.76061, 0.590801, 0.416898, 0.297995, 0.982242, 0.0895067, 0.803759, 0.247497, 0.0531606, 0.244754, 0.687886, 0.837844, 0.76637, 0.00246868, 0.400821, 0.161342, 0.273317, 0.0144214, 0.560418, 0.67098, 0.562192, 0.484831, 0.0899379, 0.776563, 0.188423, 0.778612},
{0.374414, 0.250759, 0.168233, 0.984295, 0.350329, 0.602329, 0.873663, 0.575846, 0.332305, 0.661104, 0.460403, 0.0966735, 0.53845, 0.905731, 0.86463, 0.308726, 0.319492, 0.224334, 0.702337, 0.290352, 0.0417044, 0.728422, 0.504844, 0.842675, 0.871578, 0.277882, 0.582485, 0.799545, 0.215933, 0.56593, 0.963423, 0.922275, 0.409805, 0.720394, 0.495792, 0.462456, 0.214108, 0.10323, 0.466248, 0.858634, 0.891231, 0.380777, 0.636893, 0.486483, 0.786347, 0.375007, 0.224414, 0.390702, 0.968086, 0.966957},
};

static const std::vector<float> costs = {749.099, 201.573, 326.631, 868.357, 356.057, 287.687, 61.8786, 560.324, 522.883, 506.485, 561.75, 172.703, 927.541, 218.141, 825.071, 188.989, 298.123, 803.711, 748.688, 114.521, 831.276, 336.141, 122.832, 419.775, 63.36, 583.623, 995.345, 636.299, 648.362, 178.278, 651.387, 731.255, 43.0207, 571.172, 781.771, 404.322, 616.43, 325.989, 184.118, 321.128, 992.418, 277.981, 316.16, 293.27, 133.095, 904.932, 736.554, 779.343, 910.946, 821.094};

static const std::vector<float> min_impressions = {0.1061, 0.620886, 0.116257, 0.165956, 0.0767424};

//
#endif
