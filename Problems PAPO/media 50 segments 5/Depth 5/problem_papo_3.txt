#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 5;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_indep(cons_indep(cons_indep(cons_indep(cons_indep(events[22], events[9]),events[39]),events[37]),events[26]),events[8]),cons_incl(cons_indep(cons_excl(cons_incl(cons_excl(events[27], events[48]),events[16]),events[32]),events[8]),events[7]),cons_excl(cons_indep(cons_indep(cons_indep(cons_excl(events[26], events[11]),events[37]),events[23]),events[19]),events[8]),cons_indep(cons_incl(cons_excl(cons_incl(cons_indep(events[27], events[43]),events[45]),events[20]),events[11]),events[6]),cons_indep(cons_indep(cons_excl(cons_indep(cons_incl(events[5], events[31]),events[22]),events[14]),events[36]),events[28])};


static const std::vector< std::vector<float> > prob = {{0.345507, 0.464478, 0.0689115, 0.165885, 0.168709, 0.647472, 0.36912, 0.385376, 0.521517, 0.522651, 0.0523794, 0.546106, 0.203965, 0.637091, 0.81331, 0.765511, 0.792543, 0.183963, 0.970912, 0.273137, 0.258459, 0.893873, 0.511444, 0.915686, 0.12943, 0.0589705, 0.400806, 0.144371, 0.36539, 0.0979797, 0.265562, 0.180971, 0.0816824, 0.777231, 0.766747, 0.776988, 0.85579, 0.854686, 0.67231, 0.0597681, 0.0498727, 0.732971, 0.0348303, 0.596248, 0.145233, 0.517414, 0.595154, 0.114929, 0.651635, 0.786059},
{0.447284, 0.157584, 0.943325, 0.714733, 0.789707, 0.503695, 0.343589, 0.890615, 0.17419, 0.561587, 0.106933, 0.579054, 0.956497, 0.479134, 0.599073, 0.718224, 0.247669, 0.897689, 0.990219, 0.00884344, 0.997496, 0.973162, 0.984248, 0.929698, 0.533028, 0.560737, 0.404039, 0.113619, 0.498868, 0.219209, 0.770718, 0.64199, 0.605614, 0.0841537, 0.518578, 0.830532, 0.629042, 0.101544, 0.344317, 0.413282, 0.686253, 0.0195564, 0.25281, 0.384683, 0.397404, 0.647525, 0.263742, 0.223775, 0.677727, 0.771576},
{0.87033, 0.8951, 0.0520777, 0.344126, 0.765893, 0.326763, 0.583076, 0.446796, 0.0958228, 0.535294, 0.150783, 0.212166, 0.704457, 0.45479, 0.822634, 0.636021, 0.247574, 0.906518, 0.00150397, 0.7835, 0.986134, 0.348821, 0.723296, 0.00482588, 0.67261, 0.671056, 0.574548, 0.545027, 0.325151, 0.0884447, 0.383278, 0.709553, 0.985949, 0.805324, 0.133079, 0.21956, 0.631132, 0.933544, 0.0579957, 0.588036, 0.862179, 0.0788933, 0.363303, 0.0771103, 0.168391, 0.490838, 0.63313, 0.63252, 0.10557, 0.0147133},
{0.156664, 0.0773948, 0.674654, 0.565658, 0.600609, 0.432107, 0.928357, 0.652833, 0.903156, 0.630752, 0.684432, 0.237269, 0.794032, 0.930079, 0.768672, 0.628999, 0.401924, 0.633312, 0.741082, 0.271479, 0.0460486, 0.545906, 0.977195, 0.560007, 0.75213, 0.178315, 0.342363, 0.0665458, 0.870505, 0.620208, 0.395228, 0.382863, 0.980257, 0.632026, 0.690488, 0.274111, 0.916782, 0.0021356, 0.872585, 0.482566, 0.897689, 0.282343, 0.379597, 0.864126, 0.440577, 0.942142, 0.0843096, 0.821142, 0.217064, 0.224801},
{0.853799, 0.0947768, 0.436768, 0.952004, 0.959323, 0.983514, 0.703918, 0.392542, 0.734957, 0.329154, 0.213083, 0.266921, 0.329596, 0.0511598, 0.513827, 0.140624, 0.938504, 0.633174, 0.0446986, 0.470873, 0.178227, 0.705417, 0.234814, 0.762803, 0.908371, 0.224211, 0.660565, 0.925539, 0.952919, 0.449649, 0.389204, 0.0294845, 0.446039, 0.352854, 0.639673, 0.522647, 0.494049, 0.423848, 0.980229, 0.328442, 0.157012, 0.83159, 0.32397, 0.585225, 0.6889, 0.166936, 0.721667, 0.746133, 0.861447, 0.643716},
};

static const std::vector<float> costs = {560.273, 315.401, 964.168, 945.384, 994.641, 434.341, 903.166, 776.346, 904.056, 820.789, 24.0758, 383.049, 499.553, 446.842, 988.029, 762.144, 195.375, 957.932, 764.682, 866.837, 99.9639, 89.2685, 201.317, 97.6738, 306.739, 522.719, 990.002, 271.487, 634.118, 756.468, 999.234, 308.324, 12.5099, 75.5428, 999.114, 63.8933, 42.9979, 158.345, 932.917, 54.9864, 327.174, 274.241, 804.829, 954.261, 912.617, 386.157, 477.979, 317.866, 264.205, 969.411};

static const std::vector<float> min_impressions = {0.551299, 0.744435, 0.365892, 0.689135, 0.211297};

//
#endif
