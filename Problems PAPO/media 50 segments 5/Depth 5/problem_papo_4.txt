#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 5;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_excl(cons_indep(cons_indep(cons_indep(cons_indep(events[3], events[2]),events[18]),events[1]),events[7]),events[30]),cons_incl(cons_excl(cons_excl(cons_indep(cons_indep(events[30], events[41]),events[48]),events[33]),events[42]),events[10]),cons_excl(cons_incl(cons_indep(cons_incl(cons_excl(events[4], events[48]),events[19]),events[33]),events[32]),events[41]),cons_excl(cons_incl(cons_indep(cons_indep(cons_indep(events[2], events[11]),events[38]),events[30]),events[18]),events[43]),cons_excl(cons_excl(cons_excl(cons_indep(cons_incl(events[2], events[7]),events[25]),events[22]),events[8]),events[42])};


static const std::vector< std::vector<float> > prob = {{0.693715, 0.789484, 0.641667, 0.149999, 0.869531, 0.840074, 0.750399, 0.181268, 0.660982, 0.853382, 0.305254, 0.0886893, 0.596159, 0.121015, 0.498096, 0.263374, 0.324019, 0.373279, 0.835971, 0.318417, 0.284099, 0.186736, 0.202628, 0.971713, 0.897091, 0.0763044, 0.346893, 0.696013, 0.0339529, 0.783219, 0.871074, 0.42296, 0.832277, 0.942392, 0.287762, 0.18896, 0.391735, 0.133951, 0.618135, 0.309278, 0.4302, 0.464191, 0.0358025, 0.554434, 0.245321, 0.383864, 0.0394818, 0.818694, 0.32818, 0.43056},
{0.605138, 0.720648, 0.869372, 0.456275, 0.360815, 0.0660703, 0.0288403, 0.196735, 0.0193313, 0.254319, 0.922755, 0.70206, 0.933811, 0.26593, 0.435205, 0.149473, 0.852738, 0.0454303, 0.359255, 0.651694, 0.321066, 0.307504, 0.941033, 0.369395, 0.153521, 0.649903, 0.408229, 0.318822, 0.25064, 0.765097, 0.015149, 0.461665, 0.469412, 0.24295, 0.743134, 0.220386, 0.335223, 0.766456, 0.842717, 0.559032, 0.0817638, 0.959362, 0.780968, 0.20709, 0.694991, 0.382699, 0.87455, 0.141592, 0.919094, 0.413947},
{0.529074, 0.170477, 0.873228, 0.288626, 0.790794, 0.185699, 0.546206, 0.694925, 0.0984758, 0.393851, 0.531236, 0.046736, 0.2705, 0.510958, 0.58672, 0.0786021, 0.539862, 0.547175, 0.779244, 0.0152, 0.179059, 0.118514, 0.0352144, 0.481139, 0.266509, 0.64534, 0.34221, 0.885388, 0.398985, 0.222436, 0.205084, 0.591278, 0.496036, 0.659182, 0.28391, 0.246868, 0.0725874, 0.582945, 0.874763, 0.284137, 0.777622, 0.857642, 0.682576, 0.479036, 0.151128, 0.247871, 0.19734, 0.059159, 0.377889, 0.954026},
{0.202974, 0.562963, 0.721642, 0.130968, 0.483553, 0.644966, 0.058604, 0.241938, 0.118023, 0.117175, 0.558877, 0.351127, 0.989746, 0.616546, 0.666779, 0.996329, 0.171462, 0.318142, 0.22734, 0.222313, 0.997905, 0.468317, 0.903635, 0.776612, 0.698037, 0.298014, 0.0353346, 0.425514, 0.535885, 0.851165, 0.463474, 0.458239, 0.278311, 0.252465, 0.267133, 0.308789, 0.249698, 0.873974, 0.211221, 0.59367, 0.616802, 0.908184, 0.0244232, 0.631345, 0.570878, 0.010911, 0.093234, 0.866109, 0.735497, 0.616048},
{0.556181, 0.769663, 0.422779, 0.897165, 0.234832, 0.430204, 0.349287, 0.726282, 0.464732, 0.479564, 0.282881, 0.882969, 0.045725, 0.464933, 0.719338, 0.55541, 0.43103, 0.152561, 0.0985877, 0.402473, 0.483253, 0.0403846, 0.822072, 0.470714, 0.325537, 0.153661, 0.114053, 0.286139, 0.789962, 0.56051, 0.0495396, 0.243945, 0.519007, 0.257341, 0.491013, 0.661824, 0.954191, 0.115203, 0.804958, 0.0421352, 0.822283, 0.306325, 0.587352, 0.497391, 0.318394, 0.741659, 0.652473, 0.0665167, 0.133865, 0.0580161},
};

static const std::vector<float> costs = {406.854, 826.022, 957.071, 347.296, 365.806, 345.431, 940.118, 17.2002, 113.051, 747.932, 139.075, 726.866, 967.772, 804.864, 470.13, 185.906, 858.176, 2.94071, 975.531, 135.066, 322.07, 259.134, 878.043, 388.512, 32.9792, 107.269, 1.8495, 919.015, 289.122, 642.566, 225.25, 906.412, 537.446, 128.574, 265.377, 805.002, 787.108, 904.174, 726.427, 238.528, 716.262, 495.203, 859.549, 113.68, 380.221, 325.059, 964.234, 64.0532, 469.537, 21.8594};

static const std::vector<float> min_impressions = {0.438965, 0.615539, 0.518972, 0.220227, 0.288376};

//
#endif
