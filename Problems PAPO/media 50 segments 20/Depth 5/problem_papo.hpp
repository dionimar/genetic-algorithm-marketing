#ifndef PROBLEM_H
#define PROBLEM_H
#include "syntax_tree.hpp"
#include <iostream>

#define PAPO

static const int media = 50;
static const int segments = 20;

static const std::vector<Syntax_Tree> events = {
    cons_event(0),  cons_event(1),  cons_event(2),  cons_event(3),
    cons_event(4),  cons_event(5),  cons_event(6),  cons_event(7),
    cons_event(8),  cons_event(9),  cons_event(10), cons_event(11),
    cons_event(12), cons_event(13), cons_event(14), cons_event(15),
    cons_event(16), cons_event(17), cons_event(18), cons_event(19),
    cons_event(20), cons_event(21), cons_event(22), cons_event(23),
    cons_event(24), cons_event(25), cons_event(26), cons_event(27),
    cons_event(28), cons_event(29), cons_event(30), cons_event(31),
    cons_event(32), cons_event(33), cons_event(34), cons_event(35),
    cons_event(36), cons_event(37), cons_event(38), cons_event(39),
    cons_event(40), cons_event(41), cons_event(42), cons_event(43),
    cons_event(44), cons_event(45), cons_event(46), cons_event(47),
    cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {
    cons_indep(cons_incl(cons_indep(cons_excl(cons_incl(events[16], events[33]),
                                              events[3]),
                                    events[43]),
                         events[1]),
               events[38]),
    cons_excl(cons_excl(cons_incl(cons_excl(cons_indep(events[16], events[20]),
                                            events[21]),
                                  events[8]),
                        events[29]),
              events[28]),
    cons_excl(cons_excl(cons_incl(cons_excl(cons_indep(events[29], events[12]),
                                            events[47]),
                                  events[48]),
                        events[44]),
              events[16]),
    cons_indep(cons_excl(cons_incl(cons_indep(cons_indep(events[5], events[45]),
                                              events[6]),
                                   events[33]),
                         events[12]),
               events[49]),
    cons_incl(cons_incl(cons_excl(cons_excl(cons_indep(events[25], events[14]),
                                            events[18]),
                                  events[31]),
                        events[20]),
              events[49]),
    cons_excl(cons_incl(cons_excl(cons_excl(cons_indep(events[5], events[17]),
                                            events[25]),
                                  events[24]),
                        events[34]),
              events[21]),
    cons_excl(
        cons_indep(
            cons_incl(cons_indep(cons_indep(events[22], events[44]), events[5]),
                      events[27]),
            events[39]),
        events[25]),
    cons_indep(
        cons_excl(cons_indep(
                      cons_indep(cons_incl(events[47], events[11]), events[41]),
                      events[9]),
                  events[44]),
        events[40]),
    cons_incl(cons_indep(cons_excl(cons_incl(cons_excl(events[15], events[49]),
                                             events[36]),
                                   events[32]),
                         events[10]),
              events[29]),
    cons_incl(cons_incl(cons_excl(cons_incl(cons_excl(events[10], events[47]),
                                            events[25]),
                                  events[28]),
                        events[24]),
              events[23]),
    cons_incl(cons_incl(cons_excl(cons_indep(cons_incl(events[48], events[49]),
                                             events[11]),
                                  events[21]),
                        events[16]),
              events[15]),
    cons_excl(cons_excl(cons_indep(cons_incl(cons_incl(events[42], events[26]),
                                             events[13]),
                                   events[17]),
                        events[27]),
              events[11]),
    cons_indep(
        cons_indep(
            cons_excl(cons_excl(cons_indep(events[44], events[43]), events[9]),
                      events[10]),
            events[22]),
        events[11]),
    cons_excl(cons_indep(cons_excl(cons_excl(cons_incl(events[38], events[3]),
                                             events[32]),
                                   events[35]),
                         events[48]),
              events[8]),
    cons_excl(cons_excl(cons_excl(cons_indep(cons_indep(events[30], events[2]),
                                             events[21]),
                                  events[40]),
                        events[13]),
              events[39]),
    cons_incl(
        cons_indep(cons_indep(cons_indep(cons_indep(events[35], events[29]),
                                         events[8]),
                              events[10]),
                   events[42]),
        events[43]),
    cons_indep(
        cons_indep(
            cons_indep(cons_indep(cons_excl(events[45], events[5]), events[11]),
                       events[47]),
            events[31]),
        events[41]),
    cons_incl(cons_incl(cons_excl(cons_excl(cons_indep(events[7], events[30]),
                                            events[37]),
                                  events[17]),
                        events[25]),
              events[11]),
    cons_incl(cons_incl(cons_indep(cons_incl(cons_incl(events[48], events[42]),
                                             events[9]),
                                   events[15]),
                        events[12]),
              events[35]),
    cons_excl(cons_indep(cons_indep(cons_excl(cons_excl(events[3], events[43]),
                                              events[26]),
                                    events[28]),
                         events[32]),
              events[0])};

static const std::vector<std::vector<float>> prob = {
    {0.0639782, 0.754648, 0.5482,   0.120036,  0.591418, 0.164029,  0.462142,
     0.909247,  0.493725, 0.152363, 0.460996,  0.954158, 0.0115285, 0.6251,
     0.725353,  0.949422, 0.149962, 0.446557,  0.967661, 0.290191,  0.653525,
     0.697895,  0.268253, 0.810987, 0.827593,  0.816464, 0.666923,  0.217569,
     0.577271,  0.116483, 0.612636, 0.446344,  0.659774, 0.969372,  0.365533,
     0.578536,  0.634154, 0.267141, 0.613271,  0.39017,  0.909162,  0.222062,
     0.597217,  0.526883, 0.812506, 0.0910303, 0.3961,   0.272595,  0.473673,
     0.426854},
    {0.383822, 0.784662,  0.153509, 0.00389234, 0.559608,  0.281189,  0.758697,
     0.919567, 0.584331,  0.533584, 0.181814,   0.333434,  0.920464,  0.78823,
     0.958807, 0.0466083, 0.530851, 0.719058,   0.279722,  0.0254283, 0.447194,
     0.628489, 0.809751,  0.170512, 0.0938226,  0.503878,  0.208148,  0.915438,
     0.280469, 0.179421,  0.691035, 0.388922,   0.0946284, 0.218971,  0.0456531,
     0.447826, 0.724802,  0.736202, 0.311531,   0.809127,  0.987578,  0.936976,
     0.135697, 0.482363,  0.156181, 0.468505,   0.619772,  0.0412353, 0.265732,
     0.81592},
    {0.65165,  0.731922, 0.334031, 0.988601, 0.551292, 0.647819, 0.303705,
     0.995284, 0.271522, 0.772354, 0.905999, 0.526795, 0.634284, 0.955164,
     0.434566, 0.396417, 0.440316, 0.706052, 0.36733,  0.119065, 0.504506,
     0.268391, 0.823565, 0.60435,  0.925472, 0.527925, 0.384117, 0.980038,
     0.494206, 0.913638, 0.154886, 0.384178, 0.406045, 0.563588, 6.14068e05,
     0.993689, 0.734952, 0.432928, 0.965293, 0.863359, 0.255264, 0.638954,
     0.591387, 0.804429, 0.387171, 0.396263, 0.578243, 0.610261, 0.503074,
     0.0276518},
    {0.81779,  0.0803487, 0.508751, 0.969114,   0.17643,  0.457155, 0.716391,
     0.922911, 0.714311,  0.74018,  0.00734954, 0.640704, 0.916549, 0.567469,
     0.668856, 0.618947,  0.32886,  0.236893,   0.107978, 0.514583, 0.812717,
     0.592553, 0.124153,  0.318876, 0.281496,   0.109134, 0.813692, 0.200177,
     0.870445, 0.0399732, 0.855621, 0.49929,    0.831453, 0.179147, 0.334408,
     0.337826, 0.471371,  0.512707, 0.215675,   0.666415, 0.11987,  0.417076,
     0.511177, 0.261231,  0.222039, 0.804384,   0.844389, 0.336068, 0.398051,
     0.998983},
    {0.624114, 0.322473,  0.0313289, 0.976331,  0.736776, 0.926816,  0.505013,
     0.32837,  0.722114,  0.109053,  0.0334228, 0.475198, 0.398965,  0.628306,
     0.306007, 0.0796071, 0.466402,  0.369703,  0.858233, 0.0793256, 0.906876,
     0.30094,  0.9743,    0.887376,  0.617687,  0.772371, 0.394125,  0.502391,
     0.496714, 0.523541,  0.563352,  0.553699,  0.455095, 0.684597,  0.913432,
     0.310232, 0.187337,  0.319698,  0.347439,  0.319003, 0.0942593, 0.712354,
     0.99811,  0.57225,   0.209294,  0.383298,  0.225284, 0.268452,  0.850125,
     0.863684},
    {0.0676835, 0.0349853, 0.265931, 0.763664,  0.454353, 0.278789,  0.819366,
     0.333765,  0.731356,  0.587963, 0.126689,  0.64155,  0.713136,  0.850127,
     0.69884,   0.4855,    0.197714, 0.834585,  0.910969, 0.76123,   0.439551,
     0.410108,  0.995768,  0.231359, 0.0143157, 0.275993, 0.322586,  0.518438,
     0.0497949, 0.158547,  0.337712, 0.979198,  0.238769, 0.0363431, 0.353741,
     0.350845,  0.0740848, 0.446601, 0.0995352, 0.545436, 0.0793613, 0.334772,
     0.190503,  0.792784,  0.29591,  0.914436,  0.876077, 0.241022,  0.0646561,
     0.199562},
    {0.720997,  0.387306,  0.587584,  0.410754, 0.611434, 0.193564, 0.98887,
     0.599569,  0.0652242, 0.78728,   0.659994, 0.298477, 0.398773, 0.766872,
     0.506353,  0.0474841, 0.0359122, 0.647898, 0.74922,  0.982055, 0.919137,
     0.0132871, 0.707484,  0.866239,  0.12765,  0.31505,  0.181376, 0.20299,
     0.982942,  0.184265,  0.750943,  0.352749, 0.581868, 0.915477, 0.316152,
     0.516888,  0.883451,  0.234709,  0.947164, 0.546501, 0.73444,  0.198422,
     0.244781,  0.65221,   0.778716,  0.132446, 0.878017, 0.455102, 0.0453198,
     0.112319},
    {0.764286,  0.987185, 0.223602, 0.523246, 0.0745744,  0.362091, 0.295087,
     0.673027,  0.84517,  0.336281, 0.626838, 0.983609,   0.793941, 0.552474,
     0.670117,  0.239887, 0.915334, 0.289982, 0.528413,   0.684784, 0.787353,
     0.758849,  0.378929, 0.774181, 0.761504, 0.00886257, 0.647441, 0.731282,
     0.444935,  0.654596, 0.892151, 0.622628, 0.872892,   0.949723, 0.264022,
     0.558651,  0.149307, 0.891332, 0.358436, 0.509728,   0.682313, 0.694897,
     0.0956338, 0.242923, 0.735763, 0.208788, 0.694865,   0.432348, 0.971453,
     0.244605},
    {0.0630282, 0.319993, 0.265655,  0.22326,  0.425139,  0.154265, 0.58996,
     0.194136,  0.996797, 0.661107,  0.249807, 0.807881,  0.602451, 0.27723,
     0.0163499, 0.132099, 0.941286,  0.312911, 0.414166,  0.71946,  0.67086,
     0.25667,   0.829249, 0.75776,   0.245297, 0.124101,  0.70958,  0.712866,
     0.240634,  0.830825, 0.796016,  0.569382, 0.0559723, 0.166748, 0.881034,
     0.688178,  0.806748, 0.0748338, 0.355469, 0.492535,  0.384575, 0.956276,
     0.954462,  0.976214, 0.0764233, 0.160005, 0.390166,  0.849031, 0.325124,
     0.99433},
    {0.328179, 0.701099, 0.564277, 0.254018,  0.479728, 0.604047,   0.525052,
     0.515478, 0.949949, 0.460834, 0.0254376, 0.97513,  0.36629,    0.583334,
     0.682315, 0.628575, 0.865157, 0.530349,  0.993927, 0.429993,   0.902705,
     0.717818, 0.977951, 0.685891, 0.205049,  0.78384,  0.762139,   0.320943,
     0.764702, 0.444496, 0.551655, 0.971868,  0.106915, 0.251018,   0.186333,
     0.176191, 0.871956, 0.908766, 0.150397,  0.709409, 0.00166326, 0.698348,
     0.514043, 0.421688, 0.580342, 0.913683,  0.138603, 0.353168,   0.581577,
     0.460485},
    {0.341414,  0.145221,  0.610848, 0.639544,   0.219132,   0.283749, 0.110753,
     0.983388,  0.503745,  0.321683, 0.825243,   0.98215,    0.614833, 0.435046,
     0.819474,  0.508679,  0.515791, 0.60397,    0.00484476, 0.353388, 0.670876,
     0.0722613, 0.357965,  0.232216, 0.00778862, 0.584669,   0.800238, 0.215712,
     0.618107,  0.929046,  0.771653, 0.166978,   0.0137378,  0.940169, 0.464005,
     0.99418,   0.658592,  0.157353, 0.0883694,  0.319904,   0.803164, 0.372599,
     0.343784,  0.0877578, 0.136789, 0.469658,   0.271787,   0.104486, 0.07543,
     0.216447},
    {0.378865,  0.583854, 0.558589, 0.6507,   0.794615, 0.170301, 0.792141,
     0.354338,  0.574312, 0.122919, 0.316652, 0.605518, 0.24863,  0.367268,
     0.696626,  0.803262, 0.828596, 0.466882, 0.121814, 0.458398, 0.798956,
     0.329679,  0.919368, 0.407602, 0.015562, 0.579276, 0.187716, 0.31447,
     0.969594,  0.785507, 0.461353, 0.213633, 0.162616, 0.6731,   0.986536,
     0.450655,  0.931714, 0.706403, 0.369411, 0.414425, 0.192351, 0.546407,
     0.0391794, 0.298154, 0.85009,  0.969189, 0.165622, 0.318651, 0.290152,
     0.648064},
    {0.819583,  0.142803, 0.328449,   0.299392,   0.277469, 0.531698,
     0.662162,  0.504047, 0.227556,   0.6333,     0.373145, 0.603695,
     0.36345,   0.790319, 0.00607234, 0.789424,   0.790357, 0.241022,
     0.345618,  0.355624, 0.793129,   0.806474,   0.126767, 0.298609,
     0.299842,  0.687002, 0.56406,    0.00794685, 0.346244, 0.469865,
     0.0727775, 0.859096, 0.861801,   0.369302,   0.348093, 0.42244,
     0.557231,  0.682736, 0.0141019,  0.244708,   0.336101, 0.795446,
     0.220795,  0.143119, 0.653973,   0.823997,   0.453999, 0.0289243,
     0.85117,   0.0864235},
    {0.204266,  0.464802, 0.849293,  0.496437, 0.640263, 0.977207,  0.926545,
     0.558106,  0.188081, 0.062891,  0.714238, 0.370408, 0.0498976, 0.941527,
     0.0129634, 0.253182, 0.106863,  0.640025, 0.402071, 0.86753,   0.0921885,
     0.891818,  0.245252, 0.144943,  0.945987, 0.659666, 0.699538,  0.248308,
     0.559258,  0.339694, 0.0397782, 0.186601, 0.361421, 0.581446,  0.39874,
     0.478586,  0.183348, 0.949527,  0.427887, 0.198209, 0.739193,  0.0539316,
     0.0507538, 0.92189,  0.433753,  0.847938, 0.712313, 0.870663,  0.166424,
     0.4807},
    {0.636707,  0.179778, 0.136725, 0.353413,  0.558319, 0.371025,  0.490466,
     0.44975,   0.102036, 0.97076,  0.906772,  0.291959, 0.944443,  0.902122,
     0.5999,    0.685662, 0.581063, 0.0862885, 0.492798, 0.619317,  0.879121,
     0.178271,  0.482591, 0.721007, 0.821877,  0.57054,  0.554712,  0.396697,
     0.0944692, 0.254742, 0.698887, 0.562346,  0.576569, 0.0397637, 0.944863,
     0.812694,  0.966488, 0.251425, 0.463919,  0.621889, 0.283399,  0.669759,
     0.0756713, 0.350455, 0.837076, 0.3727,    0.553038, 0.931755,  0.456539,
     0.593012},
    {0.758648,  0.75887,   0.836702,  0.775857, 0.289524, 0.544925,  0.293222,
     0.772157,  0.730044,  0.548368,  0.28957,  0.678225, 0.0179172, 0.777958,
     0.124796,  0.866302,  0.396554,  0.107665, 0.659622, 0.813282,  0.382287,
     0.581065,  0.108696,  0.0563923, 0.221599, 0.180457, 0.390384,  0.920659,
     0.629005,  0.0105679, 0.709095,  0.179056, 0.537169, 0.330511,  0.705355,
     0.0523612, 0.885853,  0.805132,  0.112429, 0.339159, 0.868583,  0.641889,
     0.760608,  0.71523,   0.831281,  0.54008,  0.972386, 0.400318,  0.0482496,
     0.73629},
    {0.13114,   0.369341, 0.132362,  0.209999, 0.360014,  0.814679, 0.229207,
     0.0426617, 0.631331, 0.675224,  0.707523, 0.0753743, 0.664501, 0.381722,
     0.589477,  0.748827, 0.0734726, 0.542888, 0.760186,  0.474305, 0.794908,
     0.667017,  0.112945, 0.887054,  0.863882, 0.0343346, 0.736526, 0.171243,
     0.726079,  0.801406, 0.83777,   0.929341, 0.427026,  0.640518, 0.1202,
     0.347998,  0.54332,  0.281245,  0.089799, 0.64122,   0.364056, 0.921223,
     0.715573,  0.374102, 0.737738,  0.508257, 0.456237,  0.317856, 0.209566,
     0.0245259},
    {0.629905, 0.0685084, 0.730427,   0.17675,  0.243078,  0.579705, 0.976934,
     0.295489, 0.429921,  0.0348737,  0.734513, 0.811009,  0.860999, 0.00918236,
     0.543788, 0.347038,  0.419038,   0.131247, 0.0753328, 0.842796, 0.711969,
     0.346642, 0.873649,  0.00905606, 0.35475,  0.0621863, 0.424333, 0.629786,
     0.808305, 0.286707,  0.520146,   0.870674, 0.920095,  0.420041, 0.740992,
     0.75339,  0.396953,  0.471148,   0.173888, 0.0914012, 0.368992, 0.741034,
     0.851288, 0.989894,  0.437389,   0.797511, 0.867766,  0.929235, 0.389213,
     0.534832},
    {0.923535, 0.494031,  0.553269,  0.0130899, 0.620773,  0.413564, 0.579844,
     0.961844, 0.647427,  0.880771,  0.277561,  0.240242,  0.48691,  0.709763,
     0.541127, 0.698292,  0.336802,  0.233232,  0.500607,  0.28071,  0.590959,
     0.159781, 0.0681712, 0.0153407, 0.642716,  0.577841,  0.11811,  0.664249,
     0.476326, 0.546915,  0.654422,  0.228199,  0.250992,  0.982857, 0.965382,
     0.961898, 0.865408,  0.565696,  0.538023,  0.065652,  0.581175, 0.633708,
     0.816531, 0.811263,  0.204356,  0.0944828, 0.0854427, 0.444711, 0.24526,
     0.367568},
    {0.0805028, 0.509072, 0.433773, 0.766464,  0.437532, 0.851202, 0.406566,
     0.964872,  0.272704, 0.4105,   0.871866,  0.284761, 0.683573, 0.189871,
     0.887336,  0.309685, 0.15773,  0.261641,  0.567816, 0.669909, 0.530692,
     0.166336,  0.281021, 0.616602, 0.344571,  0.177507, 0.209072, 0.401798,
     0.743476,  0.542022, 0.988151, 0.0802237, 0.408816, 0.464289, 0.149396,
     0.273764,  0.906863, 0.431563, 0.404463,  0.341807, 0.883952, 0.856743,
     0.326211,  0.894243, 0.732589, 0.318683,  0.331946, 0.114356, 0.670179,
     0.624234},
};

static const std::vector<float> costs = {
    710.084, 469.787, 246.739, 912.442, 70.1743, 820.568, 259.834, 672.192,
    800.809, 997.822, 543.56,  619.219, 355.068, 897.882, 218.875, 957.857,
    651.14,  262.824, 136.79,  122.977, 376.141, 616.948, 449.836, 353.918,
    360.206, 52.0771, 580.368, 657.342, 179.311, 929.997, 446.898, 835.626,
    461.926, 3.91446, 25.5141, 606.829, 928.174, 720.962, 335.724, 95.9349,
    714.118, 111.6,   967.492, 759.197, 747.362, 802.914, 619.017, 886.294,
    600.573, 499.86};

static const std::vector<float> min_impressions = {
    0.544294,  0.183297, 0.0769537, 0.0307486, 0.586615, 0.259735, 0.136658,
    0.0711677, 0.678437, 0.439892,  0.221482,  0.346253, 0.522427, 0.663297,
    0.48805,   0.17549,  0.471226,  0.661033,  0.62804,  0.390136};

//
#endif
