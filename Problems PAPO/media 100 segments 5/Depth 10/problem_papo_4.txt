#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 100;
static const int segments = 5;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49), cons_event(50), cons_event(51), cons_event(52), cons_event(53), cons_event(54), cons_event(55), cons_event(56), cons_event(57), cons_event(58), cons_event(59), cons_event(60), cons_event(61), cons_event(62), cons_event(63), cons_event(64), cons_event(65), cons_event(66), cons_event(67), cons_event(68), cons_event(69), cons_event(70), cons_event(71), cons_event(72), cons_event(73), cons_event(74), cons_event(75), cons_event(76), cons_event(77), cons_event(78), cons_event(79), cons_event(80), cons_event(81), cons_event(82), cons_event(83), cons_event(84), cons_event(85), cons_event(86), cons_event(87), cons_event(88), cons_event(89), cons_event(90), cons_event(91), cons_event(92), cons_event(93), cons_event(94), cons_event(95), cons_event(96), cons_event(97), cons_event(98), cons_event(99)};

static const std::vector<Syntax_Tree> restrictions = {cons_excl(cons_excl(cons_indep(cons_indep(cons_excl(cons_incl(cons_incl(cons_incl(cons_indep(cons_incl(events[61], events[16]),events[15]),events[46]),events[89]),events[97]),events[8]),events[44]),events[47]),events[79]),events[94]),cons_incl(cons_incl(cons_indep(cons_indep(cons_excl(cons_excl(cons_incl(cons_indep(cons_excl(cons_indep(events[23], events[34]),events[52]),events[37]),events[77]),events[72]),events[16]),events[74]),events[9]),events[99]),events[28]),cons_excl(cons_incl(cons_indep(cons_incl(cons_incl(cons_incl(cons_incl(cons_excl(cons_incl(cons_excl(events[74], events[24]),events[49]),events[50]),events[32]),events[52]),events[86]),events[26]),events[30]),events[14]),events[70]),cons_excl(cons_excl(cons_incl(cons_indep(cons_incl(cons_excl(cons_incl(cons_incl(cons_indep(cons_incl(events[99], events[52]),events[50]),events[51]),events[83]),events[40]),events[17]),events[54]),events[20]),events[12]),events[62]),cons_incl(cons_incl(cons_indep(cons_incl(cons_incl(cons_indep(cons_incl(cons_excl(cons_incl(cons_incl(events[50], events[20]),events[70]),events[31]),events[72]),events[87]),events[3]),events[71]),events[68]),events[36]),events[14])};


static const std::vector< std::vector<float> > prob = {{0.164072, 0.15167, 0.664632, 0.203785, 0.0142842, 0.435706, 0.946396, 0.95293, 0.659681, 0.254147, 0.0744796, 0.244522, 0.0574591, 0.841199, 0.993501, 0.248007, 0.549541, 0.55511, 0.678822, 0.415648, 0.199942, 0.106597, 0.403771, 0.961948, 0.212994, 0.00971003, 0.661226, 0.912072, 0.915945, 0.714239, 0.739605, 0.144452, 0.321583, 0.326695, 0.695624, 0.775629, 0.659968, 0.41563, 0.449804, 0.914951, 0.989655, 0.501254, 0.796972, 0.383155, 0.553235, 0.946649, 0.0508426, 0.136017, 0.772716, 0.564196, 0.289431, 0.70818, 0.143421, 0.915796, 0.44357, 0.673955, 0.868473, 0.323993, 0.061392, 0.43106, 0.688751, 0.379364, 0.328859, 0.597272, 0.287809, 0.892295, 0.629986, 0.192398, 0.679548, 0.0938821, 0.103976, 0.399682, 0.856337, 0.876252, 0.778883, 0.661387, 0.841086, 0.81205, 0.57359, 0.202383, 0.159943, 0.163958, 0.814016, 0.593643, 0.402696, 0.889224, 0.664373, 0.990457, 0.658279, 0.372371, 0.578724, 0.567477, 0.953468, 0.446749, 0.757699, 0.597524, 0.63422, 0.466808, 0.99385, 0.965811},
{0.266472, 0.941729, 0.273194, 0.349766, 0.700227, 0.489379, 0.377276, 0.140893, 0.454901, 0.395619, 0.229358, 0.0806203, 0.483737, 0.645462, 0.5852, 0.0165458, 0.250596, 0.316141, 0.667895, 0.0496109, 0.77379, 0.375349, 0.519664, 0.253785, 0.946101, 0.7992, 0.527776, 0.436429, 0.864593, 0.994768, 0.504727, 0.587259, 0.264561, 0.156609, 0.330129, 0.300149, 0.796644, 0.115159, 0.799034, 0.200948, 0.154955, 0.845422, 0.504283, 0.62222, 0.584575, 0.786728, 0.911244, 0.158529, 0.809641, 0.656631, 0.466, 0.044488, 0.912647, 0.731921, 0.154392, 0.151818, 0.687464, 0.195616, 0.510385, 0.538806, 0.620473, 0.061674, 0.882579, 0.621939, 0.626934, 0.705638, 0.327535, 0.771226, 0.154789, 0.20945, 0.813911, 0.0727985, 0.71523, 0.0156059, 0.29555, 0.165131, 0.756741, 0.766617, 0.559309, 0.195898, 0.782655, 0.0458295, 0.584715, 0.0392441, 0.961417, 0.368366, 0.0588419, 0.649493, 0.849133, 0.620227, 0.56984, 0.840356, 0.171359, 0.593127, 0.569277, 0.32792, 0.425508, 0.37102, 0.311058, 0.562026},
{0.277911, 0.0639779, 0.701527, 0.763538, 0.260256, 0.317675, 0.849351, 0.561346, 0.694714, 0.94191, 0.271055, 0.813307, 0.706462, 0.942055, 0.451649, 0.812439, 0.918618, 0.972277, 0.465956, 0.0801902, 0.223551, 0.110892, 0.0917102, 0.0611471, 0.0411992, 0.972168, 0.476194, 0.890538, 0.337159, 0.76071, 0.0532459, 0.81138, 0.240011, 0.709918, 0.874626, 0.553955, 0.708024, 0.216346, 0.171143, 0.588894, 0.953338, 0.368774, 0.191537, 0.222259, 0.044782, 0.86802, 0.573258, 0.751399, 0.912896, 0.331911, 0.19127, 0.260757, 0.315206, 0.338973, 0.196968, 0.474988, 0.964459, 0.594123, 0.653765, 0.545984, 0.919617, 0.337599, 0.730381, 0.513181, 0.725539, 0.057625, 0.50575, 0.122292, 0.162099, 0.932244, 0.115357, 0.35716, 0.821704, 0.70401, 0.188758, 0.789601, 0.872357, 0.219865, 0.0459682, 0.861036, 0.0808929, 0.756916, 0.36788, 0.0699245, 0.867948, 0.916602, 0.670539, 0.720964, 0.160392, 0.40983, 0.408143, 0.838356, 0.72774, 0.54652, 0.0183291, 0.371501, 0.579142, 0.712782, 0.523612, 0.73019},
{0.984427, 0.946244, 0.722058, 0.289069, 0.308239, 0.417457, 0.0046147, 0.673035, 0.229006, 0.764553, 0.167293, 0.7728, 0.783276, 0.0479759, 0.292069, 0.464851, 0.909025, 0.0619382, 0.911588, 0.477882, 0.0191398, 0.611131, 0.31721, 0.296527, 0.0116701, 0.671107, 0.673905, 0.738859, 0.188537, 0.771047, 0.10416, 0.401744, 0.731516, 0.773306, 0.700684, 0.204688, 0.555462, 0.340298, 0.519342, 0.139181, 0.0915351, 0.422893, 0.790689, 0.589379, 0.991851, 0.618232, 0.112776, 0.161018, 0.363829, 0.155507, 0.332913, 0.935193, 0.926456, 0.375117, 0.115016, 0.930405, 0.412534, 0.13938, 0.91636, 0.24081, 0.235847, 0.178632, 0.339753, 0.847473, 0.0964625, 0.328406, 0.42883, 0.816489, 0.522848, 0.297639, 0.247414, 0.721894, 0.875219, 0.13712, 0.0472792, 0.697424, 0.373126, 0.800346, 0.199322, 0.70592, 0.898682, 0.744939, 0.863678, 0.359019, 0.596857, 0.996304, 0.58341, 0.238316, 0.871409, 0.724019, 0.399654, 0.902259, 0.82788, 0.0927977, 0.225348, 0.856018, 0.903905, 0.11646, 0.850798, 0.461563},
{0.313384, 0.35851, 0.0598874, 0.725443, 0.525724, 0.293984, 0.769607, 0.191107, 0.312314, 0.580283, 0.280142, 0.948525, 0.659227, 0.14818, 0.805938, 0.26387, 0.720627, 0.159295, 0.67932, 0.361177, 0.18965, 0.465794, 0.774317, 0.333065, 0.936278, 0.503699, 0.400759, 0.144283, 0.0436409, 0.561677, 0.340896, 0.758861, 0.781048, 0.399754, 0.0930245, 0.459653, 0.794635, 0.507914, 0.853904, 0.854586, 0.420657, 0.931046, 0.608683, 0.895979, 0.274984, 0.798801, 0.729984, 0.0264405, 0.535256, 0.552907, 0.0167158, 0.0878939, 0.451781, 0.10482, 0.230506, 0.292672, 0.177851, 0.165504, 0.57042, 0.366319, 0.644292, 0.916955, 0.771361, 0.907524, 0.873846, 0.926472, 0.398493, 0.148365, 0.598323, 0.0484756, 0.988872, 0.113464, 0.797866, 0.371763, 0.612835, 0.21951, 0.435936, 0.993789, 0.287149, 0.815944, 0.226891, 0.958214, 0.933134, 0.801314, 0.388034, 0.430963, 0.92306, 0.675061, 0.244617, 0.031743, 0.466018, 0.90428, 0.336951, 0.441813, 0.284543, 0.0266453, 0.237561, 0.0824407, 0.427847, 0.580113},
};

static const std::vector<float> costs = {443.84, 278.927, 708.939, 634.546, 400.366, 795.388, 569.983, 838.48, 726.308, 898.579, 861.634, 869.532, 478.93, 340.702, 259.357, 849.344, 333.415, 564.847, 921.076, 68.5286, 86.5879, 770.769, 748.203, 233.926, 790.991, 56.6709, 941.546, 601.26, 237.98, 905.039, 888.414, 807.939, 472.455, 653.209, 505.37, 807.18, 788.424, 894.646, 241.812, 809.193, 197.446, 643.745, 923.871, 872.843, 446.811, 797.901, 127.282, 832.365, 679.233, 220.934, 172.711, 525.499, 63.9615, 481.752, 445.047, 65.4342, 680.57, 865.996, 444.684, 672.661, 904.174, 712.213, 78.3394, 772.832, 178.562, 396.599, 871.232, 167.874, 778.109, 995.745, 964.142, 771.433, 993.81, 300.836, 735.174, 176.152, 165.207, 664.373, 615.241, 903.577, 891.365, 530.844, 643.532, 626.357, 152.56, 387.693, 610.612, 793.345, 988.097, 62.352, 335.968, 184.809, 919.627, 217.879, 416.392, 67.6619, 265.895, 550.478, 694.967, 708.54};

static const std::vector<float> min_impressions = {0.70838, 0.628108, 0.348354, 0.151781, 0.73058};

//
#endif
