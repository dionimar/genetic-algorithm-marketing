#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 5;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_excl(cons_incl(cons_incl(cons_indep(cons_indep(events[21], events[18]),events[29]),events[45]),events[31]),events[23]),cons_indep(cons_indep(cons_incl(cons_excl(cons_excl(events[39], events[49]),events[4]),events[27]),events[10]),events[40]),cons_indep(cons_indep(cons_excl(cons_indep(cons_indep(events[30], events[14]),events[13]),events[1]),events[15]),events[36]),cons_indep(cons_excl(cons_excl(cons_incl(cons_excl(events[11], events[17]),events[19]),events[12]),events[46]),events[41]),cons_incl(cons_incl(cons_excl(cons_excl(cons_indep(events[34], events[3]),events[22]),events[7]),events[0]),events[16])};


static const std::vector< std::vector<float> > prob = {{0.254454, 0.273255, 0.487391, 0.989592, 0.52251, 0.619538, 0.837298, 0.0943383, 0.73743, 0.862225, 0.256407, 0.0663871, 0.249557, 0.589346, 0.649424, 0.790956, 0.936413, 0.859942, 0.61514, 0.170657, 0.91054, 0.571517, 0.542942, 0.957402, 0.325766, 0.801725, 0.0469803, 0.448676, 0.860445, 0.605615, 0.778577, 0.58998, 0.792782, 0.286702, 0.900007, 0.275151, 0.56253, 0.469784, 0.317985, 0.326756, 0.505698, 0.271869, 0.203663, 0.654427, 0.0369526, 0.630932, 0.962565, 0.519759, 0.0923116, 0.0113411},
{0.160825, 0.6735, 0.0253807, 0.471672, 0.972552, 0.538837, 0.292655, 0.0469685, 0.219533, 0.569703, 0.661069, 0.934291, 0.407842, 0.0371217, 0.612801, 0.7937, 0.546179, 0.956212, 0.971405, 0.470715, 0.977753, 0.982307, 0.472177, 0.118977, 0.991942, 0.630599, 0.042721, 0.975565, 0.6814, 0.0462109, 0.717565, 0.554288, 0.396765, 0.143212, 0.298394, 0.603428, 0.785282, 0.151952, 0.957091, 0.244617, 0.823569, 0.849494, 0.641589, 0.161063, 0.253541, 0.412918, 0.624727, 0.468448, 0.966054, 0.794611},
{0.266059, 0.309829, 0.603002, 0.982415, 0.478634, 0.854998, 0.19238, 0.484296, 0.909673, 0.411421, 0.427295, 0.329914, 0.0873066, 0.492724, 0.0986548, 0.0551415, 0.972662, 0.258348, 0.997632, 0.158742, 0.61547, 0.587165, 0.643072, 0.022149, 0.464854, 0.826162, 0.936597, 0.974622, 0.125588, 0.575987, 0.835953, 0.0223884, 0.328899, 0.424823, 0.782866, 0.124778, 0.654712, 0.23036, 0.457336, 0.540493, 0.0974271, 0.0094981, 0.00609375, 0.910957, 0.704236, 0.877921, 0.251199, 0.731836, 0.194127, 0.317957},
{0.1242, 0.105929, 0.217933, 0.494802, 0.406959, 0.0490789, 0.53087, 0.819954, 0.752506, 0.022224, 0.245052, 0.49491, 0.808588, 0.307444, 0.157419, 0.0715735, 0.988375, 0.301944, 0.673701, 0.688803, 0.981891, 0.266321, 0.317568, 0.416418, 0.383441, 0.133016, 0.761641, 0.783396, 0.629497, 0.349362, 0.89841, 0.5874, 0.0816547, 0.792353, 0.170898, 0.221809, 0.770928, 0.21118, 0.279883, 0.640348, 0.941301, 0.726318, 0.192492, 0.175985, 0.663322, 0.757256, 0.85617, 0.0427173, 0.247632, 0.213705},
{0.962375, 0.601715, 0.000867927, 0.713145, 0.821111, 0.369159, 0.446966, 0.00582008, 0.0909091, 0.689722, 0.620199, 0.920738, 0.313856, 0.501567, 0.0924495, 0.236948, 0.541045, 0.342055, 0.610926, 0.337062, 0.330168, 0.393359, 0.678033, 0.498429, 0.820417, 0.855189, 0.230125, 0.236893, 0.197282, 0.303926, 0.418863, 0.865969, 0.340404, 0.394371, 0.102222, 0.190072, 0.895372, 0.0223677, 0.450045, 0.860692, 0.00240674, 0.181669, 0.331483, 0.249691, 0.221572, 0.861777, 0.348871, 0.322754, 0.731784, 0.157561},
};

static const std::vector<float> costs = {777.637, 937.065, 539.09, 664.066, 145.423, 600.503, 892.976, 183.168, 133.985, 659.797, 118.625, 397.646, 906.288, 109.314, 438.215, 885.494, 666.163, 579.237, 669.228, 556.49, 77.2835, 147.829, 899.551, 468.127, 211.301, 4.77602, 391.548, 847.406, 855.656, 874.632, 877.639, 66.3761, 179.384, 819.587, 148.074, 653.975, 85.7039, 920.262, 256.238, 412.751, 26.2408, 966.016, 395.447, 66.7669, 102.733, 774.885, 271.311, 876.351, 179.888, 580.82};

static const std::vector<float> min_impressions = {0.17325, 0.930383, 0.290741, 0.783659, 0.191446};

//
#endif
