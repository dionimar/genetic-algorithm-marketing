#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 5;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_excl(cons_indep(cons_incl(cons_incl(cons_incl(events[6], events[20]),events[45]),events[1]),events[11]),events[32]),cons_excl(cons_indep(cons_excl(cons_indep(cons_incl(events[21], events[33]),events[15]),events[28]),events[44]),events[40]),cons_excl(cons_incl(cons_indep(cons_excl(cons_incl(events[2], events[22]),events[14]),events[28]),events[17]),events[5]),cons_incl(cons_excl(cons_incl(cons_excl(cons_indep(events[39], events[19]),events[43]),events[0]),events[12]),events[45]),cons_indep(cons_incl(cons_incl(cons_excl(cons_incl(events[43], events[33]),events[9]),events[40]),events[22]),events[35])};


static const std::vector< std::vector<float> > prob = {{0.450896, 0.142892, 0.141226, 0.962051, 0.380385, 0.587971, 0.667754, 0.0158273, 0.980575, 0.0438506, 0.000610555, 0.584828, 0.543543, 0.974991, 0.33783, 0.376029, 0.286784, 0.0341634, 0.0322314, 0.27591, 0.214698, 0.376805, 0.613303, 0.923259, 0.750503, 0.335431, 0.47942, 0.535369, 0.740077, 0.803632, 0.952381, 0.054533, 0.632298, 0.963502, 0.510405, 0.430904, 0.822932, 0.246043, 0.137055, 0.232025, 0.739877, 0.578019, 0.702724, 0.183132, 0.155086, 0.536112, 0.896954, 0.299561, 0.695043, 0.28228},
{0.0644413, 0.525261, 0.255107, 0.663849, 0.601523, 0.285944, 0.144748, 0.790855, 0.61474, 0.638041, 0.837339, 0.679259, 0.626183, 0.0403392, 0.876681, 0.61638, 0.740244, 0.718619, 0.692622, 0.883744, 0.837904, 0.21015, 0.908696, 0.697482, 0.272608, 0.535516, 0.436832, 0.473718, 0.819764, 0.779269, 0.6305, 0.989227, 0.651201, 0.76713, 0.167905, 0.379111, 0.833342, 0.69789, 0.922095, 0.607332, 0.448606, 0.0900624, 0.862809, 0.87801, 0.866511, 0.661998, 0.0910656, 0.426894, 0.746174, 0.253362},
{0.336737, 0.163842, 0.930323, 0.139082, 0.770552, 0.376444, 0.905947, 0.884657, 0.338315, 0.302371, 0.92246, 0.59442, 0.80289, 0.00634151, 0.793599, 0.0986405, 0.809467, 0.162939, 0.557699, 0.0945345, 0.823902, 0.858965, 0.40613, 0.217462, 0.495207, 0.0795177, 0.211176, 0.0882086, 0.880161, 0.822516, 0.965209, 0.374037, 0.512678, 0.0220325, 0.383135, 0.760367, 0.857208, 0.741573, 0.376919, 0.154995, 0.638477, 0.224007, 0.821727, 0.436599, 0.691006, 0.451391, 0.85377, 0.278058, 0.304565, 0.45308},
{0.657753, 0.911355, 0.250225, 0.707036, 0.287098, 0.864796, 0.83285, 0.231481, 0.244702, 0.255391, 0.163249, 0.361903, 0.389774, 0.332413, 0.238908, 0.458817, 0.501534, 0.19347, 0.483543, 0.969983, 0.159197, 0.689029, 0.0384253, 0.63036, 0.917812, 0.892889, 0.515642, 0.364078, 0.031348, 0.222242, 0.407881, 0.843179, 0.68001, 0.732399, 0.626825, 0.100009, 0.600405, 0.50098, 0.953738, 0.29734, 0.438974, 0.0733514, 0.596376, 0.81583, 0.75679, 0.859073, 0.907496, 0.439617, 0.858511, 0.915939},
{0.66718, 0.0757793, 0.980708, 0.366158, 0.576249, 0.455404, 0.576407, 0.764748, 0.109574, 0.345467, 0.174356, 0.0143869, 0.174399, 0.723931, 0.565006, 0.115257, 0.240926, 0.629186, 0.866968, 0.723537, 0.621391, 0.00340898, 0.786191, 0.72714, 0.848499, 0.294981, 0.350149, 0.414377, 0.562385, 0.741549, 0.165266, 0.607047, 0.558348, 0.596706, 0.899382, 0.296216, 0.50531, 0.306081, 0.917876, 0.0778002, 0.858283, 0.480317, 0.518841, 0.874928, 0.287976, 0.315184, 0.710444, 0.446925, 0.229677, 0.200381},
};

static const std::vector<float> costs = {68.4327, 857.812, 706.334, 706.159, 904.273, 294.985, 935.725, 960.414, 545.217, 175.666, 476.932, 70.0611, 696.183, 78.2774, 117.368, 569.31, 520.539, 155.41, 585.339, 815.163, 714.325, 281.175, 351.236, 490.188, 239.608, 324.267, 710.696, 928.68, 98.5518, 10.6756, 333.569, 314.735, 922.927, 330.021, 123.228, 619.834, 184.299, 77.352, 902.824, 746.681, 986.302, 5.14562, 314.517, 696.746, 218.446, 674.608, 806.483, 414.017, 429.128, 371.315};

static const std::vector<float> min_impressions = {0.888555, 0.14166, 0.109023, 0.112287, 0.255938};

//
#endif
