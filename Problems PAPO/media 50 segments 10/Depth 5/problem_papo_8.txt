#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 10;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_incl(cons_incl(cons_incl(cons_excl(cons_excl(events[30], events[14]),events[3]),events[2]),events[39]),events[27]),cons_indep(cons_indep(cons_incl(cons_excl(cons_incl(events[15], events[7]),events[42]),events[3]),events[0]),events[44]),cons_indep(cons_incl(cons_excl(cons_excl(cons_excl(events[10], events[49]),events[38]),events[46]),events[43]),events[13]),cons_indep(cons_excl(cons_incl(cons_incl(cons_indep(events[47], events[30]),events[23]),events[18]),events[46]),events[6]),cons_indep(cons_indep(cons_excl(cons_incl(cons_incl(events[15], events[46]),events[26]),events[25]),events[35]),events[24]),cons_indep(cons_indep(cons_incl(cons_indep(cons_excl(events[22], events[12]),events[21]),events[42]),events[7]),events[0]),cons_incl(cons_indep(cons_excl(cons_excl(cons_indep(events[13], events[5]),events[7]),events[0]),events[38]),events[1]),cons_excl(cons_indep(cons_indep(cons_incl(cons_indep(events[8], events[45]),events[33]),events[39]),events[44]),events[35]),cons_incl(cons_incl(cons_incl(cons_indep(cons_indep(events[22], events[43]),events[47]),events[14]),events[7]),events[35]),cons_indep(cons_incl(cons_excl(cons_excl(cons_indep(events[47], events[25]),events[35]),events[2]),events[39]),events[41])};


static const std::vector< std::vector<float> > prob = {{0.0890533, 0.0123218, 0.975964, 0.284183, 0.17939, 0.0280477, 0.680666, 0.974408, 0.228816, 0.666926, 0.212438, 0.775665, 0.325847, 0.455733, 0.638854, 0.331493, 0.806476, 0.541684, 0.588252, 0.171615, 0.831207, 0.68114, 0.242491, 0.485766, 0.605241, 0.936113, 0.0550806, 0.511323, 0.935072, 0.741838, 0.296993, 0.636777, 0.30738, 0.664091, 0.863802, 0.727865, 0.371891, 0.955303, 0.492637, 0.417375, 0.578708, 0.488626, 0.53911, 0.127124, 0.286679, 0.325049, 0.0457918, 0.0798978, 0.43727, 0.250536},
{0.539328, 0.706757, 0.912966, 0.71126, 0.213708, 0.751334, 0.350391, 0.362003, 0.0975549, 0.110568, 0.477793, 0.340456, 0.914382, 0.887323, 0.00961206, 0.230989, 0.0397359, 0.139355, 0.405581, 0.106173, 0.863821, 0.124186, 0.809134, 0.424732, 0.00564868, 0.0267575, 0.979899, 0.785539, 0.205894, 0.0395756, 0.339128, 0.372153, 0.0950885, 0.063898, 0.214855, 0.192067, 0.00308615, 0.497061, 0.741545, 0.82379, 0.265835, 0.936512, 0.447123, 0.319873, 0.886802, 0.109507, 0.313141, 0.653057, 0.564572, 0.447282},
{0.944588, 0.290373, 0.161461, 0.485736, 0.222805, 0.879897, 0.233288, 0.421399, 0.620016, 0.161178, 0.71237, 0.194452, 0.778963, 0.852765, 0.867099, 0.779652, 0.242518, 0.980671, 0.0419683, 0.290513, 0.120033, 0.344329, 0.88131, 0.507472, 0.564911, 0.126549, 0.132752, 0.539548, 0.15908, 0.831383, 0.612876, 0.92273, 0.983787, 0.101078, 0.00866528, 0.537125, 0.52303, 0.033012, 0.573248, 0.0341434, 0.340745, 0.29327, 0.715607, 0.0581409, 0.399231, 0.103731, 0.315372, 0.294355, 0.756571, 0.567639},
{0.0470453, 0.53222, 0.866165, 0.943529, 0.791337, 0.100507, 0.267753, 0.352899, 0.765132, 0.0393574, 0.0127749, 0.889457, 0.508723, 0.331962, 0.945588, 0.695586, 0.607217, 0.78758, 0.561943, 0.502464, 0.884305, 0.705265, 0.928452, 0.460769, 0.753206, 0.458416, 0.98318, 0.873027, 0.702386, 0.773726, 0.19759, 0.660995, 0.598007, 0.0161724, 0.58126, 0.426229, 0.0565248, 0.670771, 0.449988, 0.985495, 0.763589, 0.967972, 0.649451, 0.285822, 0.693127, 0.115089, 0.0772657, 0.615019, 0.258102, 0.356376},
{0.686729, 0.649574, 0.0136052, 0.184207, 0.400081, 0.937234, 0.0209129, 0.309224, 0.12013, 0.179665, 0.87428, 0.198881, 0.445914, 0.152446, 0.198621, 0.682015, 0.3494, 0.550818, 0.213789, 0.51718, 0.7365, 0.277429, 0.553011, 0.394106, 0.603548, 0.730417, 0.513118, 0.554151, 0.81079, 0.295742, 0.134114, 0.874104, 0.0769727, 0.289884, 0.266123, 0.127255, 0.145224, 0.292977, 0.652215, 0.851541, 0.762901, 0.997584, 0.420892, 0.328388, 0.652544, 0.440733, 0.959253, 0.379406, 0.95809, 0.314812},
{0.174739, 0.168157, 0.128421, 0.456753, 0.794438, 0.551423, 0.861365, 0.39811, 0.143703, 0.766736, 0.771432, 0.705883, 0.342904, 0.0117855, 0.429128, 0.6052, 0.229688, 0.606831, 0.358649, 0.874467, 0.761617, 0.402195, 0.247605, 0.23764, 0.897279, 0.870404, 0.438744, 0.113559, 0.859812, 0.474877, 0.293904, 0.948067, 0.737708, 0.137825, 0.283496, 0.624299, 0.565021, 0.0573607, 0.155703, 0.0507401, 0.41334, 0.859324, 0.163852, 0.845279, 0.595042, 0.59158, 0.87196, 0.779665, 0.846317, 0.625522},
{0.287628, 0.611473, 0.625207, 0.00443613, 0.120684, 0.169129, 0.645698, 0.4478, 0.220211, 0.57802, 0.268623, 0.970865, 0.189024, 0.0669947, 0.0725219, 0.211327, 0.720437, 0.111616, 0.943668, 0.980592, 0.402471, 0.184211, 0.395637, 0.567768, 0.397323, 0.652359, 0.340382, 0.314427, 0.679193, 0.675286, 0.876904, 0.530259, 0.0389511, 0.319008, 0.86613, 0.121342, 0.710653, 0.790106, 0.385451, 0.857109, 0.815585, 0.331329, 0.626766, 0.969041, 0.226094, 0.790645, 0.806432, 0.60482, 0.251569, 0.175826},
{0.297491, 0.478736, 0.558268, 0.597354, 0.0806322, 0.714644, 0.129134, 0.996139, 0.256342, 0.804767, 0.5729, 0.0620378, 0.0373636, 0.733008, 0.326832, 0.40165, 0.178546, 0.964561, 0.945039, 0.672331, 0.774578, 0.56536, 0.941386, 0.722557, 0.503173, 0.81564, 0.915741, 0.943765, 0.749371, 0.579082, 0.477839, 0.846779, 0.451223, 0.314208, 0.945099, 0.569454, 0.0269713, 0.806405, 0.794886, 0.75818, 0.46062, 0.783076, 0.332537, 0.469599, 0.537636, 0.879549, 0.110916, 0.756077, 0.359432, 0.785482},
{0.503308, 0.0759282, 0.768306, 0.138203, 0.15992, 0.596256, 0.129802, 0.647719, 0.371652, 0.804644, 0.162885, 0.758096, 0.347417, 0.087283, 0.559475, 0.698623, 0.703702, 0.489281, 0.235664, 0.557191, 0.92387, 0.824797, 0.4087, 0.443811, 0.652862, 0.862235, 0.0748625, 0.102493, 0.687902, 0.0790475, 0.189527, 0.595977, 0.459873, 0.367398, 0.234922, 0.706968, 0.273605, 0.656749, 0.944877, 0.933735, 0.410209, 0.515682, 0.185051, 0.350731, 0.933267, 0.836854, 0.590921, 0.847877, 0.961395, 0.0280436},
{0.902131, 0.820218, 0.825466, 0.215689, 0.772227, 0.0769297, 0.752412, 0.46533, 0.498293, 0.532684, 0.974271, 0.93276, 0.632932, 0.772147, 0.826186, 0.696262, 0.487759, 0.426122, 0.0823743, 0.699455, 0.732614, 0.516832, 0.651482, 0.240135, 0.181749, 0.82076, 0.626774, 0.156836, 0.0191384, 0.802237, 0.39424, 0.449715, 0.075651, 0.926709, 0.360768, 0.0815238, 0.607664, 0.398658, 0.253917, 0.0117073, 0.374311, 0.865886, 0.388595, 0.393039, 0.719649, 0.39192, 0.0949434, 0.429556, 0.132111, 0.135856},
};

static const std::vector<float> costs = {455.391, 566.268, 691.614, 754.489, 900.394, 594.93, 866.933, 282.513, 863.634, 89.8972, 22.8552, 133.781, 332.263, 798.27, 783.846, 430.168, 991.208, 10.4687, 161.784, 331.654, 316.534, 864.702, 779.244, 814.321, 242.647, 730.904, 334.095, 923.101, 734.903, 475.87, 249.587, 394.988, 325.904, 129.844, 199.177, 176.092, 863.118, 325.235, 745.625, 292.569, 100.476, 842.33, 25.7051, 290.73, 981.033, 267.054, 165.261, 457.217, 101.249, 914.162};

static const std::vector<float> min_impressions = {0.342597, 0.416334, 0.634034, 0.52069, 0.298849, 0.120006, 0.116067, 0.927574, 0.310989, 0.626673};

//
#endif
