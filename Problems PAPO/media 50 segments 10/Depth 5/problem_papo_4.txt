#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 10;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_incl(cons_incl(cons_incl(cons_indep(cons_excl(events[44], events[1]),events[24]),events[33]),events[21]),events[37]),cons_indep(cons_incl(cons_indep(cons_indep(cons_excl(events[20], events[10]),events[24]),events[0]),events[45]),events[18]),cons_excl(cons_incl(cons_excl(cons_incl(cons_indep(events[23], events[19]),events[27]),events[42]),events[41]),events[32]),cons_incl(cons_incl(cons_excl(cons_indep(cons_incl(events[16], events[42]),events[0]),events[33]),events[38]),events[1]),cons_incl(cons_incl(cons_incl(cons_incl(cons_indep(events[21], events[15]),events[28]),events[19]),events[10]),events[0]),cons_excl(cons_indep(cons_incl(cons_excl(cons_indep(events[47], events[13]),events[19]),events[2]),events[3]),events[32]),cons_indep(cons_incl(cons_incl(cons_incl(cons_indep(events[31], events[36]),events[20]),events[35]),events[3]),events[8]),cons_incl(cons_excl(cons_incl(cons_incl(cons_incl(events[17], events[49]),events[3]),events[10]),events[36]),events[18]),cons_excl(cons_incl(cons_incl(cons_excl(cons_incl(events[41], events[31]),events[2]),events[30]),events[14]),events[43]),cons_incl(cons_incl(cons_incl(cons_indep(cons_incl(events[38], events[27]),events[34]),events[35]),events[40]),events[41])};


static const std::vector< std::vector<float> > prob = {{0.943187, 0.659329, 0.0294601, 0.516368, 0.0950442, 0.232857, 0.459782, 0.971719, 0.44726, 0.772188, 0.167428, 0.171216, 0.40252, 0.831901, 0.719568, 0.194035, 0.32895, 0.526862, 0.865385, 0.311978, 0.179578, 0.0927537, 0.44376, 0.00646036, 0.207679, 0.127411, 0.147449, 0.275346, 0.271681, 0.508893, 0.891496, 0.0906415, 0.128909, 0.858433, 0.677214, 0.21882, 0.700134, 0.957102, 0.0959119, 0.656643, 0.211636, 0.951679, 0.849184, 0.019742, 0.0299335, 0.608083, 0.843452, 0.340382, 0.515116, 0.883536},
{0.598231, 0.0357524, 0.395187, 0.0825241, 0.302255, 0.11214, 0.393249, 0.289549, 0.564309, 0.253138, 0.451607, 0.367279, 0.578207, 0.406098, 0.771296, 0.460292, 0.793567, 0.104079, 0.617952, 0.642606, 0.503105, 0.92816, 0.335238, 0.0938618, 0.0206183, 0.73539, 0.499717, 0.20605, 0.309042, 0.727572, 0.207243, 0.228263, 0.675186, 0.216887, 0.694035, 0.299394, 0.448077, 0.823481, 0.291809, 0.857752, 0.234057, 0.240779, 0.945003, 0.995368, 0.426348, 0.204762, 0.700732, 0.711018, 0.414464, 0.178143},
{0.735985, 0.105546, 0.0975697, 0.647782, 0.646353, 0.251277, 0.531477, 0.139151, 0.659877, 0.297572, 0.194849, 0.770098, 0.223468, 0.716522, 0.349851, 0.431282, 0.837651, 0.926346, 0.660885, 0.0374154, 0.249776, 0.991338, 0.726324, 0.717551, 0.762137, 0.095947, 0.899511, 0.368964, 0.441507, 0.801682, 0.756416, 0.455771, 0.884204, 0.489846, 0.612531, 0.562157, 0.0687797, 0.682513, 0.518091, 0.657088, 0.405394, 0.965373, 0.0807151, 0.880817, 0.0242945, 0.636103, 0.643664, 0.597424, 0.425363, 0.309809},
{0.704443, 0.966245, 0.0307236, 0.517246, 0.87752, 0.390879, 0.0588469, 0.238478, 0.689281, 0.897754, 0.126079, 0.111016, 0.700111, 0.779326, 0.336138, 0.475441, 0.378316, 0.890542, 0.87752, 0.633685, 0.961004, 0.857511, 0.239689, 0.982731, 0.43576, 0.779454, 0.644603, 0.849725, 0.0736417, 0.516743, 0.701861, 0.436318, 0.672247, 0.994527, 0.149983, 0.508618, 0.360158, 0.880085, 0.802928, 0.159421, 0.124486, 0.814393, 0.377247, 0.500985, 0.395017, 0.860795, 0.710806, 0.884605, 0.864212, 0.235775},
{0.814932, 0.337573, 0.400788, 0.515109, 0.514952, 0.879721, 0.976027, 0.243337, 0.535991, 0.671098, 0.574226, 0.591426, 0.372335, 0.646583, 0.104276, 0.916687, 0.654047, 0.44166, 0.317216, 0.454668, 0.941267, 0.278108, 0.343613, 0.355387, 0.228581, 0.46654, 0.642468, 0.0952004, 0.360909, 0.905225, 0.802708, 0.112645, 0.783547, 0.0390703, 0.619941, 0.336684, 0.514911, 0.737635, 0.33103, 0.975508, 0.781648, 0.611988, 0.0275114, 0.886984, 0.775791, 0.0899024, 0.714884, 0.5992, 0.316184, 0.914458},
{0.421318, 0.120221, 0.856397, 0.295691, 0.409956, 0.0813594, 0.986765, 0.807873, 0.86378, 0.900347, 0.76233, 0.851948, 0.265559, 0.00612543, 0.66234, 0.688032, 0.200972, 0.226844, 0.373023, 0.716455, 0.344888, 0.700495, 0.889126, 0.306123, 0.183363, 0.153453, 0.624343, 0.0356169, 0.672525, 0.798314, 0.725929, 0.0486351, 0.78331, 0.624332, 0.610135, 0.3099, 0.71413, 0.562648, 0.105948, 0.380764, 0.725618, 0.247525, 0.19253, 0.372262, 0.371363, 0.00844184, 0.175309, 0.265282, 0.491099, 0.700751},
{0.050662, 0.908632, 0.0586564, 0.252607, 0.873135, 0.489677, 0.678989, 0.468367, 0.633116, 0.723961, 0.567919, 0.976878, 0.567843, 0.52541, 0.775846, 0.134873, 0.559981, 0.316105, 0.384786, 0.242517, 0.50136, 0.439627, 0.0783784, 0.579726, 0.413345, 0.200443, 0.509644, 0.0357811, 0.2421, 0.494695, 0.516716, 0.966307, 0.612405, 0.615542, 0.0130371, 0.787811, 0.943144, 0.905831, 0.0223223, 0.59207, 0.10921, 0.275594, 0.0289892, 0.613381, 0.732661, 0.745817, 0.190741, 0.752123, 0.350438, 0.450389},
{0.659777, 0.113894, 0.0596575, 0.147908, 0.605084, 0.10195, 0.527824, 0.710016, 0.853489, 0.336789, 0.627468, 0.4731, 0.843927, 0.0991321, 0.851316, 0.803661, 0.921421, 0.0188262, 0.963131, 0.95414, 0.290473, 0.0179747, 0.472149, 0.92319, 0.943016, 0.964391, 0.172223, 0.619914, 0.419579, 0.963685, 0.943316, 0.184019, 0.617669, 0.210048, 0.0313587, 0.952735, 0.450884, 0.852277, 0.220797, 0.207162, 0.0739902, 0.266467, 0.74961, 0.660994, 0.455346, 0.229544, 0.586418, 0.0105223, 0.79324, 0.270241},
{0.631131, 0.889798, 0.438367, 0.45466, 0.425864, 0.150053, 0.419823, 0.713698, 0.714767, 0.422669, 0.229454, 0.848575, 0.888688, 0.195085, 0.27156, 0.670898, 0.0444443, 0.704661, 0.573749, 0.66816, 0.739361, 0.422597, 0.463622, 0.24225, 0.514446, 0.402857, 0.0806401, 0.879067, 0.872172, 0.326458, 0.61893, 0.468435, 0.459875, 0.75133, 0.879952, 0.380893, 0.878358, 0.294636, 0.316474, 0.682182, 0.116839, 0.666207, 0.671255, 0.96249, 0.965899, 0.354332, 0.551829, 0.57884, 0.105974, 0.143873},
{0.685721, 0.679257, 0.375309, 0.776955, 0.00779468, 0.702526, 0.445632, 0.680883, 0.920977, 0.741213, 0.655355, 0.40541, 0.315115, 0.551899, 0.535266, 0.314072, 0.97392, 0.556009, 0.366255, 0.0701787, 0.462478, 0.224057, 0.0961383, 0.452414, 0.220636, 0.339632, 0.321906, 0.421625, 0.66465, 0.293691, 0.375719, 0.347212, 0.343689, 0.197875, 0.118631, 0.254158, 0.560099, 0.625227, 0.643496, 0.778178, 0.116087, 0.891006, 0.552029, 0.533153, 0.704249, 0.246159, 0.82601, 0.470809, 0.00782482, 0.249554},
};

static const std::vector<float> costs = {182.149, 577.459, 213.367, 242.199, 554.356, 421.772, 385.224, 334.969, 110.562, 596.115, 977.71, 660.017, 942.31, 902.257, 951.704, 310.377, 384.026, 852.64, 204.9, 188.259, 67.5195, 818.132, 907.937, 271.173, 507.73, 160.688, 485.621, 799.213, 336.87, 116.013, 945.838, 510.913, 333.861, 499.03, 318.891, 37.8004, 387.543, 902.295, 946.239, 956.016, 723.453, 339.621, 114.458, 48.6112, 705.06, 663.674, 679.211, 468.89, 621.832, 979.006};

static const std::vector<float> min_impressions = {0.0374685, 0.14318, 0.616853, 0.82755, 0.266444, 0.601467, 0.419253, 0.299156, 0.354539, 0.264481};

//
#endif
