#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 10;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_indep(cons_indep(cons_indep(cons_indep(cons_indep(events[6], events[15]),events[18]),events[43]),events[44]),events[41]),cons_excl(cons_incl(cons_incl(cons_indep(cons_indep(events[46], events[38]),events[40]),events[21]),events[35]),events[9]),cons_excl(cons_indep(cons_indep(cons_indep(cons_indep(events[11], events[7]),events[22]),events[19]),events[14]),events[37]),cons_excl(cons_indep(cons_indep(cons_excl(cons_excl(events[41], events[20]),events[17]),events[5]),events[30]),events[27]),cons_indep(cons_incl(cons_excl(cons_incl(cons_excl(events[19], events[25]),events[49]),events[18]),events[12]),events[34]),cons_indep(cons_incl(cons_excl(cons_incl(cons_incl(events[33], events[46]),events[30]),events[21]),events[5]),events[37]),cons_excl(cons_excl(cons_excl(cons_incl(cons_indep(events[14], events[41]),events[36]),events[45]),events[16]),events[46]),cons_excl(cons_incl(cons_indep(cons_excl(cons_excl(events[27], events[21]),events[36]),events[25]),events[47]),events[34]),cons_indep(cons_indep(cons_indep(cons_excl(cons_incl(events[38], events[2]),events[1]),events[35]),events[48]),events[16]),cons_indep(cons_incl(cons_incl(cons_incl(cons_incl(events[2], events[31]),events[9]),events[4]),events[19]),events[23])};


static const std::vector< std::vector<float> > prob = {{0.178164, 0.545572, 0.0178781, 0.196252, 0.569156, 0.822439, 0.2271, 0.816884, 0.666888, 0.111301, 0.200319, 0.547857, 0.89702, 0.365393, 0.27172, 0.224859, 0.44292, 0.36262, 0.797882, 0.0861841, 0.833315, 0.607908, 0.85629, 0.984503, 0.854478, 0.747809, 0.346816, 0.107059, 0.601489, 0.689013, 0.866658, 0.296724, 0.659002, 0.0395081, 0.732535, 0.577768, 0.278481, 0.533698, 0.00344062, 0.888245, 0.248433, 0.747177, 0.716332, 0.129802, 0.344998, 0.627145, 0.891881, 0.857635, 0.209263, 0.852154},
{0.0179551, 0.202783, 0.464719, 0.0768268, 0.399096, 0.6845, 0.267324, 0.388829, 0.816455, 0.75934, 0.573021, 0.114406, 0.616991, 0.929389, 0.854405, 0.553357, 0.315602, 0.42747, 0.855986, 0.184656, 0.998136, 0.430496, 0.43864, 0.00699355, 0.24479, 0.48387, 0.742454, 0.337857, 0.928338, 0.111638, 0.820961, 0.0779647, 0.392974, 0.600116, 0.783366, 0.849189, 0.301704, 0.624737, 0.591361, 0.167981, 0.28268, 0.204072, 0.187772, 0.912671, 0.852407, 0.00843708, 0.639383, 0.932353, 0.0989098, 0.431579},
{0.920193, 0.152226, 0.175042, 0.653416, 0.61015, 0.833651, 0.750359, 0.737461, 0.781688, 0.242362, 0.0858425, 0.967081, 0.121741, 0.878096, 0.488557, 0.916942, 0.201545, 0.402827, 0.771157, 0.450746, 0.829124, 0.19201, 0.743604, 0.660159, 0.744602, 0.653765, 0.834498, 0.0656862, 0.485056, 0.0643817, 0.751404, 0.100239, 0.988856, 0.252141, 0.346281, 0.933132, 0.286158, 0.726305, 0.85999, 0.907242, 0.308986, 0.754226, 0.628466, 0.962357, 0.972887, 0.0382374, 0.681756, 0.0720357, 0.113859, 0.241688},
{0.480414, 0.409087, 0.974482, 0.888976, 0.647365, 0.0157463, 0.9523, 0.106428, 0.620299, 0.601352, 0.0298093, 0.55476, 0.109098, 0.956657, 0.616778, 0.0561021, 0.914831, 0.803459, 0.156102, 0.952361, 0.00529622, 0.671426, 0.555453, 0.520364, 0.717855, 0.243429, 0.317813, 0.499895, 0.850749, 0.210264, 0.505146, 0.259088, 0.109759, 0.814565, 0.26181, 0.699842, 0.902487, 0.624267, 0.748275, 0.701646, 0.342957, 0.714247, 0.254471, 0.942652, 0.508609, 0.176576, 0.663445, 0.888227, 0.505311, 0.644939},
{0.00257169, 0.391254, 0.37321, 0.728119, 0.172889, 0.628411, 0.244441, 0.772014, 0.633978, 0.724286, 0.708569, 0.898285, 0.541852, 0.582923, 0.479805, 0.843415, 0.714566, 0.310527, 0.356072, 0.157659, 0.612553, 0.873121, 0.964303, 0.65966, 0.861721, 0.017436, 0.829784, 0.628696, 0.683038, 0.437328, 0.385394, 0.499742, 0.847369, 0.0751788, 0.961226, 0.519147, 0.792865, 0.669072, 0.307947, 0.781059, 0.118733, 0.981517, 0.542824, 0.739912, 0.868724, 0.320353, 0.331381, 0.672876, 0.748309, 0.902533},
{0.749992, 0.462713, 0.537998, 0.528227, 0.381376, 0.366569, 0.43119, 0.903212, 0.94174, 0.17605, 0.887334, 0.433779, 0.972954, 0.698437, 0.903747, 0.801839, 0.340633, 0.479214, 0.174388, 0.522644, 0.287586, 0.319512, 0.00249041, 0.959962, 0.839085, 0.214156, 0.160428, 0.961417, 0.4031, 0.0494672, 0.695974, 0.386954, 0.429867, 0.19999, 0.0310412, 0.490616, 0.0214883, 0.38185, 0.11062, 0.762796, 0.263501, 0.225751, 0.121752, 0.449182, 0.348325, 0.689695, 0.751355, 0.276304, 0.223012, 0.433095},
{0.74008, 0.145408, 0.287643, 0.732641, 0.269447, 0.0448432, 0.821113, 0.599801, 0.340191, 0.5586, 0.0601401, 0.147407, 0.44163, 0.665869, 0.00534789, 0.182421, 0.935739, 0.114408, 0.229498, 0.27816, 0.813665, 0.396356, 0.217626, 0.728962, 0.76102, 0.292268, 0.40516, 0.40497, 0.405219, 0.161099, 0.323187, 0.381947, 0.209101, 0.29692, 0.170487, 0.557743, 0.836812, 0.41741, 0.687382, 0.104795, 0.404777, 0.390426, 0.912295, 0.796081, 0.733818, 0.931239, 0.0110258, 0.0785425, 0.554907, 0.717274},
{0.853853, 0.816738, 0.648379, 0.856744, 0.184207, 0.909351, 0.152781, 0.115218, 0.99269, 0.757063, 0.500266, 0.0303691, 0.652596, 0.586543, 0.118174, 0.337258, 0.475206, 0.195315, 0.737056, 0.338067, 0.68784, 0.188413, 0.40509, 0.811121, 0.097631, 0.0874579, 0.0331523, 0.366453, 0.561896, 0.59167, 0.405046, 0.52755, 0.795367, 0.0567742, 0.157306, 0.897607, 0.173071, 0.308024, 0.775729, 0.743801, 0.418724, 0.0332972, 0.991023, 0.362019, 0.856297, 0.747852, 0.760166, 0.299158, 0.968973, 0.428056},
{0.359112, 0.122306, 0.676009, 0.775909, 0.257753, 0.319993, 0.206223, 0.24804, 0.801001, 0.593546, 0.253905, 0.776499, 0.385089, 0.309924, 0.745843, 0.917289, 0.325635, 0.526336, 0.193037, 0.721133, 0.372097, 0.937018, 0.0144901, 0.361467, 0.302032, 0.0219939, 0.0632674, 0.141782, 0.594589, 0.345679, 0.533568, 0.181482, 0.0884181, 0.229418, 0.0329591, 0.75153, 0.363339, 0.512515, 0.91832, 0.75601, 0.0623911, 0.0462989, 0.105361, 0.509387, 0.48917, 0.470992, 0.634145, 0.623339, 0.536722, 0.567083},
{0.557805, 0.257449, 0.252011, 0.630395, 0.868083, 0.831177, 0.0966059, 0.897911, 0.0887948, 0.760098, 0.424519, 0.661886, 0.764333, 0.865861, 0.446304, 0.00809177, 0.150265, 0.350639, 0.659097, 0.45879, 0.611685, 0.68889, 0.721698, 0.621184, 0.458237, 0.29202, 0.75154, 0.585667, 0.608185, 0.47416, 0.618801, 0.833529, 0.0845887, 0.195966, 0.356338, 0.855923, 0.727011, 0.494355, 0.426729, 0.979105, 0.244437, 0.485385, 0.193641, 0.689847, 0.3146, 0.89327, 0.0829285, 0.320705, 0.297541, 0.759881},
};

static const std::vector<float> costs = {30.7637, 519.358, 605.71, 263.835, 705.603, 894.981, 437.93, 967.68, 465.914, 151.727, 793.253, 24.665, 622.033, 885.264, 499.343, 510.445, 477.775, 673.099, 710.242, 709.171, 4.72137, 918.071, 473.08, 971.353, 548.818, 189.194, 392.241, 498.259, 366.823, 509.469, 83.2581, 381.841, 136.467, 894.057, 685.306, 716.019, 236.144, 169.092, 946.432, 739.117, 481.043, 970.737, 348.236, 948.128, 887, 145.881, 861.704, 217.661, 111.062, 790.15};

static const std::vector<float> min_impressions = {0.0141121, 0.914545, 0.599482, 0.171782, 0.441881, 0.207062, 0.415992, 0.260484, 0.226657, 0.194749};

//
#endif
