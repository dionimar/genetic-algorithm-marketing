#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 10;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_excl(cons_indep(cons_excl(cons_indep(cons_indep(cons_incl(cons_incl(cons_incl(cons_incl(cons_incl(events[0], events[16]),events[38]),events[15]),events[10]),events[45]),events[44]),events[19]),events[23]),events[17]),events[37]),cons_indep(cons_excl(cons_incl(cons_excl(cons_indep(cons_indep(cons_incl(cons_indep(cons_excl(cons_incl(events[16], events[14]),events[40]),events[10]),events[32]),events[41]),events[31]),events[38]),events[18]),events[24]),events[6]),cons_excl(cons_incl(cons_indep(cons_excl(cons_indep(cons_indep(cons_indep(cons_indep(cons_excl(cons_excl(events[0], events[6]),events[24]),events[39]),events[17]),events[38]),events[11]),events[23]),events[13]),events[18]),events[42]),cons_indep(cons_incl(cons_incl(cons_incl(cons_indep(cons_indep(cons_excl(cons_indep(cons_incl(cons_incl(events[18], events[44]),events[30]),events[17]),events[26]),events[48]),events[10]),events[40]),events[22]),events[7]),events[16]),cons_excl(cons_excl(cons_excl(cons_indep(cons_incl(cons_excl(cons_indep(cons_excl(cons_indep(cons_excl(events[8], events[22]),events[47]),events[20]),events[17]),events[38]),events[31]),events[14]),events[48]),events[28]),events[6]),cons_excl(cons_incl(cons_incl(cons_excl(cons_excl(cons_indep(cons_incl(cons_excl(cons_incl(cons_indep(events[45], events[39]),events[43]),events[48]),events[32]),events[5]),events[34]),events[49]),events[44]),events[2]),events[40]),cons_excl(cons_excl(cons_indep(cons_indep(cons_excl(cons_indep(cons_incl(cons_indep(cons_excl(cons_indep(events[34], events[43]),events[36]),events[28]),events[7]),events[16]),events[1]),events[38]),events[0]),events[30]),events[35]),cons_indep(cons_excl(cons_incl(cons_indep(cons_excl(cons_incl(cons_indep(cons_indep(cons_indep(cons_excl(events[26], events[39]),events[46]),events[20]),events[25]),events[9]),events[3]),events[13]),events[16]),events[0]),events[18]),cons_excl(cons_excl(cons_indep(cons_excl(cons_indep(cons_incl(cons_excl(cons_excl(cons_excl(cons_indep(events[24], events[0]),events[42]),events[28]),events[1]),events[8]),events[41]),events[11]),events[10]),events[23]),events[4]),cons_excl(cons_indep(cons_indep(cons_excl(cons_indep(cons_incl(cons_incl(cons_incl(cons_indep(cons_excl(events[44], events[13]),events[46]),events[32]),events[35]),events[25]),events[33]),events[4]),events[23]),events[19]),events[38])};


static const std::vector< std::vector<float> > prob = {{0.625556, 0.600286, 0.633533, 0.163531, 0.053953, 0.505606, 0.756501, 0.0276498, 0.934249, 0.930838, 0.161594, 0.871346, 0.0432589, 0.126799, 0.741825, 0.81727, 0.562778, 0.888274, 0.549309, 0.702828, 0.145825, 0.746427, 0.263276, 0.131311, 0.195019, 0.509423, 0.342367, 0.418012, 0.717611, 0.732344, 0.636484, 0.95609, 0.280048, 0.847578, 0.851534, 0.312213, 0.0622992, 0.758147, 0.0564746, 0.453989, 0.694538, 0.0155753, 0.00853976, 0.0111227, 0.486796, 0.0979445, 0.384471, 0.784609, 0.732063, 0.762834},
{0.562023, 0.806086, 0.708725, 0.985568, 0.867402, 0.199578, 0.262024, 0.630159, 0.724867, 0.908269, 0.472917, 0.654061, 0.543941, 0.0696525, 0.153193, 0.0310844, 0.297863, 0.129992, 0.485718, 0.654391, 0.496288, 0.586441, 0.654341, 0.303361, 0.00519022, 0.948789, 0.17857, 0.223368, 0.850599, 0.124111, 0.0423613, 0.128131, 0.114156, 0.127223, 0.024977, 0.234668, 0.825706, 0.493769, 0.0178037, 0.10591, 0.241977, 0.509944, 0.95274, 0.761553, 0.921135, 0.690469, 0.846951, 0.765301, 0.557476, 0.941365},
{0.944039, 0.200468, 0.93945, 0.535295, 0.551287, 0.835113, 0.213022, 0.904838, 0.0569703, 0.71841, 0.0464555, 0.933783, 0.625741, 0.200968, 0.683848, 0.150538, 0.809098, 0.528818, 0.327867, 0.994508, 0.514378, 0.370488, 0.363246, 0.825699, 0.111662, 0.380774, 0.0928407, 0.188493, 0.563033, 0.232035, 0.494823, 0.95733, 0.160547, 0.654954, 0.168912, 0.21817, 0.149371, 0.312642, 0.304897, 0.792918, 0.764094, 0.94026, 0.644563, 0.754604, 0.596889, 0.532256, 0.279401, 0.907084, 0.768985, 0.546242},
{0.973256, 0.600299, 0.290917, 0.826295, 0.563972, 0.0443063, 0.603332, 0.979366, 0.225509, 0.884962, 0.0501722, 0.656843, 0.0763336, 0.0578804, 0.544025, 0.819512, 0.341114, 0.194966, 0.27929, 0.603525, 0.848184, 0.216886, 0.0937512, 0.542067, 0.44288, 0.0621439, 0.209266, 0.767807, 0.868882, 0.6761, 0.659077, 0.442988, 0.755688, 0.852023, 0.22406, 0.0043743, 0.655014, 0.460326, 0.546148, 0.658318, 0.293748, 0.335265, 0.896761, 0.551156, 0.290156, 0.978766, 0.0616484, 0.0192533, 0.902216, 0.670365},
{0.681317, 0.835928, 0.104332, 0.285254, 0.511688, 0.296997, 0.789166, 0.497674, 0.101675, 0.137205, 0.0958367, 0.303801, 0.0153341, 0.154347, 0.591723, 0.92331, 0.904284, 0.543006, 0.144315, 0.227792, 0.808731, 0.870212, 0.732494, 0.85106, 0.583645, 0.419759, 0.508761, 0.173581, 0.446868, 0.743478, 0.100412, 0.270367, 0.0291083, 0.678372, 0.490843, 0.82288, 0.957654, 0.337932, 0.537815, 0.369754, 0.845998, 0.0420921, 0.672508, 0.529119, 0.193238, 0.575283, 0.0597669, 0.620126, 0.758061, 0.0921436},
{0.979856, 0.314792, 0.80227, 0.606568, 0.651202, 0.772707, 0.247394, 0.118477, 0.218341, 0.979003, 0.357992, 0.552942, 0.438767, 0.633887, 0.713768, 0.386944, 0.956021, 0.647456, 0.544686, 0.852683, 0.101328, 0.942715, 0.00903492, 0.877702, 0.620594, 0.805598, 0.672662, 0.829282, 0.133775, 0.707351, 0.635546, 0.584756, 0.17907, 0.656954, 0.792468, 0.550741, 0.69121, 0.188076, 0.839702, 0.368238, 0.0588766, 0.689135, 0.684556, 0.0263692, 0.651098, 0.638728, 0.808019, 0.481273, 0.389529, 0.471779},
{0.48855, 0.716899, 0.387108, 0.596723, 0.644215, 0.832491, 0.745875, 0.742531, 0.35152, 0.233042, 0.764647, 0.395159, 0.493282, 0.0456567, 0.324656, 0.717481, 0.34914, 0.545231, 0.566992, 0.345191, 0.517285, 0.783198, 0.367096, 0.19459, 0.10103, 0.777316, 0.29657, 0.275089, 0.213405, 0.277166, 0.15555, 0.828206, 0.511412, 0.416284, 0.789637, 0.27396, 0.847733, 0.493646, 0.495588, 0.682898, 0.999683, 0.609838, 0.737956, 0.286921, 0.740801, 0.43136, 0.584795, 0.526204, 0.193458, 0.495057},
{0.759588, 0.199689, 0.817687, 0.612975, 0.491789, 0.913335, 0.238496, 0.12843, 0.286605, 0.572034, 0.13632, 0.0103225, 0.567661, 0.608168, 0.163957, 0.5773, 0.431688, 0.555087, 0.788463, 0.940377, 0.797635, 0.384344, 0.0582289, 0.272786, 0.564362, 0.212682, 0.954177, 0.471174, 0.65173, 0.893221, 0.9584, 0.736668, 0.991481, 0.582243, 0.67126, 0.276782, 0.406619, 0.744514, 0.699169, 0.117144, 0.233016, 0.368131, 0.876316, 0.159095, 0.459746, 0.619943, 0.723945, 0.119332, 0.693344, 0.689171},
{0.374709, 0.933696, 0.952247, 0.343382, 0.850201, 0.886034, 0.451278, 0.223639, 0.73159, 0.821513, 0.755101, 0.27217, 0.491638, 0.697021, 0.517763, 0.616353, 0.805085, 0.432282, 0.885835, 0.909487, 0.381756, 0.612007, 0.320325, 0.736662, 0.324157, 0.0971982, 0.308788, 0.00279705, 0.302785, 0.0159478, 0.601912, 0.792467, 0.137035, 0.255513, 0.382661, 0.194495, 0.743467, 0.323456, 0.909118, 0.366762, 0.081832, 0.138687, 0.68096, 0.352818, 0.48955, 0.972327, 0.0494623, 0.893369, 0.904216, 0.509013},
{0.764253, 0.779024, 0.530205, 0.722331, 0.114123, 0.862631, 0.632904, 0.706364, 0.500072, 0.0911569, 0.326898, 0.178372, 0.270999, 0.341108, 0.893924, 0.267857, 0.634116, 0.952192, 0.527272, 0.605903, 0.892232, 0.115361, 0.661364, 0.232918, 0.943672, 0.989335, 0.228848, 0.520863, 0.72001, 0.948766, 0.303873, 0.998572, 0.074066, 0.835281, 0.217197, 0.580648, 0.807536, 0.479332, 0.192206, 0.649043, 0.977165, 0.984556, 0.696242, 0.725898, 0.854726, 0.481141, 0.101517, 0.726978, 0.291658, 0.783335},
};

static const std::vector<float> costs = {269.763, 686.332, 39.3011, 757.911, 518.552, 437.453, 135.871, 249.923, 528.906, 368.204, 680.79, 873.832, 929.661, 703.498, 725.843, 720.915, 381.574, 314.875, 221.177, 840.559, 976.665, 306.629, 461.186, 122.992, 391.464, 373.951, 813.033, 623.457, 857.893, 606.106, 307.45, 30.1194, 788.608, 194.436, 727.045, 67.3835, 560.078, 528.894, 993.182, 230.402, 355.767, 831.482, 196.226, 772.477, 492.146, 539.858, 669.565, 750.875, 430.147, 36.432};

static const std::vector<float> min_impressions = {0.159173, 0.226183, 0.0385457, 0.833337, 0.362858, 0.742363, 0.419364, 0.366806, 0.309658, 0.346885};

//
#endif
