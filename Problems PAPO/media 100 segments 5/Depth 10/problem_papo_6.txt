#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 100;
static const int segments = 5;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49), cons_event(50), cons_event(51), cons_event(52), cons_event(53), cons_event(54), cons_event(55), cons_event(56), cons_event(57), cons_event(58), cons_event(59), cons_event(60), cons_event(61), cons_event(62), cons_event(63), cons_event(64), cons_event(65), cons_event(66), cons_event(67), cons_event(68), cons_event(69), cons_event(70), cons_event(71), cons_event(72), cons_event(73), cons_event(74), cons_event(75), cons_event(76), cons_event(77), cons_event(78), cons_event(79), cons_event(80), cons_event(81), cons_event(82), cons_event(83), cons_event(84), cons_event(85), cons_event(86), cons_event(87), cons_event(88), cons_event(89), cons_event(90), cons_event(91), cons_event(92), cons_event(93), cons_event(94), cons_event(95), cons_event(96), cons_event(97), cons_event(98), cons_event(99)};

static const std::vector<Syntax_Tree> restrictions = {cons_indep(cons_indep(cons_incl(cons_incl(cons_incl(cons_indep(cons_incl(cons_excl(cons_incl(cons_excl(events[38], events[47]),events[32]),events[54]),events[66]),events[80]),events[72]),events[74]),events[12]),events[73]),events[43]),cons_indep(cons_incl(cons_incl(cons_incl(cons_excl(cons_excl(cons_indep(cons_excl(cons_indep(cons_excl(events[97], events[96]),events[14]),events[51]),events[21]),events[69]),events[38]),events[12]),events[28]),events[66]),events[10]),cons_indep(cons_indep(cons_indep(cons_indep(cons_excl(cons_incl(cons_excl(cons_indep(cons_incl(cons_excl(events[2], events[99]),events[15]),events[25]),events[38]),events[39]),events[50]),events[22]),events[29]),events[61]),events[83]),cons_indep(cons_incl(cons_indep(cons_indep(cons_incl(cons_excl(cons_excl(cons_incl(cons_excl(cons_indep(events[57], events[52]),events[99]),events[31]),events[59]),events[29]),events[66]),events[55]),events[25]),events[43]),events[77]),cons_incl(cons_indep(cons_excl(cons_excl(cons_excl(cons_excl(cons_indep(cons_excl(cons_indep(cons_incl(events[10], events[62]),events[30]),events[14]),events[8]),events[50]),events[45]),events[31]),events[11]),events[2]),events[98])};


static const std::vector< std::vector<float> > prob = {{0.637912, 0.657073, 0.52826, 0.588239, 0.0854968, 0.0250761, 0.681516, 0.366634, 0.049968, 0.517621, 0.984598, 0.088469, 0.614898, 0.0618813, 0.485188, 0.964338, 0.706581, 0.071181, 0.850259, 0.494634, 0.913736, 0.918814, 0.918387, 0.285271, 0.364962, 0.53018, 0.217851, 0.0426763, 0.951248, 0.148336, 0.531732, 0.678571, 0.309015, 0.419549, 0.0996827, 0.61953, 0.231729, 0.871979, 0.480938, 0.40967, 0.744575, 0.408583, 0.404716, 0.961952, 0.377876, 0.219411, 0.356505, 0.581937, 0.0468908, 0.769673, 0.707006, 0.435228, 0.602942, 0.0960304, 0.753104, 0.352045, 0.571117, 0.0790861, 0.871088, 0.535253, 0.339639, 0.425844, 0.656297, 0.064804, 0.121793, 0.676305, 0.954652, 0.340416, 0.402921, 0.428684, 0.392205, 0.741221, 0.920291, 0.752534, 0.24383, 0.0887908, 0.839822, 0.510481, 0.462557, 0.0368689, 0.770266, 0.331403, 0.666477, 0.500447, 0.526999, 0.715734, 0.625659, 0.392989, 0.624203, 0.0982297, 0.449346, 0.826168, 0.584386, 0.322448, 0.04013, 0.754721, 0.0601301, 0.767299, 0.451652, 0.351097},
{0.75938, 0.852573, 0.730152, 0.843793, 0.159853, 0.621294, 0.195921, 0.576013, 0.272529, 0.111712, 0.977169, 0.775515, 0.454034, 0.926782, 0.297369, 0.231608, 0.751809, 0.746557, 0.063241, 0.0388253, 0.695293, 0.23228, 0.73538, 0.939183, 0.818257, 0.732808, 0.889811, 0.277282, 0.69446, 0.847147, 0.773455, 0.333685, 0.316661, 0.417757, 0.395507, 0.226696, 0.453785, 0.37937, 0.845075, 0.369416, 0.551622, 0.0395707, 0.480411, 0.780516, 0.475463, 0.0249783, 0.154369, 0.28412, 0.456001, 0.0718248, 0.334211, 0.118513, 0.0581155, 0.900591, 0.483652, 0.881844, 0.888237, 0.0685435, 0.0625732, 0.139552, 0.0966545, 0.149487, 0.232223, 0.557622, 0.0710856, 0.545114, 0.82895, 0.633865, 0.344992, 0.226578, 0.584057, 0.956703, 0.703864, 0.3223, 0.102405, 0.0712607, 0.732706, 0.474518, 0.988245, 0.764063, 0.495775, 0.673099, 0.291065, 0.610239, 0.529559, 0.304066, 0.0800875, 0.217141, 0.521257, 0.652665, 0.0161045, 0.472341, 0.500306, 0.422583, 0.781624, 0.85918, 0.722259, 0.367782, 0.557532, 0.802502},
{0.826256, 0.25561, 0.150873, 0.33354, 0.319311, 0.130799, 0.523243, 0.112018, 0.997307, 0.724813, 0.513077, 0.971115, 0.935468, 0.819803, 0.227221, 0.384954, 0.531114, 0.621292, 0.399462, 0.304845, 0.0274093, 0.754321, 0.484392, 0.373307, 0.95532, 0.139952, 0.542688, 0.284885, 0.934145, 0.503751, 0.567844, 0.374156, 0.279173, 0.175364, 0.963933, 0.387627, 0.541105, 0.162897, 0.806018, 0.321707, 0.922729, 0.907455, 0.0696943, 0.363976, 0.223136, 0.725583, 0.160646, 0.103544, 0.641451, 0.517868, 0.711707, 0.118912, 0.489076, 0.314031, 0.876587, 0.863156, 0.101879, 0.46757, 0.466912, 0.407573, 0.287829, 0.250831, 0.373591, 0.62315, 0.141949, 0.574766, 0.715436, 0.722164, 0.0472506, 0.889012, 0.584206, 0.807471, 0.227983, 0.15421, 0.788067, 0.859271, 0.822989, 0.358315, 0.0998543, 0.671967, 0.553299, 0.28289, 0.872643, 0.970077, 0.479614, 0.504941, 0.628606, 0.372554, 0.343736, 0.40254, 0.0695711, 0.288587, 0.648324, 0.201032, 0.34915, 0.389486, 0.143841, 0.117316, 0.717234, 0.757819},
{0.561084, 0.0723586, 0.962233, 0.646464, 0.902054, 0.770684, 0.00999052, 0.292918, 0.470885, 0.202623, 0.951426, 0.6239, 0.261982, 0.423973, 0.612131, 0.878291, 0.121195, 0.576944, 0.41363, 0.150203, 0.843887, 0.576468, 0.973412, 0.987351, 0.546621, 0.310356, 0.922001, 0.717903, 0.422521, 0.429281, 0.992406, 0.948776, 0.923719, 0.299475, 0.521799, 0.877384, 0.747819, 0.0225094, 0.88476, 0.161876, 0.347512, 0.51882, 0.0529795, 0.876786, 0.875063, 0.0107717, 0.678167, 0.522192, 0.975539, 0.673116, 0.903777, 0.367198, 0.190222, 0.371064, 0.621111, 0.00963552, 0.159411, 0.295864, 0.367784, 0.609645, 0.105724, 0.00200302, 0.0896752, 0.361206, 0.280485, 0.923953, 0.215245, 0.732223, 0.55253, 0.533433, 0.563768, 0.291757, 0.769025, 0.958984, 0.88303, 0.743797, 0.82299, 0.263239, 0.58017, 0.846454, 0.906619, 0.295209, 0.0699727, 0.122013, 0.21982, 0.0887945, 0.354564, 0.575125, 0.768434, 0.624433, 0.762979, 0.741724, 0.00216026, 0.435273, 0.76479, 0.14019, 0.692889, 0.208399, 0.415152, 0.166388},
{0.483996, 0.415946, 0.585552, 0.935276, 0.196179, 0.76959, 0.379861, 0.176932, 0.00898047, 0.504692, 0.780084, 0.993494, 0.307161, 0.74546, 0.581007, 0.207795, 0.720321, 0.45623, 0.119859, 0.0542386, 0.966709, 0.687554, 0.12641, 0.940863, 0.28862, 0.815879, 0.422715, 0.378609, 0.0122454, 0.651712, 0.952532, 0.988104, 0.996904, 0.0567278, 0.156682, 0.719767, 0.582979, 0.343693, 0.0982681, 0.485752, 0.536391, 0.0953634, 0.981567, 0.940031, 0.367822, 0.0567572, 0.258733, 0.429927, 0.88087, 0.314204, 0.566303, 0.641131, 0.654207, 0.303399, 0.220975, 0.579975, 0.198815, 0.19488, 0.303927, 0.058328, 0.809074, 0.409163, 0.246219, 0.424143, 0.755222, 0.80212, 0.722774, 0.442662, 0.611238, 0.578584, 0.990337, 0.88125, 0.793437, 0.768739, 0.635033, 0.126276, 0.955243, 0.272667, 0.573852, 0.983874, 0.0232861, 0.79407, 0.631837, 0.606595, 0.0567096, 0.600993, 0.325479, 0.782059, 0.333955, 0.0528825, 0.983607, 0.36191, 0.54971, 0.332534, 0.733126, 0.879608, 0.718877, 0.815697, 0.90959, 0.0789623},
};

static const std::vector<float> costs = {911.761, 967.779, 546.193, 615.022, 885.866, 132.697, 110.585, 516.317, 40.5744, 914.94, 507.952, 578.655, 254.025, 976.755, 52.7135, 270.958, 900.184, 738.723, 676.04, 252.833, 766.753, 178.723, 671.803, 424.989, 508.202, 641.13, 570.52, 667.709, 141.227, 19.1141, 636.976, 931.821, 481.1, 892.361, 189.788, 962.004, 11.7014, 256.516, 750.917, 348.15, 919.257, 769.757, 937.524, 899.105, 124.891, 127.479, 628.737, 900.482, 244.631, 430.798, 431.198, 634.901, 976.221, 84.2922, 678.906, 488.88, 661.844, 663.347, 401.509, 500.033, 409.845, 33.6207, 533.631, 399.91, 131.673, 688.331, 506.613, 276.894, 486.472, 989.307, 746.939, 358.975, 218.912, 235.556, 292.86, 94.3551, 64.5029, 939.723, 671.727, 15.2305, 867.824, 762.359, 848.139, 752.747, 472.724, 125.319, 480.151, 374.226, 443.722, 61.8613, 971.75, 298.255, 226.116, 652.301, 197.422, 571.894, 832.035, 567.871, 479.16, 744.049};

static const std::vector<float> min_impressions = {0.947549, 0.534795, 0.987356, 0.526994, 0.0592819};

//
#endif
