#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 10;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_excl(cons_indep(cons_excl(cons_indep(cons_incl(events[42], events[18]),events[45]),events[35]),events[3]),events[27]),cons_incl(cons_incl(cons_incl(cons_indep(cons_incl(events[37], events[31]),events[28]),events[29]),events[17]),events[24]),cons_incl(cons_excl(cons_indep(cons_incl(cons_excl(events[31], events[18]),events[20]),events[21]),events[42]),events[35]),cons_incl(cons_indep(cons_indep(cons_excl(cons_incl(events[42], events[13]),events[9]),events[34]),events[17]),events[6]),cons_incl(cons_indep(cons_incl(cons_indep(cons_indep(events[33], events[27]),events[32]),events[40]),events[4]),events[34]),cons_incl(cons_incl(cons_indep(cons_incl(cons_excl(events[14], events[45]),events[41]),events[19]),events[15]),events[38]),cons_incl(cons_incl(cons_incl(cons_excl(cons_incl(events[38], events[27]),events[36]),events[4]),events[39]),events[22]),cons_indep(cons_indep(cons_incl(cons_excl(cons_incl(events[46], events[37]),events[28]),events[17]),events[27]),events[45]),cons_excl(cons_excl(cons_incl(cons_incl(cons_excl(events[24], events[23]),events[13]),events[27]),events[26]),events[42]),cons_incl(cons_incl(cons_excl(cons_indep(cons_incl(events[33], events[16]),events[39]),events[8]),events[38]),events[36])};


static const std::vector< std::vector<float> > prob = {{0.328186, 0.551022, 0.604694, 0.975235, 0.937556, 0.114792, 0.573822, 0.250901, 0.987201, 0.715908, 0.596572, 0.31504, 0.233424, 0.197249, 0.862088, 0.0616568, 0.142285, 0.0621703, 0.747493, 0.256993, 0.358911, 0.337083, 0.501246, 0.0354296, 0.486783, 0.869101, 0.801211, 0.500745, 0.324908, 0.537985, 0.757007, 0.83977, 0.129765, 0.449064, 0.303953, 0.681322, 0.270118, 0.155112, 0.718974, 0.742905, 0.852001, 0.76136, 0.693916, 0.0817852, 0.0435501, 0.261015, 0.903549, 0.717481, 0.856293, 0.212846},
{0.84688, 0.499142, 0.67434, 0.533533, 0.741243, 0.404362, 0.496885, 0.131651, 0.0835241, 0.653127, 0.235112, 0.0595588, 0.263532, 0.670497, 0.257245, 0.803593, 0.517042, 0.797226, 0.171965, 0.669187, 0.164109, 0.134035, 0.637809, 0.755478, 0.73262, 0.24452, 0.912486, 0.938607, 0.821777, 0.965122, 0.53852, 0.251214, 0.0950945, 0.749412, 0.242992, 0.0474163, 0.551223, 0.664113, 0.146898, 0.323444, 0.0320121, 0.494181, 0.970785, 0.7328, 0.0667372, 0.657972, 0.695296, 0.998467, 0.479583, 0.0513036},
{0.944699, 0.229691, 0.158694, 0.870345, 0.68508, 0.437451, 0.743131, 0.483, 0.305973, 0.751653, 0.54915, 0.368181, 0.293197, 0.920489, 0.671828, 0.068382, 0.652051, 0.867464, 0.372778, 0.707291, 0.242969, 0.662345, 0.52444, 0.302624, 0.931961, 0.205273, 0.373841, 0.910182, 0.305771, 0.723217, 0.249961, 0.35816, 0.575276, 0.164628, 0.636359, 0.65703, 0.291035, 0.352128, 0.294374, 0.163273, 0.0905752, 0.738311, 0.689578, 0.242614, 0.0444368, 0.819672, 0.479555, 0.0574002, 0.870761, 0.792509},
{0.644522, 0.175296, 0.532904, 0.741898, 0.828845, 0.269928, 0.531219, 0.420908, 0.321709, 0.88466, 0.270621, 0.408779, 0.0719466, 0.00727541, 0.413994, 0.52734, 0.0794564, 0.855068, 0.0952404, 0.355023, 0.901629, 0.481919, 0.649109, 0.399938, 0.0223468, 0.308252, 0.664844, 0.0325553, 0.214854, 0.512269, 0.504802, 0.327075, 0.331686, 0.352795, 0.461201, 0.218582, 0.275052, 0.695561, 0.385391, 0.508287, 0.0632925, 0.0743525, 0.311212, 0.687143, 0.225056, 0.252172, 0.0311386, 0.728369, 0.573007, 0.219826},
{0.597614, 0.731774, 0.470962, 0.538525, 0.360841, 0.414964, 0.0143628, 0.927434, 0.354938, 0.530147, 0.247584, 0.0902781, 0.508029, 0.877767, 0.99084, 0.337951, 0.360419, 0.728329, 0.685052, 0.909545, 0.296, 0.0684831, 0.793846, 0.204958, 0.345904, 0.311099, 0.758796, 0.555718, 0.46434, 0.620374, 0.555585, 0.361265, 0.793551, 0.807389, 0.638365, 0.410334, 0.0135625, 0.426313, 0.200367, 0.44587, 0.455412, 0.741141, 0.0146859, 0.49791, 0.00436752, 0.518669, 0.49816, 0.954205, 0.768127, 0.434772},
{0.458725, 0.906406, 0.642577, 0.952226, 0.179001, 0.819115, 0.356326, 0.848024, 0.0906397, 0.825128, 0.143877, 0.957295, 0.828171, 0.0937135, 0.793296, 0.630044, 0.244943, 0.286533, 0.133217, 0.0195415, 0.229092, 0.984859, 0.229181, 0.373697, 0.59787, 0.719486, 0.83191, 0.218583, 0.575611, 0.178024, 0.913318, 0.123157, 0.168945, 0.345517, 0.0666369, 0.206972, 0.86145, 0.428518, 0.727909, 0.866475, 0.297545, 0.792502, 0.612731, 0.602267, 0.014779, 0.94431, 0.352665, 0.192308, 0.129012, 0.885386},
{0.626165, 0.686856, 0.834352, 0.482222, 0.691498, 0.459188, 0.117715, 0.941242, 0.53393, 0.613941, 0.85415, 0.274076, 0.762107, 0.599277, 0.611099, 0.856273, 0.115528, 0.77619, 0.807398, 0.8425, 0.747295, 0.251794, 0.540767, 0.464081, 0.658448, 0.285848, 0.312936, 0.348991, 0.419416, 0.886619, 0.822397, 0.995226, 0.431513, 0.789341, 0.73682, 0.622475, 0.911976, 0.740413, 0.657258, 0.941286, 0.825976, 0.968962, 0.856686, 0.880158, 0.893673, 0.521244, 0.699834, 0.521211, 0.614813, 0.815168},
{0.366031, 0.559432, 0.76547, 0.146466, 0.871669, 0.963819, 0.157103, 0.858427, 0.826269, 0.160107, 0.75836, 0.632753, 0.110047, 0.0363622, 0.859097, 0.778169, 0.968629, 0.832019, 0.605699, 0.352013, 0.829266, 0.724907, 0.587425, 0.284222, 0.401418, 0.622787, 0.586125, 0.523764, 0.590343, 0.375079, 0.517938, 0.272234, 0.993543, 0.530791, 0.406826, 0.426145, 0.663241, 0.367042, 0.695134, 0.84298, 0.172385, 0.0125256, 0.186149, 0.697558, 0.298896, 0.361844, 0.241831, 0.0577471, 0.774568, 0.668964},
{0.724066, 0.728906, 0.35047, 0.379413, 0.539677, 0.825669, 0.793562, 0.11335, 0.425509, 0.13686, 0.0210775, 0.768926, 0.516913, 0.773715, 0.139994, 0.848152, 0.609768, 0.645793, 0.633732, 0.772126, 0.128173, 0.233382, 0.595926, 0.734535, 0.589467, 0.470685, 0.874488, 0.711359, 0.217207, 0.312845, 0.569052, 0.705676, 0.50983, 0.909972, 0.110113, 0.992344, 0.783961, 0.790773, 0.667654, 0.973819, 0.551669, 0.0373699, 0.403747, 0.0378547, 0.324735, 0.272346, 0.622483, 0.0968916, 0.542061, 0.0588847},
{0.0861062, 0.357418, 0.092462, 0.435813, 0.796984, 0.0359238, 0.0608809, 0.387247, 0.692411, 0.0542704, 0.133906, 0.840676, 0.12036, 0.123353, 0.475789, 0.730257, 0.241082, 0.560591, 0.639663, 0.876336, 0.360333, 0.377934, 0.257662, 0.426129, 0.248888, 0.0215189, 0.460951, 0.185132, 0.792662, 0.735075, 0.690389, 0.379566, 0.0464751, 0.258803, 0.755335, 0.241804, 0.94151, 0.298043, 0.468657, 0.109556, 0.334547, 0.161577, 0.864229, 0.862571, 0.573156, 0.110622, 0.0176819, 0.271992, 0.284544, 0.444496},
};

static const std::vector<float> costs = {919.647, 448.46, 419.239, 191.409, 221.298, 127.774, 496.131, 487.512, 69.182, 961.255, 975.663, 189.81, 84.6238, 47.7384, 708.772, 119.379, 607, 492.16, 748.426, 686.542, 348.025, 127.248, 695.286, 605.272, 728.416, 836.988, 287.295, 858.307, 599.898, 244.531, 296.512, 461.602, 422.297, 915.096, 878.112, 593.41, 782.017, 297.973, 152.764, 638.453, 764.243, 794.48, 109.38, 558.432, 366.41, 330.42, 500.84, 408.757, 382.854, 536.91};

static const std::vector<float> min_impressions = {0.739135, 0.488117, 0.335222, 0.422299, 0.464847, 0.72227, 0.370499, 0.743725, 0.914091, 0.237142};

//
#endif
