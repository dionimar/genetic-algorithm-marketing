#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 5;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_excl(cons_excl(cons_incl(cons_incl(cons_indep(events[6], events[30]),events[40]),events[1]),events[38]),events[0]),cons_indep(cons_indep(cons_incl(cons_incl(cons_excl(events[14], events[44]),events[7]),events[49]),events[42]),events[10]),cons_incl(cons_incl(cons_excl(cons_indep(cons_indep(events[44], events[27]),events[47]),events[36]),events[30]),events[31]),cons_incl(cons_indep(cons_excl(cons_excl(cons_incl(events[41], events[31]),events[9]),events[2]),events[3]),events[15]),cons_incl(cons_incl(cons_incl(cons_indep(cons_incl(events[31], events[44]),events[22]),events[43]),events[19]),events[14])};


static const std::vector< std::vector<float> > prob = {{0.773259, 0.000811263, 0.0536112, 0.193663, 0.699676, 0.250551, 0.191916, 0.170279, 0.942096, 0.894143, 0.392009, 0.891807, 0.851947, 0.425359, 0.605794, 0.0443275, 0.0530966, 0.254223, 0.244462, 0.467716, 0.686289, 0.904135, 0.940601, 0.0889303, 0.22553, 0.171588, 0.47067, 0.177166, 0.743217, 0.267132, 0.215606, 0.281971, 0.896504, 0.288563, 0.786698, 0.412513, 0.984195, 0.773201, 0.0949991, 0.091571, 0.812424, 0.154224, 0.0335647, 0.249771, 0.464661, 0.942531, 0.470556, 0.0405128, 0.809491, 0.629154},
{0.90023, 0.113526, 0.495628, 0.157069, 0.466523, 0.0339858, 0.746622, 0.238826, 0.501753, 0.677873, 0.144967, 0.295134, 0.892203, 0.0115357, 0.0791537, 0.951695, 0.422342, 0.988543, 0.121185, 0.0162611, 0.598833, 0.142854, 0.974846, 0.56035, 0.316987, 0.687262, 0.991861, 0.137655, 0.482133, 0.278412, 0.360442, 0.831118, 0.951242, 0.429115, 0.107723, 0.172352, 0.616269, 0.862564, 0.182844, 0.15415, 0.916537, 0.0955044, 0.415862, 0.136804, 0.0532335, 0.166839, 0.879423, 0.157908, 0.188488, 0.086089},
{0.618558, 0.897297, 0.387785, 0.344733, 0.722069, 0.340333, 0.0369114, 0.115949, 0.145376, 0.473651, 0.812299, 0.984409, 0.569264, 0.0172265, 0.0780132, 0.480492, 0.0312157, 0.218931, 0.738508, 0.932869, 0.722025, 0.925295, 0.531681, 0.985789, 0.982333, 0.841482, 0.747578, 0.524056, 0.232782, 0.832224, 0.747466, 0.811106, 0.973049, 0.810193, 0.748826, 0.965874, 0.157742, 0.169369, 0.468687, 0.998975, 0.796252, 0.044099, 0.301563, 0.167736, 0.716419, 0.922459, 0.00441681, 0.502374, 0.267636, 0.437164},
{0.00102491, 0.913518, 0.179006, 0.956295, 0.10499, 0.653626, 0.843075, 0.94332, 0.309232, 0.873085, 0.318874, 0.280204, 0.441727, 0.275375, 0.125529, 0.760787, 0.444507, 0.411591, 0.0763145, 0.906635, 0.306258, 0.942895, 0.935099, 0.986742, 0.814397, 0.0333329, 0.228002, 0.708405, 0.86575, 0.943637, 0.0555687, 0.653823, 0.345271, 0.227223, 0.904495, 0.134677, 0.744752, 0.990216, 0.719838, 0.710964, 0.108689, 0.241656, 0.292339, 0.720108, 0.854409, 0.128037, 0.744804, 0.87892, 0.0124976, 0.941184},
{0.994377, 0.402024, 0.309108, 0.468294, 0.461825, 0.618786, 0.837375, 0.576252, 0.593281, 0.194908, 0.00652202, 0.701307, 0.609231, 0.593386, 0.999577, 0.226, 0.961174, 0.929403, 0.444918, 0.813872, 0.831279, 0.0832646, 0.805486, 0.237969, 0.731768, 0.425756, 0.110498, 0.923989, 0.810552, 0.0976468, 0.455353, 0.961345, 0.625715, 0.11306, 0.216999, 0.625507, 0.583276, 0.868037, 0.0577178, 0.352689, 0.554285, 0.370702, 0.695998, 0.343971, 0.379752, 0.150673, 0.729428, 0.447673, 0.253779, 0.468635},
};

static const std::vector<float> costs = {996.717, 989.246, 97.4848, 97.4045, 857.919, 707.922, 175.232, 83.3033, 363.873, 179.168, 264.271, 131.731, 625.493, 483.511, 256.529, 46.5326, 610.153, 949.501, 546.114, 9.2942, 775.019, 144.188, 859.439, 597.707, 379.256, 47.71, 596.064, 793.885, 868.993, 18.2309, 629.607, 730.019, 268.961, 964.357, 377.218, 463.367, 245.554, 508.98, 311.089, 504.68, 775.056, 892.024, 384.984, 926.236, 276.246, 881.488, 561.269, 458.351, 253.658, 544.624};

static const std::vector<float> min_impressions = {0.371367, 0.247123, 0.807577, 0.695746, 0.945601};

//
#endif
