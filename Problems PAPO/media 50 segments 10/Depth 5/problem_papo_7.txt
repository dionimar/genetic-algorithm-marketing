#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 10;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_excl(cons_excl(cons_excl(cons_incl(cons_indep(events[5], events[45]),events[1]),events[42]),events[41]),events[4]),cons_incl(cons_excl(cons_indep(cons_indep(cons_indep(events[48], events[18]),events[43]),events[26]),events[36]),events[40]),cons_incl(cons_incl(cons_incl(cons_excl(cons_incl(events[13], events[42]),events[17]),events[19]),events[30]),events[36]),cons_indep(cons_incl(cons_indep(cons_incl(cons_incl(events[3], events[17]),events[35]),events[24]),events[42]),events[11]),cons_indep(cons_excl(cons_excl(cons_excl(cons_excl(events[17], events[0]),events[20]),events[39]),events[36]),events[3]),cons_incl(cons_indep(cons_indep(cons_indep(cons_excl(events[17], events[40]),events[16]),events[5]),events[18]),events[33]),cons_incl(cons_incl(cons_indep(cons_incl(cons_incl(events[39], events[36]),events[28]),events[12]),events[14]),events[30]),cons_excl(cons_indep(cons_indep(cons_excl(cons_incl(events[37], events[38]),events[8]),events[26]),events[2]),events[6]),cons_excl(cons_indep(cons_excl(cons_incl(cons_excl(events[36], events[22]),events[13]),events[3]),events[10]),events[33]),cons_excl(cons_excl(cons_excl(cons_indep(cons_indep(events[21], events[8]),events[32]),events[45]),events[7]),events[40])};


static const std::vector< std::vector<float> > prob = {{0.886299, 0.660737, 0.730466, 0.678607, 0.847082, 0.651272, 0.839329, 0.525396, 0.61988, 0.153165, 0.251195, 0.589163, 0.529043, 0.629452, 0.274678, 0.939562, 0.308964, 0.329793, 0.598561, 0.404952, 0.695156, 0.797652, 0.156693, 0.237613, 0.167213, 0.163733, 0.527471, 0.58856, 0.37309, 0.574577, 0.460302, 0.0205537, 0.870123, 0.538262, 0.160951, 0.33651, 0.499983, 0.907412, 0.698891, 0.535575, 0.4322, 0.759313, 0.819214, 0.633286, 0.585199, 0.256553, 0.194379, 0.597641, 0.94259, 0.612993},
{0.500067, 0.827674, 0.499245, 0.455894, 0.335889, 0.123939, 0.246186, 0.708327, 0.21359, 0.50788, 0.265953, 0.109372, 0.30249, 0.919439, 0.877142, 0.398275, 0.0701699, 0.987572, 0.301808, 0.091587, 0.968013, 0.393984, 0.53066, 0.0108104, 0.246784, 0.731873, 0.937303, 0.401024, 0.535047, 0.66542, 0.254684, 0.751038, 0.325187, 0.0588361, 0.138431, 0.993383, 0.0773385, 0.317231, 0.655976, 0.475388, 0.998251, 0.430753, 0.663405, 0.397511, 0.923704, 0.981051, 0.833432, 0.699102, 0.321746, 0.713474},
{0.111442, 0.516625, 0.680598, 0.364429, 0.379451, 0.158399, 0.456194, 0.660031, 0.559086, 0.365395, 0.564615, 0.368977, 0.196115, 0.534729, 0.855329, 0.511233, 0.191231, 0.961467, 0.772708, 0.572725, 0.290986, 0.817428, 0.792272, 0.73774, 0.495721, 0.245349, 0.92776, 0.921136, 0.402733, 0.561797, 0.868095, 0.365758, 0.129871, 0.0151119, 0.44873, 0.976762, 0.951696, 0.538362, 0.843389, 0.0592952, 0.433876, 0.273781, 0.280886, 0.834398, 0.767339, 0.502496, 0.416195, 0.0295083, 0.615407, 0.372288},
{0.0166082, 0.3019, 0.390364, 0.904119, 0.0146832, 0.591959, 0.602688, 0.618802, 0.678074, 0.8866, 0.317374, 0.498369, 0.204215, 0.417794, 0.349782, 0.268133, 0.11428, 0.849208, 0.412743, 0.0229729, 0.10378, 0.10303, 0.364409, 0.172286, 0.985027, 0.768724, 0.731239, 0.351901, 0.719862, 0.812561, 0.115649, 0.815256, 0.700456, 0.947855, 0.798062, 0.746067, 0.822258, 0.298704, 0.922377, 0.152588, 0.299308, 0.271613, 0.859696, 0.841399, 0.611936, 0.001228, 0.0129581, 0.770017, 0.219754, 0.8129},
{0.471661, 0.183315, 0.507487, 0.52378, 0.411754, 0.664626, 0.852164, 0.261538, 0.713555, 0.0400257, 0.772461, 0.672445, 0.541938, 0.0636754, 0.775726, 0.942291, 0.572179, 0.92127, 0.365574, 0.85441, 0.288432, 0.638226, 0.382507, 0.630695, 0.523291, 0.230505, 0.931854, 0.800597, 0.442751, 0.774138, 0.355941, 0.402955, 0.284001, 0.485963, 0.752297, 0.365702, 0.584128, 0.797354, 0.824805, 0.756498, 0.969617, 0.870023, 0.498428, 0.134393, 0.84243, 0.759302, 0.67818, 0.812952, 0.282008, 0.582599},
{0.862244, 0.59929, 0.132308, 0.0990536, 0.112774, 0.329846, 0.281194, 0.640123, 0.919402, 0.116793, 0.315185, 0.862364, 0.213438, 0.81942, 0.397369, 0.268811, 0.505226, 0.519485, 0.815978, 0.661612, 0.967538, 0.933825, 0.747342, 0.881756, 0.416195, 0.634132, 0.376819, 0.989248, 0.145241, 0.264535, 0.438745, 0.207461, 0.167784, 0.945587, 0.338085, 0.296939, 0.58635, 0.732607, 0.649126, 0.204467, 0.648407, 0.503306, 0.0622792, 0.523937, 0.643205, 0.0471715, 0.230234, 0.654544, 0.761556, 0.644676},
{0.454201, 0.766252, 0.885716, 0.656237, 0.675633, 0.956149, 0.879643, 0.277339, 0.267775, 0.254537, 0.847051, 0.59205, 0.666393, 0.635053, 0.587095, 0.45369, 0.342995, 0.934047, 0.950479, 0.359057, 0.93316, 0.55417, 0.678405, 0.911677, 0.0106682, 0.435822, 0.280787, 0.914743, 0.849896, 0.935189, 0.662399, 0.5948, 0.0114757, 0.418109, 0.267442, 0.382398, 0.135046, 0.315539, 0.105174, 0.372418, 0.52109, 0.50165, 0.425552, 0.929608, 0.82921, 0.469274, 0.314195, 0.231719, 0.390373, 0.868819},
{0.370773, 0.424332, 0.703666, 0.0735849, 0.425214, 0.464577, 0.291803, 0.72609, 0.654943, 0.172699, 0.436199, 0.911183, 0.0958446, 0.190373, 0.597385, 0.445065, 0.619801, 0.00563719, 0.91263, 0.414108, 0.424251, 0.485676, 0.632413, 0.912344, 0.631542, 0.377404, 0.484314, 0.864039, 0.951779, 0.839818, 0.640511, 0.868652, 0.268072, 0.593037, 0.67944, 0.444568, 0.970868, 0.344062, 0.567284, 0.560434, 0.139348, 0.973025, 0.00921943, 0.63015, 0.204897, 0.218005, 0.150008, 0.327073, 0.952025, 0.887127},
{0.240118, 0.207728, 0.0204442, 0.296187, 0.943394, 0.403397, 0.988758, 0.469387, 0.610392, 0.722774, 0.455444, 0.674052, 0.785267, 0.0858039, 0.49075, 0.178274, 0.0855931, 0.810174, 0.523417, 0.840872, 0.50184, 0.698826, 0.247598, 0.637531, 0.747768, 0.999905, 0.581617, 0.620371, 0.340357, 0.498902, 0.267776, 0.432439, 0.646205, 0.321944, 0.247369, 0.509086, 0.281934, 0.587842, 0.321463, 0.551269, 0.77349, 0.251605, 0.790795, 0.714181, 0.601768, 0.370635, 0.659922, 0.0534339, 0.146067, 0.612025},
{0.534452, 0.276599, 0.100926, 0.00876626, 0.920092, 0.865701, 0.992279, 0.446617, 0.995101, 0.64752, 0.848278, 0.230877, 0.263729, 0.985102, 0.579157, 0.969104, 0.153753, 0.207987, 0.0378727, 0.34713, 0.893045, 0.948409, 0.456941, 0.342853, 0.738347, 0.804518, 0.2944, 0.442876, 0.602555, 0.258444, 0.890502, 0.900512, 0.391743, 0.361084, 0.837337, 0.428879, 0.901311, 0.157801, 0.108297, 0.586838, 0.0767647, 0.553159, 0.343588, 0.900146, 0.426275, 0.539736, 0.993627, 0.112799, 0.571107, 0.608636},
};

static const std::vector<float> costs = {399.844, 395.612, 632.167, 457.892, 420.525, 176.05, 615.436, 396.096, 388.064, 821.811, 799.275, 903.732, 826.041, 212.095, 876.305, 183.94, 834.937, 70.0568, 944.993, 94.8693, 756.652, 363.772, 95.4548, 724.048, 645.494, 548.539, 350.107, 792.541, 157.284, 35.702, 760.298, 742.875, 349.421, 841.575, 23.0878, 373.19, 868.359, 206.683, 590.462, 554.158, 217.843, 919.622, 832.554, 302.172, 210.919, 809.535, 989.437, 862.851, 557.237, 866.419};

static const std::vector<float> min_impressions = {0.684803, 0.204275, 0.374742, 0.734933, 0.1377, 0.710314, 0.124824, 0.351031, 0.273921, 0.0307385};

//
#endif
