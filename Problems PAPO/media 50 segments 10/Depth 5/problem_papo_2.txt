#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 10;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_incl(cons_indep(cons_excl(cons_excl(cons_incl(events[0], events[39]),events[40]),events[2]),events[25]),events[48]),cons_excl(cons_incl(cons_excl(cons_excl(cons_incl(events[37], events[9]),events[36]),events[42]),events[30]),events[27]),cons_indep(cons_incl(cons_incl(cons_indep(cons_incl(events[34], events[2]),events[32]),events[7]),events[9]),events[6]),cons_excl(cons_excl(cons_excl(cons_incl(cons_indep(events[7], events[17]),events[9]),events[32]),events[12]),events[15]),cons_indep(cons_indep(cons_excl(cons_incl(cons_excl(events[19], events[18]),events[13]),events[34]),events[49]),events[44]),cons_incl(cons_indep(cons_indep(cons_indep(cons_indep(events[1], events[44]),events[19]),events[43]),events[48]),events[33]),cons_indep(cons_excl(cons_indep(cons_excl(cons_indep(events[45], events[18]),events[22]),events[49]),events[39]),events[43]),cons_incl(cons_indep(cons_indep(cons_incl(cons_indep(events[6], events[2]),events[27]),events[18]),events[13]),events[23]),cons_incl(cons_indep(cons_excl(cons_indep(cons_incl(events[25], events[33]),events[14]),events[49]),events[17]),events[45]),cons_incl(cons_indep(cons_indep(cons_excl(cons_incl(events[36], events[20]),events[25]),events[38]),events[31]),events[22])};


static const std::vector< std::vector<float> > prob = {{0.325862, 0.105391, 0.0366213, 0.150959, 0.434394, 0.0293658, 0.323362, 0.464716, 0.766041, 0.903159, 0.266633, 0.041159, 0.497515, 0.231232, 0.317029, 0.231565, 0.936472, 0.703438, 0.855909, 0.143302, 0.0264052, 0.586034, 0.024451, 0.139187, 0.30489, 0.0172351, 0.118836, 0.354664, 0.847234, 0.299837, 0.549359, 0.0647385, 0.446743, 0.266023, 0.187418, 0.54529, 0.320336, 0.104401, 0.973572, 0.0290218, 0.0169531, 0.100838, 0.806237, 0.0414822, 0.52484, 0.715139, 0.415845, 0.970243, 0.817615, 0.769285},
{0.950949, 0.672281, 0.930148, 0.751186, 0.274254, 0.5243, 0.254681, 0.198862, 0.801147, 0.714276, 0.629294, 0.621518, 0.994075, 0.173584, 0.983506, 0.935585, 0.753252, 0.26764, 0.676179, 0.348251, 0.92143, 0.705572, 0.388364, 0.334573, 0.69611, 0.759506, 0.210668, 0.00632106, 0.624063, 0.454772, 0.670678, 0.50434, 0.26661, 0.360678, 0.893778, 0.120765, 0.952776, 0.263718, 0.00142973, 0.225706, 0.827312, 0.354982, 0.928388, 0.204994, 0.227499, 0.917533, 0.752541, 0.988587, 0.0246442, 0.447508},
{0.728088, 0.85127, 0.300454, 0.232359, 0.0321451, 0.976174, 0.694576, 0.989732, 0.451902, 0.882784, 0.011915, 0.989193, 0.0588832, 0.781781, 0.981734, 0.774381, 0.84797, 0.231186, 0.805653, 0.801191, 0.0215643, 0.370759, 0.39112, 0.41499, 0.233235, 0.72911, 0.853102, 0.498695, 0.840705, 0.173872, 0.332469, 0.925338, 0.854033, 0.157328, 0.770996, 0.440468, 0.393255, 0.0958897, 0.579255, 0.52092, 0.905357, 0.770769, 0.986575, 0.499515, 0.450347, 0.581426, 0.779909, 0.94346, 0.243624, 0.761005},
{0.538413, 0.184259, 0.673665, 0.524891, 0.706302, 0.714811, 0.284, 0.416374, 0.546885, 0.466135, 0.449528, 0.199782, 0.916103, 0.653765, 0.632299, 0.853702, 0.329081, 0.79486, 0.0342459, 0.028498, 0.149207, 0.882207, 0.862949, 0.0449646, 0.282019, 0.0635389, 0.195728, 0.38705, 0.0833312, 0.553831, 0.561151, 0.877826, 0.155122, 0.136061, 0.0215164, 0.0826421, 0.300106, 0.140158, 0.857839, 0.366743, 0.990622, 0.149056, 0.322537, 0.0958181, 8.95021e05, 0.874995, 0.836849, 0.23709, 0.255116, 0.500174},
{0.796362, 0.695196, 0.756676, 0.136014, 0.713913, 0.964811, 0.807401, 0.80218, 0.601715, 0.377651, 0.177473, 0.997772, 0.900793, 0.170263, 0.479434, 0.682235, 0.263311, 0.283427, 0.661836, 0.370969, 0.157852, 0.495619, 0.143004, 0.737985, 0.494353, 0.944576, 0.718457, 0.775241, 0.176184, 0.417339, 0.105415, 0.766021, 0.91588, 0.989232, 0.0834738, 0.291743, 0.468882, 0.604644, 0.803472, 0.98782, 0.951942, 0.620918, 0.473692, 0.547102, 0.387462, 0.696047, 0.396373, 0.529958, 0.465067, 0.998483},
{0.425129, 0.701787, 0.944356, 0.0296782, 0.63036, 0.198762, 0.660941, 0.369043, 0.610672, 0.97869, 0.540847, 0.191999, 0.188385, 0.573018, 0.558938, 0.635148, 0.520407, 0.686542, 0.678056, 0.656609, 0.846017, 0.513134, 0.2231, 0.598721, 0.315342, 0.610274, 0.45386, 0.620628, 0.381837, 0.00933682, 0.146251, 0.826022, 0.726153, 0.774914, 0.792403, 0.853994, 0.465176, 0.632516, 0.0261157, 0.128042, 0.733349, 0.16484, 0.3272, 0.739239, 0.526607, 0.649789, 0.392769, 0.13808, 0.0261809, 0.0391524},
{0.710174, 0.158787, 0.842914, 0.697908, 0.95053, 0.469707, 0.774182, 0.00044615, 0.550108, 0.773823, 0.866596, 0.279277, 0.162008, 0.176853, 0.655734, 0.581424, 0.286031, 0.746274, 0.887832, 0.00332547, 0.776993, 0.496454, 0.413695, 0.573856, 0.159547, 0.53176, 0.835323, 0.977341, 0.47546, 0.481821, 0.174508, 0.858756, 0.734013, 0.909451, 0.0184211, 0.155522, 0.864103, 0.0213313, 0.0669649, 0.450756, 0.939034, 0.152128, 0.99225, 0.0717479, 0.133076, 0.8564, 0.524894, 0.504188, 0.246374, 0.0349507},
{0.288816, 0.430719, 0.799956, 0.150736, 0.182818, 0.219652, 0.0230322, 0.641543, 0.592577, 0.402018, 0.408594, 0.784064, 0.317711, 0.594619, 0.15782, 0.179724, 0.566034, 0.179539, 0.948314, 0.545734, 0.696398, 0.631877, 0.894235, 0.819374, 0.612952, 0.814807, 0.340229, 0.520859, 0.138051, 0.673474, 0.883061, 0.741755, 0.818105, 0.222588, 0.86506, 0.759727, 0.512468, 0.508045, 0.818438, 0.847837, 0.779706, 0.729029, 0.813257, 0.0115224, 0.610532, 0.604652, 0.200833, 0.606563, 0.0708378, 0.969672},
{0.222748, 0.728118, 0.0932363, 0.292851, 0.95895, 0.0204856, 0.872295, 0.207792, 0.997205, 0.575966, 0.5211, 0.839141, 0.157132, 0.580987, 0.289836, 0.376682, 0.302815, 0.778903, 0.227886, 0.89217, 0.469853, 0.305321, 0.844922, 0.358226, 0.924907, 0.9641, 0.463446, 0.884571, 0.532906, 0.0573881, 0.750682, 0.0111771, 0.233376, 0.886661, 0.967895, 0.00323101, 0.548879, 0.356162, 0.0440499, 0.845266, 0.589789, 0.976601, 0.039388, 0.43506, 0.855788, 0.255904, 0.765967, 0.878815, 0.296944, 0.022115},
{0.0409255, 0.666505, 0.958357, 0.00156405, 0.551857, 0.42016, 0.359976, 0.577605, 0.375536, 0.225507, 0.476642, 0.615057, 0.569998, 0.0995427, 0.569736, 0.197649, 0.0708274, 0.615507, 0.449566, 0.120525, 0.563919, 0.886038, 0.529872, 0.0411635, 0.36782, 0.607219, 0.603674, 0.327898, 0.889988, 0.303712, 0.0560528, 0.422554, 0.283009, 0.283597, 0.32088, 0.372997, 0.078304, 0.469271, 0.370142, 0.759081, 0.298386, 0.666013, 0.869913, 0.53298, 0.902018, 0.634113, 0.281229, 0.316422, 0.573625, 0.954358},
};

static const std::vector<float> costs = {68.7824, 934.812, 129.244, 427.816, 736.026, 311.798, 133.629, 905.526, 405.322, 951.511, 57.8426, 521.93, 969.916, 83.8364, 910.391, 676.591, 7.85753, 238.795, 872.094, 668.668, 991.635, 607.921, 889.201, 347.196, 570.172, 217.632, 132.965, 189.099, 91.3321, 290.05, 918.104, 858.395, 464.28, 853.819, 708.309, 707.072, 11.0913, 180.644, 584.674, 62.7716, 209.307, 251.563, 9.68486, 807.987, 923.713, 668.831, 686.181, 682.354, 438.23, 107.827};

static const std::vector<float> min_impressions = {0.379263, 0.00151045, 0.582632, 0.928077, 0.78235, 0.658435, 0.602438, 0.594063, 0.0507765, 0.331694};

//
#endif
