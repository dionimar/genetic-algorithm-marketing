#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 100;
static const int segments = 5;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49), cons_event(50), cons_event(51), cons_event(52), cons_event(53), cons_event(54), cons_event(55), cons_event(56), cons_event(57), cons_event(58), cons_event(59), cons_event(60), cons_event(61), cons_event(62), cons_event(63), cons_event(64), cons_event(65), cons_event(66), cons_event(67), cons_event(68), cons_event(69), cons_event(70), cons_event(71), cons_event(72), cons_event(73), cons_event(74), cons_event(75), cons_event(76), cons_event(77), cons_event(78), cons_event(79), cons_event(80), cons_event(81), cons_event(82), cons_event(83), cons_event(84), cons_event(85), cons_event(86), cons_event(87), cons_event(88), cons_event(89), cons_event(90), cons_event(91), cons_event(92), cons_event(93), cons_event(94), cons_event(95), cons_event(96), cons_event(97), cons_event(98), cons_event(99)};

static const std::vector<Syntax_Tree> restrictions = {cons_indep(cons_excl(cons_excl(cons_excl(cons_indep(cons_indep(cons_incl(cons_incl(cons_excl(cons_indep(events[41], events[55]),events[31]),events[25]),events[58]),events[86]),events[66]),events[12]),events[4]),events[51]),events[11]),cons_excl(cons_excl(cons_indep(cons_excl(cons_indep(cons_excl(cons_incl(cons_excl(cons_indep(cons_incl(events[55], events[90]),events[38]),events[56]),events[29]),events[81]),events[34]),events[64]),events[48]),events[67]),events[0]),cons_incl(cons_excl(cons_indep(cons_indep(cons_incl(cons_indep(cons_indep(cons_indep(cons_incl(cons_indep(events[87], events[12]),events[75]),events[62]),events[11]),events[92]),events[64]),events[90]),events[61]),events[78]),events[39]),cons_incl(cons_incl(cons_indep(cons_incl(cons_excl(cons_excl(cons_incl(cons_indep(cons_excl(cons_excl(events[2], events[25]),events[26]),events[92]),events[61]),events[98]),events[70]),events[32]),events[86]),events[14]),events[81]),cons_excl(cons_excl(cons_incl(cons_indep(cons_indep(cons_indep(cons_indep(cons_incl(cons_incl(cons_indep(events[96], events[44]),events[22]),events[56]),events[54]),events[91]),events[58]),events[93]),events[11]),events[27]),events[4])};


static const std::vector< std::vector<float> > prob = {{0.583247, 0.799571, 0.782782, 0.270356, 0.304893, 0.48393, 0.851469, 0.347002, 0.360434, 0.00945684, 0.248909, 0.772058, 0.250286, 0.601614, 0.761361, 0.0708535, 0.195672, 0.714938, 0.709089, 0.907186, 0.449917, 0.517313, 0.197207, 0.413144, 0.56642, 0.087351, 0.613879, 0.37706, 0.93934, 0.347523, 0.193321, 0.0914129, 0.796088, 0.907979, 0.397786, 0.505888, 0.672244, 0.461836, 0.327417, 0.0294758, 0.190138, 0.469909, 0.105306, 0.26745, 0.905388, 0.324214, 0.947582, 0.359825, 0.911551, 0.0437767, 0.211788, 0.456464, 0.553692, 0.492112, 0.014338, 0.163583, 0.241264, 0.443361, 0.220729, 0.225722, 0.927498, 0.766108, 0.703603, 0.493475, 0.912749, 0.934306, 0.254737, 0.220889, 0.319771, 0.782712, 0.223326, 0.454941, 0.459474, 0.376098, 0.151936, 0.576196, 0.160661, 0.637298, 0.0202312, 0.142021, 0.807544, 0.61658, 0.181565, 0.758874, 0.158183, 0.477733, 0.67879, 0.791825, 0.704524, 0.150027, 0.742843, 0.368789, 0.644927, 0.55706, 0.313101, 0.0246351, 0.405575, 0.497506, 0.0298538, 0.112627},
{0.170676, 0.387685, 0.178021, 0.655131, 0.112752, 0.464545, 0.631967, 0.72566, 0.625347, 0.288545, 0.425993, 0.547099, 0.155309, 0.167726, 0.605046, 0.355302, 0.629943, 0.626934, 0.262418, 0.10386, 0.727675, 0.499176, 0.179185, 0.918122, 0.199414, 0.0543374, 0.193726, 0.472987, 0.821017, 0.780988, 0.167809, 0.87731, 0.552756, 0.128811, 0.758002, 0.384178, 0.277658, 0.689484, 0.738087, 0.218122, 0.455357, 0.808976, 0.129164, 0.167002, 0.903136, 0.0158519, 0.995526, 0.764948, 0.635411, 0.155379, 0.19287, 0.0335272, 0.451026, 0.548061, 0.50054, 0.936781, 0.5131, 0.0257399, 0.648031, 0.592979, 0.0891209, 0.105091, 0.608281, 0.85575, 0.553938, 0.00827376, 0.676466, 0.369415, 0.308914, 0.189126, 0.319715, 0.51457, 0.963081, 0.900688, 0.700776, 0.431867, 0.944897, 0.902475, 0.781769, 0.597324, 0.127305, 0.535813, 0.229173, 0.824459, 0.556643, 0.900513, 0.826288, 0.862051, 0.802281, 0.540383, 0.079411, 0.0079095, 0.195424, 0.0492836, 0.91952, 0.904267, 0.46697, 0.417694, 0.134241, 0.409745},
{0.969533, 0.626396, 0.590413, 0.253885, 0.166027, 0.0555034, 0.758826, 0.834713, 0.402218, 0.409747, 0.145052, 0.487968, 0.405504, 0.831587, 0.605211, 0.235153, 0.409592, 0.481828, 0.181553, 0.05115, 0.381063, 0.0141221, 0.721346, 0.498461, 0.602669, 0.116334, 0.403246, 0.838034, 0.436778, 0.525002, 0.994283, 0.308591, 0.591526, 0.148062, 0.957019, 0.707545, 0.0225924, 0.828562, 0.75751, 0.33303, 0.71184, 0.27963, 0.537176, 0.467363, 0.406292, 0.142777, 0.530008, 0.929334, 0.456204, 0.965281, 0.971709, 0.931898, 0.94232, 0.543357, 0.163695, 0.177543, 0.831591, 0.699739, 0.604768, 0.649788, 0.0331911, 0.846024, 0.525368, 0.875685, 0.589183, 0.181927, 0.920657, 0.401112, 0.081635, 0.765411, 0.978188, 0.231253, 0.199145, 0.28407, 0.0521651, 0.734278, 0.661152, 0.822689, 0.735017, 0.381423, 0.728458, 0.909321, 0.429228, 0.457018, 0.203737, 0.581003, 0.998292, 0.154756, 0.305487, 0.542845, 0.0721533, 0.429448, 0.880273, 0.896563, 0.321943, 0.18713, 0.082294, 0.242765, 0.119463, 0.503979},
{0.744999, 0.623141, 0.202686, 0.287736, 0.823665, 0.727514, 0.575343, 0.267089, 0.925298, 0.4232, 0.402024, 0.992281, 0.702276, 0.935278, 0.294084, 0.426947, 0.732839, 0.667435, 0.254591, 0.628055, 0.875546, 0.965861, 0.46639, 0.567742, 0.435622, 0.171107, 0.0446911, 0.507443, 0.455377, 0.671502, 0.60636, 0.280456, 0.160894, 0.712012, 0.0407427, 0.91543, 0.881057, 0.354167, 0.451452, 0.575819, 0.970198, 0.323555, 0.435594, 0.77546, 0.219611, 0.498571, 0.89527, 0.992577, 0.686274, 0.0268837, 0.604371, 0.930086, 0.440152, 0.963337, 0.269587, 0.689587, 0.105084, 0.727868, 0.616168, 0.768194, 0.894574, 0.543831, 0.944444, 0.553401, 0.952876, 0.403765, 0.162898, 0.665757, 0.89358, 0.403613, 0.0274046, 0.628749, 0.834205, 0.30372, 0.983526, 0.205242, 0.647919, 0.691139, 0.0950056, 0.930274, 0.151887, 0.991583, 0.280432, 0.525588, 0.928758, 0.209087, 0.501921, 0.396756, 0.134266, 0.556222, 0.604899, 0.655674, 0.713129, 0.725989, 0.99429, 0.483526, 0.236943, 0.725762, 0.128903, 0.719132},
{0.611986, 0.579794, 0.268138, 0.160547, 0.0018547, 0.320259, 0.947099, 0.531268, 0.63573, 0.307695, 0.667152, 0.782529, 0.84876, 0.751622, 0.714059, 0.641289, 0.046537, 0.555171, 0.239894, 0.667123, 0.0335462, 0.779572, 0.350299, 0.128592, 0.612177, 0.0171177, 0.613507, 0.76542, 0.933109, 0.16877, 0.55467, 0.309495, 0.704308, 0.0679202, 0.795519, 0.355498, 0.762063, 0.29165, 0.106999, 0.739784, 0.416159, 0.742063, 0.878907, 0.599553, 0.594295, 0.966866, 0.309047, 0.229331, 0.315769, 0.449587, 0.332594, 0.65696, 0.698464, 0.448168, 0.309562, 0.121735, 0.22126, 0.0290584, 0.58535, 0.0759605, 0.977746, 0.547379, 0.527708, 0.96092, 0.88151, 0.210209, 0.103081, 0.725053, 0.0433663, 0.315655, 0.08729, 0.335887, 0.807035, 0.562491, 0.467481, 0.360445, 0.569097, 0.643626, 0.342021, 0.954363, 0.473821, 0.557747, 0.396142, 0.336482, 0.196478, 0.33574, 0.189092, 0.502964, 0.388435, 0.655663, 0.424362, 0.934479, 0.488225, 0.405136, 0.162413, 0.21957, 0.687913, 0.382363, 0.669636, 0.14936},
};

static const std::vector<float> costs = {93.365, 808.687, 669.274, 770.74, 339.512, 766.424, 669.221, 35.8669, 143.69, 50.2005, 219.978, 225.171, 869.357, 881.113, 667.184, 836.307, 182.148, 296.354, 540.224, 388.906, 647.34, 241.569, 945.87, 723.927, 492.427, 753.031, 532.583, 31.0819, 514.652, 821.303, 434.224, 305.192, 252.453, 512.595, 688.082, 673.286, 67.973, 753.652, 175.794, 38.306, 846.051, 636.441, 966.968, 38.862, 807.911, 948.781, 968.828, 992.206, 554.007, 410.844, 250.429, 223.6, 845.144, 196.512, 858.498, 34.8372, 952.182, 552.611, 439.872, 943.023, 369.309, 531.104, 395.306, 110.177, 796.161, 766.299, 683.802, 664.919, 137.033, 550.89, 163.093, 265.911, 538.787, 965.338, 42.2643, 907.646, 27.6529, 642.737, 416.11, 461.04, 622.264, 790.198, 718.305, 529.934, 124.683, 520.835, 370.166, 66.1842, 757.334, 807.427, 54.9801, 789.593, 383.998, 579.798, 820.753, 738.206, 574.673, 820.514, 522.288, 421.891};

static const std::vector<float> min_impressions = {0.930733, 0.594284, 0.258661, 0.989393, 0.566139};

//
#endif
