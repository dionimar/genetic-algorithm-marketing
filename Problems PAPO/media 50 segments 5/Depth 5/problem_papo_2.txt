#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 5;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_indep(cons_excl(cons_excl(cons_indep(cons_incl(events[0], events[22]),events[4]),events[23]),events[35]),events[5]),cons_indep(cons_excl(cons_indep(cons_excl(cons_incl(events[23], events[16]),events[15]),events[39]),events[20]),events[3]),cons_excl(cons_excl(cons_excl(cons_indep(cons_excl(events[20], events[26]),events[29]),events[6]),events[16]),events[45]),cons_indep(cons_incl(cons_indep(cons_indep(cons_indep(events[22], events[3]),events[23]),events[19]),events[38]),events[2]),cons_indep(cons_incl(cons_indep(cons_excl(cons_indep(events[7], events[15]),events[13]),events[48]),events[26]),events[36])};


static const std::vector< std::vector<float> > prob = {{0.53473, 0.259261, 0.0866382, 0.95343, 0.0111063, 0.271386, 0.203829, 0.50784, 0.238205, 0.901246, 0.542285, 0.393055, 0.780726, 0.710599, 0.797487, 0.9953, 0.532607, 0.786208, 0.0754306, 0.685381, 0.914985, 0.579123, 0.336993, 0.870286, 0.914253, 0.265767, 0.12593, 0.967215, 0.962223, 0.2444, 0.287851, 0.533551, 0.193644, 0.7552, 0.227372, 0.585876, 0.0955665, 0.382648, 0.632704, 0.9793, 0.0975149, 0.803415, 0.438535, 0.470985, 0.613915, 0.960655, 0.0983902, 0.0902815, 0.193498, 0.24819},
{0.58654, 0.462552, 0.588628, 0.0547588, 0.598765, 0.736592, 0.431705, 0.433208, 0.809886, 0.859393, 0.131086, 0.515067, 0.502026, 0.531935, 0.216759, 0.745808, 0.411621, 0.846412, 0.572481, 0.0463313, 0.038343, 0.216033, 0.458658, 0.142073, 0.930712, 0.563503, 0.0199522, 0.685279, 0.22688, 0.76564, 0.605874, 0.657746, 0.775322, 0.843965, 0.490263, 0.606221, 0.0719612, 0.207444, 0.510369, 0.137365, 0.222848, 0.351627, 0.965829, 0.451663, 0.103528, 0.0042599, 0.965269, 0.404396, 0.684268, 0.219535},
{0.234481, 0.840383, 0.219559, 0.990885, 0.747201, 0.237226, 0.0751155, 0.898669, 0.379231, 0.148571, 0.88106, 0.304231, 0.862628, 0.794948, 0.656075, 0.346221, 0.556627, 0.30485, 0.94934, 0.518833, 0.186654, 0.480477, 0.315524, 0.52945, 0.308771, 0.891343, 0.866341, 0.8766, 0.965753, 0.769719, 0.192019, 0.474742, 0.412982, 0.834775, 0.883747, 0.944915, 0.8869, 0.147968, 0.345642, 0.458842, 0.203469, 0.0899034, 0.255589, 0.241419, 0.599659, 0.502404, 0.789193, 0.232918, 0.876761, 0.965042},
{0.743819, 0.46033, 0.56749, 0.0389021, 0.00577829, 0.243617, 0.931332, 0.616467, 0.853694, 0.310678, 0.288522, 0.939242, 0.616055, 0.168992, 0.87214, 0.735631, 0.752954, 0.670704, 0.539482, 0.417277, 0.893804, 0.796868, 0.430268, 0.148888, 0.318096, 0.784982, 0.193177, 0.925931, 0.153489, 0.384112, 0.113148, 0.911931, 0.52513, 0.949123, 0.304351, 0.500324, 0.849458, 0.70168, 0.320322, 0.209288, 0.227346, 0.893269, 0.557954, 0.570655, 0.599353, 0.506679, 0.754824, 0.971158, 0.903145, 0.69097},
{0.434892, 0.112117, 0.4777, 0.998185, 0.22642, 0.805793, 0.100096, 0.797094, 0.382589, 0.380638, 0.931355, 0.480831, 0.74781, 0.207181, 0.683221, 0.967361, 0.275892, 0.231327, 0.330217, 0.176603, 0.522989, 0.870991, 0.0315117, 0.94172, 0.634598, 0.215131, 0.989409, 0.471649, 0.791175, 0.390197, 0.194248, 0.597261, 0.161494, 0.532732, 0.822199, 0.987026, 0.109621, 0.600667, 0.133928, 0.0474329, 0.702429, 0.666812, 0.79802, 0.602774, 0.52889, 0.579626, 0.261096, 0.228686, 0.732275, 0.0733028},
};

static const std::vector<float> costs = {766.63, 959.307, 417.861, 15.8068, 781.109, 670.471, 714.025, 657.742, 495.525, 257.424, 62.7154, 416.539, 914.366, 221.759, 858.708, 583.778, 559.999, 715.428, 229.36, 852.025, 758.363, 817.762, 793.922, 836.385, 234.347, 434.025, 631.311, 532.886, 410.549, 916.039, 990.228, 446.932, 169.289, 713.554, 766.708, 271.7, 15.1141, 968.654, 431.382, 211.8, 143.135, 17.0854, 229.899, 20.177, 699.744, 759.204, 508.149, 537.899, 930.095, 693.272};

static const std::vector<float> min_impressions = {0.413696, 0.404823, 0.992347, 0.297128, 0.439096};

//
#endif
