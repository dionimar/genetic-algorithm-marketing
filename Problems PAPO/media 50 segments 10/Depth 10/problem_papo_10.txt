#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 10;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_indep(cons_excl(cons_indep(cons_excl(cons_incl(cons_indep(cons_incl(cons_indep(cons_excl(cons_excl(events[27], events[23]),events[1]),events[13]),events[21]),events[29]),events[28]),events[11]),events[37]),events[35]),events[46]),cons_incl(cons_indep(cons_indep(cons_excl(cons_excl(cons_indep(cons_incl(cons_indep(cons_excl(cons_excl(events[40], events[15]),events[44]),events[0]),events[37]),events[10]),events[33]),events[30]),events[18]),events[25]),events[1]),cons_excl(cons_excl(cons_incl(cons_indep(cons_incl(cons_excl(cons_indep(cons_indep(cons_excl(cons_excl(events[31], events[36]),events[3]),events[20]),events[38]),events[45]),events[24]),events[30]),events[7]),events[22]),events[40]),cons_indep(cons_incl(cons_indep(cons_indep(cons_indep(cons_indep(cons_incl(cons_excl(cons_incl(cons_excl(events[4], events[6]),events[1]),events[25]),events[10]),events[0]),events[38]),events[42]),events[39]),events[46]),events[3]),cons_indep(cons_indep(cons_excl(cons_incl(cons_excl(cons_incl(cons_indep(cons_indep(cons_incl(cons_indep(events[36], events[12]),events[43]),events[9]),events[7]),events[32]),events[28]),events[20]),events[26]),events[4]),events[11]),cons_excl(cons_excl(cons_indep(cons_incl(cons_indep(cons_incl(cons_indep(cons_incl(cons_excl(cons_indep(events[32], events[45]),events[28]),events[31]),events[2]),events[36]),events[0]),events[10]),events[29]),events[8]),events[38]),cons_indep(cons_excl(cons_excl(cons_indep(cons_excl(cons_incl(cons_excl(cons_incl(cons_excl(cons_excl(events[23], events[20]),events[39]),events[33]),events[42]),events[10]),events[6]),events[30]),events[22]),events[47]),events[11]),cons_incl(cons_incl(cons_indep(cons_excl(cons_incl(cons_indep(cons_indep(cons_incl(cons_incl(cons_incl(events[17], events[14]),events[13]),events[1]),events[27]),events[44]),events[46]),events[24]),events[18]),events[39]),events[2]),cons_indep(cons_indep(cons_incl(cons_indep(cons_excl(cons_incl(cons_indep(cons_indep(cons_incl(cons_excl(events[38], events[47]),events[4]),events[49]),events[25]),events[43]),events[19]),events[5]),events[3]),events[36]),events[12]),cons_indep(cons_incl(cons_indep(cons_incl(cons_incl(cons_excl(cons_incl(cons_indep(cons_excl(cons_incl(events[21], events[48]),events[7]),events[38]),events[2]),events[10]),events[31]),events[4]),events[1]),events[33]),events[29])};


static const std::vector< std::vector<float> > prob = {{0.343758, 0.829521, 0.833003, 0.283473, 0.344449, 0.0754681, 0.945108, 0.751288, 0.986821, 0.740897, 0.117067, 0.696675, 0.282506, 0.345089, 0.601975, 0.339205, 0.589844, 0.154031, 0.341978, 0.350663, 0.997321, 0.751691, 0.759121, 0.2425, 0.598166, 0.969881, 0.286534, 0.609099, 0.00340484, 0.718328, 0.738731, 0.336715, 0.51977, 0.393205, 0.2302, 0.261776, 0.20578, 0.918307, 0.344591, 0.174598, 0.501408, 0.263711, 0.117342, 0.815026, 0.434936, 0.429847, 0.670138, 0.533565, 0.927985, 0.94169},
{0.180796, 0.495322, 0.592498, 0.493617, 0.476928, 0.118347, 0.98415, 0.322353, 0.0446134, 0.855062, 0.325353, 0.321762, 0.751847, 0.772666, 0.202823, 0.377427, 0.777898, 0.692811, 0.483468, 0.634316, 0.510509, 0.808296, 0.267591, 0.813313, 0.132788, 0.0789982, 0.140552, 0.187834, 0.727593, 0.511178, 0.566015, 0.329481, 0.900273, 0.751761, 0.0796295, 0.481998, 0.882744, 0.245722, 0.39142, 0.154466, 0.657993, 0.98518, 0.127785, 0.917334, 0.0326592, 0.7935, 0.462835, 0.482376, 0.679105, 0.773419},
{0.682594, 0.00227487, 0.30874, 0.107519, 0.6019, 0.193639, 0.344708, 0.0396726, 0.752629, 0.304155, 0.925105, 0.588943, 0.915162, 0.359552, 0.91117, 0.619586, 0.241326, 0.305321, 0.940037, 0.333297, 0.535136, 0.961484, 0.599283, 0.808928, 0.201673, 0.331093, 0.672785, 0.941467, 0.247843, 0.458568, 0.946814, 0.087299, 0.659899, 0.702316, 0.964762, 0.813737, 0.77085, 0.790033, 0.974133, 0.726101, 0.403996, 0.861454, 0.132473, 0.160232, 0.567642, 0.260755, 0.335997, 0.660166, 0.699503, 0.172753},
{0.447232, 0.523677, 0.0578863, 0.553782, 0.882094, 0.271857, 0.592468, 0.675284, 0.102042, 0.211134, 0.431777, 0.513077, 0.765169, 0.990997, 0.197616, 0.724977, 0.297953, 0.341616, 0.977117, 0.487035, 0.38611, 0.769364, 0.750857, 0.143601, 0.809971, 0.472228, 0.409204, 0.87348, 0.288155, 0.150704, 0.18522, 0.646344, 0.773952, 0.570971, 0.711459, 0.414423, 0.835429, 0.0269491, 0.157559, 0.854425, 0.896469, 0.000398096, 0.0460308, 0.0542353, 0.75552, 0.514094, 0.903675, 0.742761, 0.38224, 0.369297},
{0.512514, 0.536621, 0.976218, 0.133507, 0.604803, 0.183646, 0.286321, 0.825533, 0.920823, 0.393889, 0.122051, 0.81221, 0.595294, 0.163371, 0.442636, 0.976768, 0.64004, 0.163673, 0.693527, 0.873397, 0.433146, 0.141731, 0.647037, 0.146254, 0.688585, 0.663522, 0.691815, 0.422396, 0.661205, 0.464446, 0.318435, 0.883001, 0.232539, 0.70017, 0.195384, 0.737724, 0.532216, 0.0667053, 0.188055, 0.42683, 0.25868, 0.71765, 0.968144, 0.757337, 0.0317346, 0.0712156, 0.404735, 0.00290319, 0.749738, 0.92677},
{0.768889, 0.174471, 0.425907, 0.023477, 0.378192, 0.491888, 0.129349, 0.181763, 0.471286, 0.600069, 0.783451, 0.828146, 0.916387, 0.688883, 0.7332, 0.352049, 0.196205, 0.298775, 0.634436, 0.517762, 0.763651, 0.27126, 0.93573, 0.504369, 0.269638, 0.14347, 0.779154, 0.396219, 0.627033, 0.0310907, 0.729026, 0.198621, 0.41143, 0.213849, 0.0203222, 0.626163, 0.0305261, 0.743244, 0.269765, 0.728428, 0.938533, 0.310187, 0.754661, 0.561796, 0.0404547, 0.743814, 0.0284839, 0.328162, 0.386341, 0.834664},
{0.440595, 0.197782, 0.492205, 0.349481, 0.597363, 0.502659, 0.43253, 0.72257, 0.97536, 0.380706, 0.936757, 0.204049, 0.980845, 0.19752, 0.512498, 0.729094, 0.556808, 0.241486, 0.872557, 0.941915, 0.0229776, 0.0740151, 0.0856603, 0.929489, 0.548295, 0.542034, 0.750227, 0.704202, 0.820763, 0.893266, 0.918678, 0.468125, 0.0553105, 0.447975, 0.0970652, 0.477371, 0.363925, 0.676275, 0.711391, 0.160643, 0.672019, 0.0515382, 0.304788, 0.594935, 0.527795, 0.737243, 0.482018, 0.920803, 0.901114, 0.676245},
{0.539505, 0.280902, 0.82334, 0.0638245, 0.525378, 0.689195, 0.772608, 0.933085, 0.356543, 0.759208, 0.755838, 0.25575, 0.661286, 0.616144, 0.723771, 0.933441, 0.0932879, 0.0208101, 0.488544, 0.440703, 0.288662, 0.317121, 0.393984, 0.839758, 0.739251, 0.172316, 0.569781, 0.112865, 0.251424, 0.187731, 0.634258, 0.898411, 0.710036, 0.326773, 0.52301, 0.675337, 0.593078, 0.422249, 0.786236, 0.817413, 0.416169, 0.856547, 0.683023, 0.164105, 0.663355, 0.256639, 0.396701, 0.425872, 0.404373, 0.589889},
{0.0218232, 0.203463, 0.0784298, 0.861881, 0.371495, 0.899819, 0.592066, 0.229973, 0.746635, 0.542084, 0.661686, 0.62021, 0.957175, 0.214531, 0.0206069, 0.936566, 0.798193, 0.785979, 0.774669, 0.121732, 0.407639, 0.671854, 0.591423, 0.227561, 0.554919, 0.276396, 0.545102, 0.32932, 0.619764, 0.365415, 0.599211, 0.556794, 0.693693, 0.415404, 0.204165, 0.149878, 0.947024, 0.288325, 0.640193, 0.302579, 0.657805, 0.723201, 0.901131, 0.23101, 0.616817, 0.972455, 0.89503, 0.618001, 0.597514, 0.759052},
{0.804877, 0.827858, 0.63897, 0.17431, 0.320624, 0.310878, 0.0815541, 0.663979, 0.568061, 0.802438, 0.382228, 0.6091, 0.521933, 0.987821, 0.397751, 0.995031, 0.767708, 0.224848, 0.726692, 0.608129, 0.97583, 0.393331, 0.444634, 0.801321, 0.128485, 0.857262, 0.16325, 0.66453, 0.164832, 0.609979, 0.456295, 0.256405, 0.36155, 0.958326, 0.262955, 0.254879, 0.55605, 0.147819, 0.0172802, 0.476329, 0.0444354, 0.249941, 0.0605522, 0.216695, 0.303961, 0.154955, 0.296534, 0.523432, 0.102895, 0.258353},
};

static const std::vector<float> costs = {667.486, 574.933, 718.516, 257.944, 781.103, 977.416, 701.733, 870.319, 153.367, 227.797, 395.32, 952.222, 421.094, 528.712, 783.93, 25.7013, 366.293, 985.883, 143.328, 742.233, 380.777, 37.4986, 927.169, 419.893, 674.295, 589.76, 628.488, 858.628, 967.507, 454.24, 129.857, 664.691, 977.737, 422.594, 559.453, 103.953, 143.479, 242.912, 274.334, 837.376, 692.211, 363.658, 806.923, 781.028, 598.375, 648.279, 815.297, 605.536, 896.342, 226.253};

static const std::vector<float> min_impressions = {0.260096, 0.00823111, 0.0488315, 0.954456, 0.803275, 0.626204, 0.441191, 0.459452, 0.999449, 0.957839};

//
#endif
