#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 10;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_incl(cons_excl(cons_indep(cons_incl(cons_incl(cons_indep(cons_incl(cons_incl(cons_incl(cons_indep(events[4], events[40]),events[2]),events[21]),events[44]),events[31]),events[27]),events[32]),events[10]),events[46]),events[1]),cons_excl(cons_indep(cons_indep(cons_indep(cons_incl(cons_excl(cons_excl(cons_incl(cons_incl(cons_incl(events[37], events[14]),events[9]),events[6]),events[7]),events[42]),events[31]),events[40]),events[34]),events[5]),events[33]),cons_indep(cons_excl(cons_excl(cons_excl(cons_indep(cons_indep(cons_excl(cons_indep(cons_incl(cons_indep(events[14], events[6]),events[4]),events[28]),events[45]),events[31]),events[5]),events[9]),events[16]),events[24]),events[20]),cons_indep(cons_excl(cons_incl(cons_indep(cons_incl(cons_incl(cons_incl(cons_indep(cons_indep(cons_incl(events[13], events[40]),events[21]),events[25]),events[18]),events[26]),events[27]),events[44]),events[43]),events[3]),events[17]),cons_indep(cons_excl(cons_incl(cons_indep(cons_indep(cons_excl(cons_incl(cons_excl(cons_indep(cons_incl(events[9], events[42]),events[4]),events[36]),events[18]),events[29]),events[2]),events[38]),events[16]),events[6]),events[23]),cons_indep(cons_excl(cons_indep(cons_incl(cons_indep(cons_indep(cons_incl(cons_indep(cons_incl(cons_excl(events[10], events[36]),events[14]),events[49]),events[7]),events[46]),events[38]),events[20]),events[4]),events[18]),events[33]),cons_excl(cons_excl(cons_excl(cons_incl(cons_excl(cons_excl(cons_excl(cons_excl(cons_incl(cons_incl(events[35], events[36]),events[8]),events[24]),events[28]),events[45]),events[49]),events[27]),events[33]),events[16]),events[20]),cons_excl(cons_excl(cons_incl(cons_excl(cons_incl(cons_indep(cons_incl(cons_indep(cons_excl(cons_excl(events[10], events[31]),events[9]),events[7]),events[16]),events[48]),events[39]),events[30]),events[5]),events[49]),events[26]),cons_indep(cons_excl(cons_indep(cons_incl(cons_excl(cons_indep(cons_indep(cons_indep(cons_incl(cons_excl(events[18], events[28]),events[39]),events[17]),events[26]),events[22]),events[31]),events[8]),events[36]),events[14]),events[11]),cons_excl(cons_indep(cons_incl(cons_incl(cons_incl(cons_indep(cons_incl(cons_indep(cons_excl(cons_incl(events[6], events[1]),events[26]),events[22]),events[35]),events[44]),events[10]),events[43]),events[31]),events[48]),events[34])};


static const std::vector< std::vector<float> > prob = {{0.979062, 0.816818, 0.7293, 0.82878, 0.511777, 0.78879, 0.603885, 0.518769, 0.466931, 0.856798, 0.511702, 0.877145, 0.0161378, 0.504916, 0.543991, 0.595517, 0.932343, 0.236558, 0.246384, 0.670767, 0.368456, 0.861872, 0.839712, 0.361572, 0.219395, 0.300676, 0.27501, 0.964181, 0.960821, 0.202785, 0.499523, 0.430167, 0.498832, 0.963327, 0.890947, 0.11304, 0.229885, 0.658706, 0.891215, 0.834189, 0.397309, 0.350951, 0.939941, 0.00705467, 0.389724, 0.222328, 0.185727, 0.638664, 0.681354, 0.685676},
{0.247712, 0.248619, 0.429774, 0.617789, 0.708166, 0.865738, 0.274579, 0.185123, 0.342411, 0.943017, 0.962328, 0.902347, 0.210961, 0.555563, 0.177946, 0.764836, 0.317295, 0.119088, 0.962167, 0.000415448, 0.82172, 0.729456, 0.741002, 0.938536, 0.364559, 0.875241, 0.969582, 0.929739, 0.30986, 0.11947, 0.491175, 0.0292, 0.510791, 0.5719, 0.790636, 0.273154, 0.114345, 0.136165, 0.212686, 0.209592, 0.133017, 0.618619, 0.493468, 0.967401, 0.871573, 0.522752, 0.153097, 0.75537, 0.505449, 0.115048},
{0.291156, 0.788885, 0.447071, 0.0301088, 0.165119, 0.789985, 0.956988, 0.00783347, 0.24996, 0.338275, 0.864255, 0.919251, 0.727052, 0.843672, 0.445054, 0.455378, 0.287283, 0.772364, 0.827894, 0.747313, 0.775882, 0.92425, 0.513115, 0.448, 0.509484, 0.252188, 0.497848, 0.068321, 0.657245, 0.85916, 0.984022, 0.150106, 0.177338, 0.333504, 0.764523, 0.685622, 0.797274, 0.467772, 0.355704, 0.327515, 0.519322, 0.46521, 0.348497, 0.552762, 0.83889, 0.00670673, 0.129298, 0.7291, 0.818033, 0.203192},
{0.251818, 0.178821, 0.919822, 0.71059, 0.891537, 0.978442, 0.13277, 0.215841, 0.0761042, 0.971836, 0.614105, 0.0117351, 0.934346, 0.829156, 0.814227, 0.500164, 0.800965, 0.90464, 0.901715, 0.166193, 0.864218, 0.591187, 0.0421159, 0.93279, 0.870739, 0.601889, 0.359628, 0.536186, 0.274378, 0.937162, 0.530667, 0.073888, 0.121791, 0.658476, 0.334661, 0.679797, 0.540589, 0.671782, 0.0083358, 0.248883, 0.62776, 0.974635, 0.473244, 0.196134, 0.186722, 0.0763261, 0.588689, 0.43356, 0.909503, 0.763948},
{0.255358, 0.801792, 0.422494, 0.809366, 0.616317, 0.609926, 0.633951, 0.689264, 0.584497, 0.882892, 0.262388, 0.777082, 0.634391, 0.57533, 0.977688, 0.909142, 0.916503, 0.445201, 0.865118, 0.208614, 0.980792, 0.345418, 0.339757, 0.723322, 0.811417, 0.950282, 0.00191381, 0.139262, 0.925674, 0.732184, 0.413959, 0.561806, 0.580908, 0.660363, 0.16143, 0.749891, 0.884832, 0.816837, 0.156493, 0.422408, 0.508675, 0.0920288, 0.759761, 0.9601, 0.780858, 0.0507443, 0.965232, 0.0773402, 0.935342, 0.120008},
{0.058261, 0.111479, 0.112628, 0.208789, 0.815782, 0.261477, 0.875329, 0.68982, 0.107434, 0.669166, 0.935337, 0.90465, 0.421965, 0.470904, 0.0908228, 0.651681, 0.199338, 0.312251, 0.100663, 0.257224, 0.556852, 0.442076, 0.360437, 0.787095, 0.187757, 0.0465174, 0.744835, 0.285146, 0.336181, 0.00606256, 0.745448, 0.843557, 0.490726, 0.428034, 0.546908, 0.24572, 0.640494, 0.582075, 0.609123, 0.82671, 0.686997, 0.653316, 0.582838, 0.286157, 0.267083, 0.189706, 0.1349, 0.983752, 0.35046, 0.23595},
{0.492095, 0.752368, 0.422973, 0.500836, 0.758443, 0.00776259, 0.456011, 0.92565, 0.60395, 0.465611, 0.781615, 0.128687, 0.757612, 0.886909, 0.264135, 0.831459, 0.367794, 0.164569, 0.628717, 0.649786, 0.428032, 0.64301, 0.465648, 0.00548899, 0.278495, 0.807669, 0.0398116, 0.60811, 0.872091, 0.896821, 0.378604, 0.851836, 0.868898, 0.608039, 0.338974, 0.228249, 0.416417, 0.994812, 0.924634, 0.333796, 0.898114, 0.107035, 0.985463, 0.0612213, 0.255111, 0.0127856, 0.349321, 0.607627, 0.152445, 0.53678},
{0.846389, 0.0516908, 0.636871, 0.355399, 0.969233, 0.577149, 0.213284, 0.210293, 0.405934, 0.876387, 0.29154, 0.738198, 0.386747, 0.640476, 0.0857084, 0.646219, 0.817574, 0.983583, 0.895157, 0.255399, 0.512956, 0.720115, 0.298901, 0.509554, 0.742314, 0.699122, 0.23588, 0.670486, 0.886308, 0.416114, 0.01743, 0.333464, 0.15848, 0.495249, 0.0121243, 0.59509, 0.298489, 0.0610892, 0.840798, 0.534593, 0.455584, 0.216657, 0.569055, 0.48837, 0.0177063, 0.37424, 0.312356, 0.241114, 0.405591, 0.412545},
{0.885453, 0.143933, 0.891816, 0.164333, 0.115272, 0.603727, 0.623796, 0.778125, 0.638505, 0.0680882, 0.574941, 0.69581, 0.291262, 0.226229, 0.924748, 0.389725, 0.572642, 0.733193, 0.376974, 0.55656, 0.525118, 0.669433, 0.405902, 0.773814, 0.872407, 0.363542, 0.559192, 0.410547, 0.0400335, 0.0619849, 0.732642, 0.595019, 0.22388, 0.256657, 0.803397, 0.0874319, 0.165046, 0.497155, 0.038176, 0.918454, 0.870509, 0.188952, 0.261321, 0.929903, 0.350481, 0.422231, 0.772281, 0.813876, 0.467412, 0.94714},
{0.682475, 0.107872, 0.742804, 0.922812, 0.312753, 0.769988, 0.610919, 0.0184913, 0.00312155, 0.37299, 0.0605551, 0.269444, 0.992169, 0.894937, 0.705574, 0.837742, 0.484607, 0.757836, 0.512779, 0.907947, 0.663617, 0.81187, 0.234831, 0.225039, 0.917556, 0.275782, 0.769585, 0.0199823, 0.800259, 0.81404, 0.509956, 0.483885, 0.686458, 0.604597, 0.525346, 0.0326477, 0.297345, 0.951649, 0.908485, 0.364278, 0.919812, 0.607503, 0.0560362, 0.0827138, 0.977594, 0.986107, 0.783266, 0.311215, 0.119077, 0.924331},
};

static const std::vector<float> costs = {686.319, 724.528, 25.6386, 772.055, 58.4571, 980.487, 238.537, 281.491, 583.036, 546.438, 883.663, 270.394, 595.455, 263.776, 935.344, 117.497, 478.03, 932.896, 605.526, 554.281, 503.309, 853.651, 451.823, 664.022, 84.5503, 826.299, 677.004, 529.231, 701.842, 8.68516, 757.022, 512.388, 869.841, 988.643, 927.553, 777.522, 458.501, 270.745, 450.307, 870.658, 510.812, 104.442, 801.539, 339.763, 475.335, 809.803, 964.748, 534.046, 71.7297, 627.744};

static const std::vector<float> min_impressions = {0.694912, 0.311945, 0.400061, 0.769874, 0.215127, 0.74087, 0.281089, 0.0305653, 0.495066, 0.825585};

//
#endif
