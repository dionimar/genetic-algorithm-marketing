#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 10;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_excl(cons_incl(cons_excl(cons_excl(cons_incl(events[26], events[42]),events[45]),events[33]),events[22]),events[0]),cons_incl(cons_indep(cons_indep(cons_excl(cons_incl(events[33], events[21]),events[0]),events[36]),events[26]),events[13]),cons_incl(cons_incl(cons_incl(cons_incl(cons_incl(events[19], events[17]),events[32]),events[8]),events[2]),events[48]),cons_indep(cons_incl(cons_incl(cons_incl(cons_incl(events[44], events[15]),events[39]),events[37]),events[25]),events[46]),cons_incl(cons_incl(cons_excl(cons_indep(cons_indep(events[13], events[48]),events[34]),events[3]),events[7]),events[26]),cons_incl(cons_excl(cons_incl(cons_incl(cons_excl(events[49], events[11]),events[8]),events[43]),events[44]),events[17]),cons_excl(cons_incl(cons_indep(cons_excl(cons_indep(events[21], events[12]),events[1]),events[16]),events[9]),events[13]),cons_indep(cons_indep(cons_indep(cons_excl(cons_indep(events[15], events[35]),events[46]),events[0]),events[14]),events[44]),cons_excl(cons_indep(cons_excl(cons_incl(cons_indep(events[34], events[21]),events[14]),events[49]),events[10]),events[47]),cons_incl(cons_indep(cons_incl(cons_indep(cons_excl(events[31], events[47]),events[6]),events[20]),events[46]),events[32])};


static const std::vector< std::vector<float> > prob = {{0.268505, 0.0505245, 0.502412, 0.27757, 0.146864, 0.521048, 0.358133, 0.561169, 0.0446932, 0.855677, 0.634838, 0.635982, 0.95488, 0.14695, 0.616171, 0.321299, 0.933039, 0.548043, 0.933011, 0.182444, 0.205428, 0.653245, 0.737963, 0.264359, 0.410132, 0.0447929, 0.622926, 0.105028, 0.413074, 0.455653, 0.92681, 0.174131, 0.43576, 0.499231, 0.537173, 0.86934, 0.972422, 0.252696, 0.157168, 0.739112, 0.728236, 0.46856, 0.713224, 0.539922, 0.43254, 0.911755, 0.0228283, 0.384955, 0.568607, 0.045854},
{0.309599, 0.242302, 0.754544, 0.277188, 0.876597, 0.7676, 0.274628, 0.965493, 0.487766, 0.511007, 0.499648, 0.996738, 0.820747, 0.750682, 0.863555, 0.382954, 0.124302, 0.367085, 0.721561, 0.43423, 0.453997, 0.621027, 0.178034, 0.865788, 0.289984, 0.806337, 0.640512, 0.140761, 0.907962, 0.458934, 0.283784, 0.296241, 0.195852, 0.361395, 0.298628, 0.0372902, 0.981767, 0.90503, 0.0787444, 0.608925, 0.331199, 0.285067, 0.52495, 0.391732, 0.172178, 0.691961, 0.402153, 0.57786, 0.612465, 0.233241},
{0.431213, 0.373843, 0.845165, 0.621058, 0.089905, 0.836591, 0.145332, 0.732097, 0.921836, 0.0546332, 0.469187, 0.739797, 0.697201, 0.286145, 0.766122, 0.744588, 0.962618, 0.281287, 0.756716, 0.305461, 0.18057, 0.876136, 0.450567, 0.976658, 0.50156, 0.994229, 0.229242, 0.63732, 0.208116, 0.429182, 0.710454, 0.0682464, 0.781245, 0.30898, 0.99825, 0.649323, 0.25892, 0.0910621, 0.677441, 0.563188, 0.176705, 0.598243, 0.617071, 0.475009, 0.68687, 0.32335, 0.603449, 0.729349, 0.946269, 0.0388264},
{0.677837, 0.56893, 0.104653, 0.659988, 0.241716, 0.112496, 0.443827, 0.897489, 0.208549, 0.362883, 0.0834439, 0.937464, 0.170707, 0.106871, 0.813647, 0.349261, 0.212989, 0.876162, 0.291157, 0.163742, 0.194817, 0.967991, 0.311307, 0.504005, 0.48146, 0.576208, 0.528179, 0.657328, 0.344168, 0.967759, 0.362068, 0.381296, 0.968411, 0.168712, 0.518649, 0.711385, 0.709487, 0.0529954, 0.852663, 0.0664287, 0.829833, 0.730884, 0.135137, 0.473942, 0.61343, 0.993955, 0.996972, 0.207269, 0.168931, 0.503374},
{0.250193, 0.99612, 0.0925598, 0.808004, 0.883854, 0.137937, 0.433461, 0.500719, 0.675065, 0.438762, 0.444942, 0.60664, 0.143082, 0.310516, 0.0448908, 0.191425, 0.671805, 0.586863, 0.971598, 0.538469, 0.777489, 0.217196, 0.289385, 0.277079, 0.893956, 0.449659, 0.487169, 0.40253, 0.598247, 0.0274783, 0.559277, 0.669489, 0.495819, 0.0636291, 0.603234, 0.546218, 0.906081, 0.95595, 0.783575, 0.455519, 0.504775, 0.726525, 0.000831134, 0.846809, 0.688862, 0.616688, 0.0988606, 0.443187, 0.419987, 0.598972},
{0.33076, 0.369959, 0.397, 0.694436, 0.394811, 0.189039, 0.676146, 0.710425, 0.803422, 0.803136, 0.494461, 0.129623, 0.0045204, 0.600467, 0.583548, 0.392868, 0.952597, 0.680791, 0.123739, 0.399675, 0.652659, 0.881803, 0.161375, 0.672654, 0.272582, 0.265421, 0.356912, 0.144371, 0.334782, 0.532698, 0.408598, 0.974383, 0.678345, 0.737989, 0.97827, 0.0126759, 0.410364, 0.194347, 0.257985, 0.0855036, 0.378502, 0.578428, 0.395564, 0.852024, 0.880587, 0.893101, 0.803858, 0.459024, 0.915522, 0.750839},
{0.00961945, 0.326487, 0.283156, 0.168727, 0.184303, 0.922734, 0.985706, 0.252648, 0.745995, 0.629176, 0.489849, 0.0809462, 0.173256, 0.717418, 0.467447, 0.248844, 0.0501793, 0.339694, 0.725763, 0.531608, 0.856956, 0.937798, 0.395756, 0.946816, 0.0791393, 0.0200923, 0.729373, 0.178179, 0.694792, 0.715156, 0.279052, 0.631022, 0.0525187, 0.631522, 0.899453, 0.0201906, 0.801294, 0.87467, 0.836338, 0.663519, 0.592954, 0.625727, 0.515086, 0.369878, 0.961704, 0.427617, 0.443749, 0.661042, 0.123235, 0.213834},
{0.907615, 0.873254, 0.730441, 0.789702, 0.447231, 0.55719, 0.336362, 0.264299, 0.755894, 0.780868, 0.935845, 0.923422, 0.346127, 0.961989, 0.546993, 0.411719, 0.142686, 0.68354, 0.758507, 0.0848221, 0.516651, 0.942355, 0.665029, 0.968199, 0.0704135, 0.874465, 0.595895, 0.554985, 0.592141, 0.432939, 0.12768, 0.203419, 0.756122, 0.610688, 0.303279, 0.432156, 0.24388, 0.35312, 0.767324, 0.474382, 0.334614, 0.798734, 0.113157, 0.519263, 0.394836, 0.640908, 0.109028, 0.0567153, 0.939898, 0.219543},
{0.645796, 0.191989, 0.997842, 0.142337, 0.113624, 0.774901, 0.316885, 0.00568159, 0.0727723, 0.492305, 0.277604, 0.357355, 0.746769, 0.70177, 0.610767, 0.736948, 0.627999, 0.947079, 0.58846, 0.319289, 0.742749, 0.448282, 0.27039, 0.946619, 0.790539, 0.328092, 0.286183, 0.576977, 0.0110939, 0.781408, 0.675537, 0.341574, 0.0346949, 0.578015, 0.622052, 0.39566, 0.78754, 0.931028, 0.534841, 0.0853762, 0.793965, 0.712801, 0.400349, 0.599527, 0.266835, 0.689732, 0.36706, 0.151462, 0.842531, 0.224413},
{0.853947, 0.603316, 0.392829, 0.624793, 0.111075, 0.613217, 0.175258, 0.286622, 0.306324, 0.792614, 0.025609, 0.960443, 0.503007, 0.211445, 0.763174, 0.114973, 0.640274, 0.231791, 0.611484, 0.276409, 0.147271, 0.997687, 0.413742, 0.802467, 0.620183, 0.841435, 0.559455, 0.40422, 0.0424626, 0.415182, 0.567263, 0.857238, 0.334389, 0.125773, 0.454809, 0.903054, 0.82434, 0.412284, 0.474444, 0.966365, 0.680251, 0.684639, 0.653728, 0.591793, 0.703797, 0.222111, 0.716751, 0.491363, 0.399401, 0.764581},
};

static const std::vector<float> costs = {632.315, 314.317, 416.794, 834.999, 277.842, 145.551, 266.83, 46.3469, 112.361, 368.021, 436.919, 363.6, 419.388, 221.997, 968.875, 655.422, 209.921, 580.64, 905.584, 317.151, 432.885, 662.017, 835.338, 277.245, 599.929, 505.366, 115.05, 397.164, 437.784, 746.088, 33.0771, 953.998, 139.293, 947.022, 267.386, 941.121, 683.712, 927.503, 477.264, 655.455, 599.33, 634.98, 883.125, 586.185, 745.604, 391.51, 780.863, 637.459, 973.317, 359.498};

static const std::vector<float> min_impressions = {0.800337, 0.739968, 0.939814, 0.900428, 0.103894, 0.667949, 0.124463, 0.603128, 0.495225, 0.166017};

//
#endif
