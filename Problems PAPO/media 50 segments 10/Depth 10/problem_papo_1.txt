#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 10;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_indep(cons_excl(cons_indep(cons_indep(cons_indep(cons_excl(cons_incl(cons_excl(cons_indep(cons_indep(events[42], events[36]),events[25]),events[40]),events[43]),events[33]),events[3]),events[48]),events[45]),events[12]),events[4]),cons_excl(cons_indep(cons_indep(cons_incl(cons_indep(cons_indep(cons_indep(cons_incl(cons_indep(cons_incl(events[37], events[10]),events[38]),events[43]),events[6]),events[39]),events[8]),events[20]),events[1]),events[22]),events[7]),cons_incl(cons_excl(cons_incl(cons_excl(cons_incl(cons_incl(cons_incl(cons_indep(cons_indep(cons_incl(events[9], events[8]),events[24]),events[41]),events[19]),events[47]),events[28]),events[32]),events[20]),events[36]),events[4]),cons_indep(cons_indep(cons_incl(cons_incl(cons_incl(cons_excl(cons_indep(cons_incl(cons_excl(cons_incl(events[38], events[40]),events[34]),events[37]),events[43]),events[22]),events[29]),events[3]),events[49]),events[21]),events[45]),cons_incl(cons_incl(cons_indep(cons_incl(cons_incl(cons_excl(cons_indep(cons_excl(cons_incl(cons_excl(events[21], events[30]),events[0]),events[41]),events[40]),events[27]),events[1]),events[49]),events[24]),events[44]),events[15]),cons_excl(cons_indep(cons_indep(cons_indep(cons_indep(cons_incl(cons_excl(cons_excl(cons_incl(cons_excl(events[22], events[0]),events[4]),events[14]),events[45]),events[12]),events[46]),events[24]),events[7]),events[19]),events[38]),cons_excl(cons_excl(cons_incl(cons_excl(cons_indep(cons_incl(cons_incl(cons_incl(cons_incl(cons_excl(events[24], events[18]),events[33]),events[16]),events[40]),events[17]),events[34]),events[26]),events[27]),events[42]),events[30]),cons_incl(cons_incl(cons_incl(cons_indep(cons_indep(cons_excl(cons_indep(cons_incl(cons_indep(cons_indep(events[19], events[49]),events[18]),events[39]),events[48]),events[47]),events[2]),events[12]),events[16]),events[25]),events[15]),cons_incl(cons_incl(cons_indep(cons_indep(cons_excl(cons_indep(cons_indep(cons_incl(cons_incl(cons_indep(events[41], events[6]),events[22]),events[49]),events[48]),events[4]),events[8]),events[31]),events[15]),events[18]),events[29]),cons_indep(cons_excl(cons_indep(cons_indep(cons_incl(cons_incl(cons_indep(cons_incl(cons_indep(cons_excl(events[17], events[5]),events[26]),events[48]),events[38]),events[49]),events[22]),events[8]),events[45]),events[13]),events[32])};


static const std::vector< std::vector<float> > prob = {{0.328615, 0.726669, 0.404982, 0.483699, 0.0314272, 0.342672, 0.00410188, 0.744743, 0.242625, 0.827939, 0.764973, 0.094001, 0.813629, 0.914003, 0.783886, 0.0060833, 0.0430494, 0.482508, 0.0799345, 0.0470544, 0.404891, 0.212457, 0.400159, 0.964641, 0.196871, 0.0635437, 0.431143, 0.648818, 0.713573, 0.0314843, 0.87587, 0.899276, 0.903223, 0.945455, 0.570517, 0.259549, 0.689295, 0.0707, 0.0119532, 0.771606, 0.916045, 0.396738, 0.262654, 0.156719, 0.0681429, 0.217234, 0.484306, 0.296104, 0.969072, 0.604875},
{0.143571, 0.845182, 0.250624, 0.455323, 0.841057, 0.667132, 0.578228, 0.620124, 0.342935, 0.804859, 0.41631, 0.437368, 0.911598, 0.0147438, 0.26203, 0.940954, 0.685009, 0.145527, 0.0456217, 0.901544, 0.196662, 0.123471, 0.0995944, 0.230592, 0.596705, 0.304228, 0.429503, 0.557781, 0.675081, 0.265481, 0.0335087, 0.518335, 0.855528, 0.494921, 0.314277, 0.576261, 0.526563, 0.561332, 0.388445, 0.515652, 0.914321, 0.505176, 0.413994, 0.367641, 0.568854, 0.190562, 0.959295, 0.621528, 0.0595688, 0.752566},
{0.533342, 0.858051, 0.63392, 0.396113, 0.288394, 0.376485, 0.714714, 0.717952, 0.685111, 0.111631, 0.20857, 0.221982, 0.860238, 0.113502, 0.215675, 0.459611, 0.747235, 0.592892, 0.0334038, 0.622969, 0.316744, 0.937471, 0.7361, 0.283551, 0.137027, 0.408762, 0.39066, 0.738604, 0.815537, 0.674754, 0.566795, 0.220415, 0.446325, 0.575886, 0.888664, 0.980426, 0.601139, 0.289056, 0.210934, 0.219103, 0.880072, 0.494574, 0.881045, 0.824201, 0.651656, 0.181488, 0.542307, 0.617293, 0.26108, 0.504879},
{0.17291, 0.425306, 0.0525938, 0.726167, 0.374714, 0.669775, 0.398736, 0.130128, 0.121428, 0.729745, 0.337839, 0.437485, 0.333217, 0.567325, 0.0550764, 0.19816, 0.125961, 0.770882, 0.25649, 0.992019, 0.127793, 0.738371, 0.500671, 0.787231, 0.492322, 0.336816, 0.998587, 0.848033, 0.399107, 0.729343, 0.752777, 0.825333, 0.806946, 0.476376, 0.449275, 0.491912, 0.0606024, 0.570115, 0.20104, 0.233577, 0.0260174, 0.0248684, 0.110927, 0.301244, 0.000117715, 0.950537, 0.585005, 0.532947, 0.395336, 0.981093},
{0.410368, 0.200384, 0.231273, 0.239884, 0.737408, 0.734842, 0.494802, 0.821763, 0.108173, 0.937165, 0.379068, 0.17274, 0.972177, 0.137114, 0.118912, 0.95547, 0.624308, 0.698611, 0.897063, 0.758793, 0.953729, 0.805384, 0.279722, 0.330406, 0.870199, 0.966528, 0.246909, 0.828456, 0.0701554, 0.178746, 0.45026, 0.782959, 0.243161, 0.0886382, 0.888295, 0.552933, 0.847154, 0.146572, 0.0313758, 0.816657, 0.969694, 0.0221074, 0.0863817, 0.141508, 0.391213, 0.364994, 0.241511, 0.289118, 0.450778, 0.234235},
{0.967237, 0.291337, 0.0950228, 0.121642, 0.239584, 0.120815, 0.266485, 0.557838, 0.650029, 0.749801, 0.943911, 0.461467, 0.64732, 0.228761, 0.964222, 0.414687, 0.28719, 0.768051, 0.567728, 0.89714, 0.160853, 0.0671145, 0.313355, 0.331711, 0.744093, 0.567372, 0.371316, 0.978931, 0.643595, 0.199294, 0.839493, 0.748965, 0.625651, 0.592305, 0.581618, 0.834492, 0.517087, 0.947917, 0.711091, 0.439255, 0.0578998, 0.470903, 0.992812, 0.914864, 0.0441373, 0.505004, 0.99227, 0.984048, 0.047356, 0.494324},
{0.152834, 0.17249, 0.189173, 0.958971, 0.830014, 0.158389, 0.479488, 0.681722, 0.159837, 0.201123, 0.650219, 0.194429, 0.0690748, 0.901708, 0.635419, 0.983782, 0.653261, 0.32656, 0.671664, 0.238287, 0.199694, 0.707031, 0.810509, 0.370163, 0.546202, 0.513643, 0.133236, 0.0120732, 0.161005, 0.873892, 0.519038, 0.0703046, 0.569236, 0.521442, 0.103307, 0.892355, 0.167999, 0.942729, 0.42761, 0.153685, 0.452012, 0.693628, 0.507449, 0.289908, 0.458213, 0.445743, 0.624805, 0.363447, 0.984419, 0.931282},
{0.578593, 0.57786, 0.445625, 0.477357, 0.302428, 0.427972, 0.829166, 0.803548, 0.365486, 0.762597, 0.855888, 0.0179557, 0.697094, 0.550623, 0.966843, 0.757931, 0.577507, 0.471254, 0.161043, 0.496163, 0.788477, 0.739629, 0.994807, 0.76774, 0.278443, 0.543682, 0.194912, 0.519613, 0.627526, 0.736452, 0.928872, 0.128609, 0.598557, 0.82004, 0.338779, 0.581368, 0.972565, 0.590091, 0.681325, 0.381199, 0.796252, 0.455738, 0.881309, 0.281445, 0.93757, 0.917559, 0.638681, 0.706762, 0.0686875, 0.679384},
{0.91414, 0.037046, 0.844265, 0.658386, 0.954555, 0.20112, 0.683895, 0.623303, 0.316495, 0.609362, 0.2907, 0.469467, 0.0940621, 0.744889, 0.400183, 0.297435, 0.463215, 0.46062, 0.147226, 0.0801616, 0.732692, 0.789366, 0.266303, 0.101677, 0.756093, 0.447078, 0.321666, 0.751124, 0.525025, 0.9905, 0.937977, 0.918807, 0.871591, 0.506094, 0.920988, 0.86277, 0.673405, 0.259882, 0.512706, 0.63617, 0.502721, 0.281053, 0.962675, 0.177641, 0.891833, 0.637478, 0.106133, 0.71866, 0.401707, 0.525114},
{0.203431, 0.541634, 0.410323, 0.711954, 0.802175, 0.393362, 0.529113, 0.836009, 0.239752, 0.404834, 0.440003, 0.460628, 0.696421, 0.715693, 0.999446, 0.211722, 0.908311, 0.684033, 0.1863, 0.58674, 0.393501, 0.133491, 0.812051, 0.484771, 0.687709, 0.981766, 0.49604, 0.866479, 0.491266, 0.232798, 0.605311, 0.259116, 0.861755, 0.169845, 0.92162, 0.608066, 0.646207, 0.992239, 0.205457, 0.212375, 0.956827, 0.444196, 0.114173, 0.363966, 0.946767, 0.562725, 0.28664, 0.149159, 0.303701, 0.772102},
};

static const std::vector<float> costs = {901.038, 676.65, 986.509, 775.157, 633.493, 454.67, 315.299, 49.7931, 930.036, 735.643, 908.652, 12.584, 883.054, 744.568, 992.615, 627.172, 589.746, 502.261, 312.311, 52.0444, 467.371, 203.164, 322.331, 961.807, 621.429, 529.625, 632.663, 31.2197, 511.531, 274.447, 329.255, 54.733, 94.7606, 734.294, 463.597, 882.657, 92.9348, 729.706, 959.705, 820.199, 512.763, 299.135, 489.979, 330.391, 519.268, 331.986, 968.645, 870.533, 851.391, 865.366};

static const std::vector<float> min_impressions = {0.21506, 0.586309, 0.0186109, 0.806891, 0.480599, 0.704017, 0.147628, 0.56694, 0.978236, 0.378504};

//
#endif
