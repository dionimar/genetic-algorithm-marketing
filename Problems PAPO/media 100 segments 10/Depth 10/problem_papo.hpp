#ifndef PROBLEM_H
#define PROBLEM_H
#include "syntax_tree.hpp"
#include <iostream>

#define PAPO

static const int media = 100;
static const int segments = 10;

static const std::vector<Syntax_Tree> events = {
    cons_event(0),  cons_event(1),  cons_event(2),  cons_event(3),
    cons_event(4),  cons_event(5),  cons_event(6),  cons_event(7),
    cons_event(8),  cons_event(9),  cons_event(10), cons_event(11),
    cons_event(12), cons_event(13), cons_event(14), cons_event(15),
    cons_event(16), cons_event(17), cons_event(18), cons_event(19),
    cons_event(20), cons_event(21), cons_event(22), cons_event(23),
    cons_event(24), cons_event(25), cons_event(26), cons_event(27),
    cons_event(28), cons_event(29), cons_event(30), cons_event(31),
    cons_event(32), cons_event(33), cons_event(34), cons_event(35),
    cons_event(36), cons_event(37), cons_event(38), cons_event(39),
    cons_event(40), cons_event(41), cons_event(42), cons_event(43),
    cons_event(44), cons_event(45), cons_event(46), cons_event(47),
    cons_event(48), cons_event(49), cons_event(50), cons_event(51),
    cons_event(52), cons_event(53), cons_event(54), cons_event(55),
    cons_event(56), cons_event(57), cons_event(58), cons_event(59),
    cons_event(60), cons_event(61), cons_event(62), cons_event(63),
    cons_event(64), cons_event(65), cons_event(66), cons_event(67),
    cons_event(68), cons_event(69), cons_event(70), cons_event(71),
    cons_event(72), cons_event(73), cons_event(74), cons_event(75),
    cons_event(76), cons_event(77), cons_event(78), cons_event(79),
    cons_event(80), cons_event(81), cons_event(82), cons_event(83),
    cons_event(84), cons_event(85), cons_event(86), cons_event(87),
    cons_event(88), cons_event(89), cons_event(90), cons_event(91),
    cons_event(92), cons_event(93), cons_event(94), cons_event(95),
    cons_event(96), cons_event(97), cons_event(98), cons_event(99)};

static const std::vector<Syntax_Tree> restrictions = {
    cons_excl(
        cons_excl(
            cons_indep(
                cons_incl(
                    cons_excl(
                        cons_excl(
                            cons_indep(
                                cons_incl(cons_indep(cons_indep(events[61],
                                                                events[27]),
                                                     events[57]),
                                          events[32]),
                                events[14]),
                            events[4]),
                        events[45]),
                    events[73]),
                events[92]),
            events[85]),
        events[33]),
    cons_indep(
        cons_indep(
            cons_incl(
                cons_incl(
                    cons_excl(
                        cons_incl(cons_excl(cons_incl(cons_incl(cons_indep(
                                                                    events[25],
                                                                    events[78]),
                                                                events[84]),
                                                      events[46]),
                                            events[65]),
                                  events[83]),
                        events[0]),
                    events[23]),
                events[37]),
            events[81]),
        events[15]),
    cons_excl(
        cons_indep(
            cons_incl(
                cons_excl(
                    cons_indep(
                        cons_excl(
                            cons_indep(cons_excl(cons_incl(cons_excl(events[36],
                                                                     events[5]),
                                                           events[74]),
                                                 events[42]),
                                       events[41]),
                            events[82]),
                        events[73]),
                    events[85]),
                events[64]),
            events[87]),
        events[39]),
    cons_excl(
        cons_incl(
            cons_excl(cons_indep(
                          cons_indep(
                              cons_indep(
                                  cons_excl(cons_excl(cons_indep(
                                                          cons_incl(events[8],
                                                                    events[90]),
                                                          events[17]),
                                                      events[76]),
                                            events[48]),
                                  events[84]),
                              events[2]),
                          events[39]),
                      events[42]),
            events[19]),
        events[25]),
    cons_indep(
        cons_indep(
            cons_excl(
                cons_incl(
                    cons_excl(
                        cons_incl(cons_indep(
                                      cons_incl(cons_incl(cons_excl(events[43],
                                                                    events[78]),
                                                          events[44]),
                                                events[64]),
                                      events[23]),
                                  events[41]),
                        events[36]),
                    events[27]),
                events[60]),
            events[91]),
        events[17]),
    cons_excl(
        cons_indep(
            cons_incl(
                cons_incl(cons_incl(cons_excl(cons_indep(
                                                  cons_indep(
                                                      cons_incl(cons_indep(
                                                                    events[98],
                                                                    events[66]),
                                                                events[43]),
                                                      events[4]),
                                                  events[38]),
                                              events[97]),
                                    events[74]),
                          events[91]),
                events[88]),
            events[20]),
        events[32]),
    cons_indep(
        cons_indep(
            cons_indep(
                cons_excl(
                    cons_excl(cons_indep(
                                  cons_incl(cons_excl(cons_indep(
                                                          cons_indep(events[15],
                                                                     events[4]),
                                                          events[51]),
                                                      events[3]),
                                            events[66]),
                                  events[76]),
                              events[59]),
                    events[61]),
                events[73]),
            events[7]),
        events[5]),
    cons_excl(
        cons_incl(
            cons_incl(
                cons_indep(
                    cons_indep(
                        cons_incl(cons_incl(cons_incl(cons_indep(
                                                          cons_incl(events[78],
                                                                    events[13]),
                                                          events[35]),
                                                      events[31]),
                                            events[52]),
                                  events[3]),
                        events[89]),
                    events[46]),
                events[66]),
            events[41]),
        events[29]),
    cons_excl(
        cons_excl(
            cons_excl(
                cons_incl(cons_excl(cons_indep(
                                        cons_indep(
                                            cons_indep(
                                                cons_indep(cons_incl(events[44],
                                                                     events[4]),
                                                           events[37]),
                                                events[96]),
                                            events[2]),
                                        events[97]),
                                    events[86]),
                          events[49]),
                events[74]),
            events[69]),
        events[42]),
    cons_incl(
        cons_indep(
            cons_incl(
                cons_excl(
                    cons_incl(cons_indep(
                                  cons_incl(cons_incl(cons_excl(cons_indep(
                                                                    events[91],
                                                                    events[13]),
                                                                events[60]),
                                                      events[35]),
                                            events[62]),
                                  events[1]),
                              events[24]),
                    events[9]),
                events[59]),
            events[36]),
        events[42])};

static const std::vector<std::vector<float>> prob = {
    {0.646897,  0.564528,  0.0232945,  0.496608,  0.338714, 0.0271414, 0.104017,
     0.131774,  0.134031,  0.453266,   0.0754432, 0.168491, 0.334086,  0.848398,
     0.688259,  0.365486,  0.0785361,  0.696993,  0.461135, 0.863429,  0.388578,
     0.722194,  0.9156,    0.237219,   0.429247,  0.591245, 0.203735,  0.736699,
     0.913512,  0.544219,  0.359083,   0.833716,  0.918059, 0.462871,  0.301424,
     0.814601,  0.626495,  0.0870688,  0.862619,  0.497995, 0.174949,  0.547528,
     0.653483,  0.45897,   0.00956096, 0.97732,   0.932121, 0.936501,  0.724176,
     0.722951,  0.968843,  0.144958,   0.643004,  0.678012, 0.761706,  0.308402,
     0.0933896, 0.539411,  0.671092,   0.481284,  0.940974, 0.836587,  0.117408,
     0.388173,  0.0128722, 0.182338,   0.244272,  0.952809, 0.448331,  0.105035,
     0.517965,  0.430887,  0.699718,   0.853419,  0.179004, 0.279784,  0.145524,
     0.821766,  0.979549,  0.12365,    0.364464,  0.737786, 0.303158,  0.650817,
     0.0226794, 0.637112,  0.418828,   0.633288,  0.826016, 0.29508,   0.279475,
     0.405138,  0.691038,  0.0007354,  0.549089,  0.186427, 0.180273,  0.460891,
     0.615891,  0.33153},
    {0.565653, 0.569353,  0.279025,  0.900023,  0.358223,  0.275485, 0.454238,
     0.5695,   0.359545,  0.971808,  0.0889834, 0.337132,  0.90445,  0.682241,
     0.897239, 0.846148,  0.0945106, 0.758152,  0.32928,   0.346215, 0.155222,
     0.129338, 0.27802,   0.276716,  0.963526,  0.320961,  0.736603, 0.885628,
     0.39785,  0.972098,  0.61405,   0.61838,   0.197557,  0.231087, 0.591578,
     0.326326, 0.801524,  0.343825,  0.38707,   0.718225,  0.319322, 0.667754,
     0.196654, 0.742602,  0.889841,  0.392892,  0.935411,  0.22798,  0.598812,
     0.670116, 0.274023,  0.934207,  0.0867344, 0.638393,  0.505346, 0.975509,
     0.178199, 0.376858,  0.650275,  0.38939,   0.136352,  0.20671,  0.259071,
     0.185252, 0.786075,  0.802339,  0.984912,  0.322724,  0.687867, 0.819273,
     0.985072, 0.0445864, 0.535865,  0.228225,  0.549489,  0.15072,  0.363481,
     0.971076, 0.894671,  0.968451,  0.356355,  0.851796,  0.611854, 0.371774,
     0.746,    0.0902451, 0.632701,  0.266197,  0.86465,   0.768928, 0.0924815,
     0.286217, 0.692721,  0.908352,  0.825454,  0.0887601, 0.147312, 0.613669,
     0.791707, 0.595094},
    {0.777914,  0.722323,  0.193325,  0.094533,  0.670511,  0.380059,
     0.695266,  0.824002,  0.509135,  0.912484,  0.884225,  0.140136,
     0.575116,  0.584697,  0.160689,  0.0843756, 0.470577,  0.665466,
     0.012301,  0.071795,  0.373228,  0.553951,  0.122949,  0.819463,
     0.218513,  0.439736,  0.0246394, 0.227487,  0.105252,  0.640566,
     0.945218,  0.546504,  0.990727,  0.879406,  0.966954,  0.375423,
     0.907009,  0.554311,  0.512248,  0.567396,  0.542582,  0.00646344,
     0.891166,  0.732052,  0.651285,  0.208773,  0.0919922, 0.152149,
     0.220798,  0.466206,  0.887666,  0.551643,  0.52657,   0.758732,
     0.914317,  0.0595454, 0.589512,  0.792273,  0.99485,   0.757232,
     0.519778,  0.627341,  0.318144,  0.079318,  0.0846494, 0.672422,
     0.153469,  0.411825,  0.945049,  0.524736,  0.227869,  0.706737,
     0.328052,  0.543106,  0.13972,   0.761121,  0.97467,   0.123367,
     0.0392545, 0.0137908, 0.474242,  0.973359,  0.637068,  0.777097,
     0.895864,  0.18547,   0.0362814, 0.338754,  0.837356,  0.462258,
     0.830728,  0.290679,  0.624064,  0.458592,  0.0118477, 0.488797,
     0.600481,  0.410692,  0.379903,  0.457886},
    {0.103215,   0.0535867, 0.294903,  0.759399,  0.36344,   0.747775, 0.929428,
     0.0745003,  0.726195,  0.0284165, 0.569479,  0.829461,  0.168557, 0.803625,
     0.439943,   0.381088,  0.132838,  0.484384,  0.246801,  0.979359, 0.350303,
     0.323454,   0.0473781, 0.436965,  0.968341,  0.307869,  0.988578, 0.382571,
     0.66521,    0.805951,  0.572964,  0.937252,  0.174114,  0.967325, 0.643436,
     0.644703,   0.088303,  0.73993,   0.450149,  0.0662151, 0.161021, 0.477427,
     0.997761,   0.842344,  0.883023,  0.178996,  0.0913934, 0.679894, 0.44575,
     0.138263,   0.915971,  0.825968,  0.985486,  0.290397,  0.448538, 0.46296,
     0.448216,   0.24882,   0.494198,  0.546205,  0.733407,  0.429161, 0.12506,
     0.020358,   0.916614,  0.331246,  0.891674,  0.58056,   0.725355, 0.793035,
     0.146558,   0.0527259, 0.811525,  0.857572,  0.836861,  0.540815, 0.218186,
     0.951908,   0.266336,  0.0501325, 0.347946,  0.815176,  0.727525, 0.157791,
     0.00613324, 0.816593,  0.220003,  0.0937955, 0.431708,  0.558273, 0.697099,
     0.522823,   0.97696,   0.175822,  0.49327,   0.516337,  0.618326, 0.454278,
     0.624188,   0.154652},
    {0.20577,  0.272503,  0.778913,  0.553797,  0.654303,   0.401763,
     0.460555, 0.671607,  0.543198,  0.973688,  0.800293,   0.57659,
     0.350249, 0.17061,   0.310273,  0.089442,  0.103698,   0.518715,
     0.682494, 0.118036,  0.756074,  0.0968032, 0.526935,   0.811794,
     0.68503,  0.814781,  0.405709,  0.321503,  0.0570606,  0.240084,
     0.483173, 0.722763,  0.326333,  0.0547561, 0.711356,   0.451886,
     0.23405,  0.459672,  0.0785853, 0.667416,  0.209643,   0.575313,
     0.875396, 0.202809,  0.965562,  0.884322,  0.328455,   0.147775,
     0.562721, 0.144113,  0.216059,  0.930466,  0.566402,   0.388075,
     0.590978, 0.744253,  0.674817,  0.409517,  0.00432321, 0.232461,
     0.266633, 0.48776,   0.547439,  0.816676,  0.0542323,  0.914712,
     0.704019, 0.128925,  0.255053,  0.530049,  0.211134,   0.374624,
     0.814317, 0.733722,  0.0798678, 0.275569,  0.790196,   0.0906456,
     0.946757, 0.775107,  0.565433,  0.689112,  0.857988,   0.763202,
     0.424831, 0.703766,  0.373367,  0.446805,  0.699181,   0.781074,
     0.292919, 0.893085,  0.816891,  0.57148,   0.243505,   0.0127596,
     0.751623, 0.0611146, 0.636774,  0.327229},
    {0.423181,  0.615435,  0.756095,  0.0568279, 0.715396,  0.520514,
     0.601457,  0.812568,  0.0856632, 0.235856,  0.619055,  0.827945,
     0.774311,  0.584592,  0.57095,   0.927523,  0.246549,  0.176299,
     0.110638,  0.46384,   0.523634,  0.462792,  0.361325,  0.183353,
     0.697072,  0.0654569, 0.430567,  0.211223,  0.979043,  0.0150064,
     0.69761,   0.49948,   0.273582,  0.601546,  0.312508,  0.646181,
     0.0450935, 0.870609,  0.198848,  0.807811,  0.29369,   0.733138,
     0.10709,   0.599252,  0.691981,  0.3476,    0.539866,  0.467737,
     0.652321,  0.0280061, 0.357989,  0.211606,  0.0808269, 0.240421,
     0.516441,  0.999761,  0.117508,  0.0700204, 0.62032,   0.399457,
     0.0783259, 0.831475,  0.564819,  0.692065,  0.140839,  0.87469,
     0.221295,  0.578318,  0.120333,  0.385998,  0.465767,  0.59219,
     0.826865,  0.241455,  0.854087,  0.970285,  0.0198758, 0.715533,
     0.951547,  0.312031,  0.276284,  0.140454,  0.8219,    0.704846,
     0.866249,  0.0455727, 0.549586,  0.922106,  0.0979596, 0.387192,
     0.0170867, 0.980029,  0.196709,  0.0492741, 0.283832,  0.217445,
     0.0699107, 0.345763,  0.741021,  0.450116},
    {0.629163,  0.364192,  0.245213, 0.6806,   0.302947, 0.741497, 0.51606,
     0.856682,  0.835422,  0.161772, 0.221145, 0.382506, 0.606692, 0.31973,
     0.0354808, 0.365112,  0.749669, 0.900338, 0.570756, 0.574266, 0.496029,
     0.989252,  0.248256,  0.320028, 0.489067, 0.206929, 0.134968, 0.142761,
     0.691523,  0.378599,  0.581207, 0.152672, 0.628559, 0.639386, 0.345577,
     0.199128,  0.632267,  0.603551, 0.356137, 0.450117, 0.260487, 0.329645,
     0.67089,   0.346437,  0.893868, 0.761072, 0.765509, 0.669571, 0.400686,
     0.433806,  0.341579,  0.224276, 0.850673, 0.151809, 0.878528, 0.97218,
     0.0267686, 0.0739394, 0.650786, 0.466697, 0.640576, 0.929245, 0.518034,
     0.0438636, 0.542749,  0.87139,  0.445589, 0.278867, 0.827923, 0.109144,
     0.201121,  0.781459,  0.615314, 0.52648,  0.693558, 0.7757,   0.0533269,
     0.516646,  0.416464,  0.826171, 0.420017, 0.169114, 0.208113, 0.588618,
     0.805653,  0.637657,  0.464406, 0.853287, 0.998676, 0.988556, 0.504615,
     0.398104,  0.692305,  0.581952, 0.330426, 0.118291, 0.478178, 0.723683,
     0.452113,  0.974903},
    {0.310346,  0.0535181, 0.596458,  0.392948, 0.96066,     0.00484277,
     0.0586006, 0.0684709, 0.0328962, 0.168456, 0.000805899, 0.10748,
     0.826834,  0.856734,  0.826969,  0.277002, 0.110401,    0.696849,
     0.795952,  0.848039,  0.784183,  0.262383, 0.127623,    0.661964,
     0.482936,  0.854838,  0.601786,  0.16204,  0.683244,    0.872788,
     0.901287,  0.0618637, 0.75043,   0.708244, 0.627174,    0.12932,
     0.831238,  0.623745,  0.495149,  0.600818, 0.903336,    0.0546535,
     0.704817,  0.433216,  0.867971,  0.291921, 0.800966,    0.990239,
     0.454484,  0.248563,  0.926403,  0.940083, 0.947059,    0.865493,
     0.357177,  0.510363,  0.981797,  0.484987, 0.629957,    0.441911,
     0.964456,  0.54497,   0.876727,  0.314333, 0.0575053,   0.82469,
     0.422758,  0.0737626, 0.655927,  0.410475, 0.57764,     0.415985,
     0.929417,  0.877643,  0.609223,  0.928305, 0.976161,    0.55137,
     0.841287,  0.847914,  0.445989,  0.969143, 0.120738,    0.660699,
     0.875336,  0.875436,  0.968962,  0.500207, 0.0493955,   0.207125,
     0.499917,  0.462873,  0.193214,  0.207572, 0.834117,    0.406195,
     0.790334,  0.281364,  0.987705,  0.418355},
    {0.997498,  0.539427,  0.0502496, 0.825042,  0.171799, 0.39291,
     0.713361,  0.193381,  0.750396,  0.65779,   0.560754, 0.154658,
     0.0668589, 0.344623,  0.207861,  0.0214603, 0.75411,  0.718553,
     0.996796,  0.798698,  0.818552,  0.957482,  0.60328,  0.598958,
     0.0186258, 0.0662093, 0.96765,   0.62339,   0.615878, 0.56656,
     0.771091,  0.192281,  0.0337368, 0.673314,  0.825896, 0.862026,
     0.8459,    0.568725,  0.962467,  0.394809,  0.986604, 0.297285,
     0.293451,  0.235471,  0.037683,  0.797019,  0.27061,  0.0649089,
     0.283741,  0.586406,  0.813412,  0.408631,  0.778048, 0.949646,
     0.249337,  0.0534326, 0.796995,  0.978701,  0.417405, 0.781779,
     0.347118,  0.034659,  0.18835,   0.820626,  0.198656, 0.601024,
     0.545358,  0.473212,  0.797411,  0.832082,  0.288243, 0.0679202,
     0.807083,  0.957571,  0.0478884, 0.377838,  0.999067, 0.0297864,
     0.131654,  0.998183,  0.945272,  0.932232,  0.294931, 0.119165,
     0.881241,  0.625951,  0.966695,  0.569681,  0.629446, 0.635764,
     0.948506,  0.178289,  0.742977,  0.715076,  0.708456, 0.578931,
     0.939696,  0.447823,  0.079936,  0.582596},
    {0.640329,  0.533962,  0.852218,  0.164385, 0.690867, 0.514502,  0.947678,
     0.105296,  0.613656,  0.747454,  0.142231, 0.612068, 0.0344683, 0.264175,
     0.180467,  0.105962,  0.363383,  0.684935, 0.147288, 0.197225,  0.764292,
     0.401567,  0.722147,  0.891902,  0.945296, 0.393335, 0.853881,  0.408147,
     0.0681734, 0.540731,  0.311723,  0.777244, 0.471343, 0.352156,  0.422728,
     0.996561,  0.295656,  0.534503,  0.543889, 0.71235,  0.789167,  0.298264,
     0.368707,  0.0459825, 0.712427,  0.669166, 0.197247, 0.658469,  0.380609,
     0.118685,  0.489854,  0.877495,  0.396125, 0.79256,  0.90737,   0.329755,
     0.0546769, 0.444495,  0.859481,  0.340318, 0.985541, 0.813462,  0.554281,
     0.220313,  0.335198,  0.118444,  0.901148, 0.526736, 0.232532,  0.386427,
     0.717803,  0.226663,  0.221689,  0.972965, 0.950626, 0.372962,  0.700022,
     0.208067,  0.378763,  0.0424278, 0.628735, 0.63185,  0.655335,  0.536635,
     0.889693,  0.187948,  0.713023,  0.491878, 0.87066,  0.689199,  0.222764,
     0.920004,  0.0571838, 0.701052,  0.384846, 0.611166, 0.228852,  0.942071,
     0.276929,  0.437576},
};

static const std::vector<float> costs = {
    436.64,  400.12,  67.0211, 971.69,  989.012, 992.18,  562.564, 387.556,
    121.075, 625.791, 465.789, 622.779, 752.745, 75.3171, 147.199, 927.785,
    631.811, 355.487, 840.002, 204.853, 167.245, 515.77,  529.735, 65.538,
    897.226, 131.617, 124.631, 299.743, 971.449, 990.192, 174.384, 737.509,
    397.832, 754.235, 403.875, 680.936, 150.548, 187.08,  160.3,   548.543,
    907.051, 655.986, 568.442, 358.99,  595.732, 386.317, 671.392, 158.397,
    40.9637, 869.388, 957.161, 214.9,   626.155, 959.42,  444.298, 895.226,
    748.022, 889.787, 836.422, 723.328, 953.026, 89.8341, 92.2046, 981.807,
    738.458, 187.28,  599.562, 274.569, 13.0368, 390.001, 645.57,  472.256,
    153.736, 99.2415, 309.298, 38.3181, 230.164, 242.796, 45.3162, 977.463,
    25.0494, 520.49,  144.304, 741.052, 145.546, 281.918, 392.51,  602.32,
    521.669, 187.675, 461.324, 110.275, 247.498, 248.247, 586.003, 286.145,
    847.771, 308.893, 200.525, 868.77};

static const std::vector<float> min_impressions = {
    0.174552, 0.111641, 0.80244,  0.774205, 0.247838,
    0.813967, 0.282085, 0.877583, 0.880466, 0.0272407};

//
#endif
