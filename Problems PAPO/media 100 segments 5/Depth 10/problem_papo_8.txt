#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 100;
static const int segments = 5;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49), cons_event(50), cons_event(51), cons_event(52), cons_event(53), cons_event(54), cons_event(55), cons_event(56), cons_event(57), cons_event(58), cons_event(59), cons_event(60), cons_event(61), cons_event(62), cons_event(63), cons_event(64), cons_event(65), cons_event(66), cons_event(67), cons_event(68), cons_event(69), cons_event(70), cons_event(71), cons_event(72), cons_event(73), cons_event(74), cons_event(75), cons_event(76), cons_event(77), cons_event(78), cons_event(79), cons_event(80), cons_event(81), cons_event(82), cons_event(83), cons_event(84), cons_event(85), cons_event(86), cons_event(87), cons_event(88), cons_event(89), cons_event(90), cons_event(91), cons_event(92), cons_event(93), cons_event(94), cons_event(95), cons_event(96), cons_event(97), cons_event(98), cons_event(99)};

static const std::vector<Syntax_Tree> restrictions = {cons_incl(cons_excl(cons_excl(cons_excl(cons_excl(cons_indep(cons_incl(cons_incl(cons_incl(cons_incl(events[54], events[67]),events[35]),events[78]),events[87]),events[51]),events[73]),events[89]),events[59]),events[70]),events[52]),cons_incl(cons_indep(cons_incl(cons_excl(cons_indep(cons_excl(cons_excl(cons_incl(cons_excl(cons_incl(events[36], events[17]),events[2]),events[44]),events[59]),events[88]),events[77]),events[53]),events[6]),events[85]),events[82]),cons_excl(cons_excl(cons_indep(cons_indep(cons_incl(cons_indep(cons_indep(cons_indep(cons_excl(cons_incl(events[97], events[35]),events[79]),events[75]),events[94]),events[62]),events[88]),events[8]),events[55]),events[52]),events[26]),cons_incl(cons_indep(cons_indep(cons_incl(cons_excl(cons_excl(cons_incl(cons_incl(cons_indep(cons_indep(events[88], events[63]),events[36]),events[3]),events[41]),events[44]),events[9]),events[89]),events[29]),events[5]),events[1]),cons_indep(cons_indep(cons_excl(cons_excl(cons_indep(cons_indep(cons_incl(cons_incl(cons_indep(cons_indep(events[97], events[46]),events[85]),events[72]),events[33]),events[87]),events[57]),events[65]),events[76]),events[99]),events[41])};


static const std::vector< std::vector<float> > prob = {{0.757007, 0.88737, 0.237587, 0.53454, 0.192554, 0.98071, 0.381782, 0.580691, 0.487565, 0.535015, 0.0300099, 0.890254, 0.875455, 0.648752, 0.447966, 0.714489, 0.0974373, 0.376862, 0.486982, 0.129695, 0.566111, 0.811026, 0.425741, 0.403808, 0.00763902, 0.361579, 0.72257, 0.4509, 0.712839, 0.544254, 0.866468, 0.259798, 0.471865, 0.952035, 0.686533, 0.690604, 0.360534, 0.076185, 0.272844, 0.783091, 0.921205, 0.16645, 0.384745, 0.231974, 0.549615, 0.242287, 0.939149, 0.283214, 0.857974, 0.605977, 0.345887, 0.0447332, 0.123208, 0.700684, 0.266232, 0.482775, 0.47995, 0.73787, 0.511217, 0.869965, 0.951176, 0.824329, 0.0709065, 0.418368, 0.125501, 0.0729455, 0.317562, 0.656548, 0.797202, 0.623676, 0.24067, 0.259052, 0.810466, 0.976703, 0.402789, 0.519213, 0.542004, 0.563334, 0.773909, 0.328351, 0.175492, 0.759912, 0.429156, 0.0723887, 0.498564, 0.851391, 0.317287, 0.32019, 0.928102, 0.807389, 0.654997, 0.196027, 0.742183, 0.10466, 0.675848, 0.139593, 0.488289, 0.046702, 0.109622, 0.429823},
{0.229987, 0.377552, 0.0757164, 0.613552, 0.0358035, 0.735589, 0.469302, 0.490053, 0.818092, 0.795257, 0.498847, 0.108718, 0.683337, 0.901176, 0.328382, 0.399818, 0.956655, 0.953738, 0.0777376, 0.34306, 0.225133, 0.116576, 0.0308132, 0.841367, 0.940656, 0.528927, 0.355532, 0.327899, 0.895548, 0.0113025, 0.901706, 0.287146, 0.550576, 0.208965, 0.64701, 0.354217, 0.122582, 0.653395, 0.779646, 0.361124, 0.856907, 0.935994, 0.269997, 0.874043, 0.891188, 0.983345, 0.0198057, 0.658565, 0.399668, 0.915891, 0.909984, 0.117307, 0.528067, 0.608836, 0.23707, 0.546443, 0.675551, 0.851479, 0.745486, 0.86003, 0.987063, 0.206411, 0.0557899, 0.439491, 0.450767, 0.153564, 0.680859, 0.448695, 0.978603, 0.917647, 0.549596, 0.933212, 0.471565, 0.0683835, 0.883361, 0.698041, 0.906518, 0.149191, 0.822944, 0.35814, 0.166858, 0.382805, 0.538975, 0.393107, 0.0341984, 0.577305, 0.326721, 0.702238, 0.690786, 0.939526, 0.503212, 0.474332, 0.410161, 0.296647, 0.617027, 0.596552, 0.148232, 0.288036, 0.0730354, 0.0487891},
{0.720139, 0.22014, 0.464168, 0.386916, 0.993168, 0.790211, 0.850887, 0.978949, 0.223494, 0.412409, 0.867311, 0.302134, 0.941928, 0.38448, 0.886305, 0.494756, 0.0610682, 0.0326193, 0.514631, 0.769354, 0.828792, 0.961032, 0.131422, 0.278389, 0.852186, 0.721341, 0.0405149, 0.446539, 0.114422, 0.114111, 0.968358, 0.533854, 0.996578, 0.619603, 0.968577, 0.52187, 0.767365, 0.370004, 0.597953, 0.307077, 0.903916, 0.646264, 0.460432, 0.749975, 0.296705, 0.741048, 0.566234, 0.345917, 0.130487, 0.934192, 0.736912, 0.62893, 0.821164, 0.336908, 0.286655, 0.362009, 0.267122, 0.916176, 0.395848, 0.611216, 0.178498, 0.236683, 0.807893, 0.476653, 0.04162, 0.647775, 0.989743, 0.304289, 0.707452, 0.557883, 0.178789, 0.0349249, 0.495696, 0.869709, 0.385645, 0.717028, 0.965628, 0.438835, 0.245543, 0.377002, 0.473429, 0.397438, 0.275147, 0.0421879, 0.559778, 0.970339, 0.019238, 0.0934932, 0.0781849, 0.783725, 0.629561, 0.495983, 0.191751, 0.0659062, 0.22376, 0.638233, 0.724504, 0.823188, 0.0230895, 0.195447},
{0.00625172, 0.979512, 0.492607, 0.305714, 0.101336, 0.140092, 0.695992, 0.629659, 0.986462, 0.165578, 0.918943, 0.488933, 0.278052, 0.898227, 0.115678, 0.0126269, 0.0374785, 0.213851, 0.741357, 0.204409, 0.601943, 0.41993, 0.51885, 0.269214, 0.921389, 0.462438, 0.767054, 0.00305896, 0.474488, 0.865148, 0.855788, 0.291485, 0.838788, 0.78483, 0.384613, 0.889688, 0.633045, 0.844361, 0.603029, 0.827324, 0.613911, 0.30749, 0.397281, 0.392541, 0.375905, 0.488351, 0.55998, 0.119264, 0.207463, 0.508939, 0.0106686, 0.928114, 0.879141, 0.692963, 0.828025, 0.224369, 0.0911016, 0.994125, 0.137071, 0.415582, 0.512484, 0.427036, 0.0251003, 0.429277, 0.604093, 0.185238, 0.921132, 0.748279, 0.166016, 0.652333, 0.647877, 0.245642, 0.639523, 0.444331, 0.318195, 0.199821, 0.523593, 0.153545, 0.0902743, 0.509106, 0.259523, 0.379365, 0.863086, 0.0667704, 0.0967517, 0.98573, 0.8003, 0.651021, 0.909071, 0.0508591, 0.581847, 0.947395, 0.563211, 0.205865, 0.377206, 0.885891, 0.33861, 0.308329, 0.932032, 0.523364},
{0.442058, 0.250726, 0.783259, 0.44082, 0.803156, 0.380297, 0.458821, 0.750942, 0.68552, 0.165503, 0.669876, 0.207059, 0.0473197, 0.326784, 0.544103, 0.160654, 0.631985, 0.0444168, 0.711334, 0.890305, 0.549555, 0.321713, 0.517573, 0.918329, 0.754012, 0.244192, 0.904317, 0.0402482, 0.350073, 0.733871, 0.77142, 0.500464, 0.250221, 0.135692, 0.476995, 0.244272, 0.987757, 0.431188, 0.114892, 0.302712, 0.569437, 0.053836, 0.754019, 0.0236561, 0.877601, 0.877316, 0.223117, 0.680002, 0.125078, 0.0783162, 0.786434, 0.587018, 0.772732, 0.479865, 0.523569, 0.842016, 0.819341, 0.542049, 0.688211, 0.496418, 0.569713, 0.825937, 0.859512, 0.372789, 0.72958, 0.149214, 0.567347, 0.0707201, 0.197351, 0.0559941, 0.450758, 0.152619, 0.526934, 0.816736, 0.922389, 0.525774, 0.608601, 0.634788, 0.122339, 0.19717, 0.467683, 0.449826, 0.883665, 0.857896, 0.962503, 0.22675, 0.0570506, 0.139098, 0.122168, 0.839692, 0.426771, 0.757442, 0.902771, 0.74204, 0.961323, 0.404228, 0.280571, 0.421062, 0.48024, 0.81898},
};

static const std::vector<float> costs = {998.842, 942.575, 964.874, 981.586, 351.668, 988.791, 332.595, 645.236, 871.866, 208.05, 881.79, 30.4355, 898.962, 886.543, 374.567, 474.012, 261.462, 165.973, 920.882, 192.186, 553.51, 62.3331, 212.085, 649.267, 803.265, 806.342, 466.731, 827.598, 140.049, 175.757, 547.287, 772.371, 725.338, 694.381, 132.616, 880.491, 899.707, 12.782, 818.005, 329.996, 760.342, 410.12, 821.886, 147.971, 780.315, 908.104, 303.252, 233.088, 615.892, 763.359, 746.477, 877.052, 549.348, 559.696, 150.243, 107.323, 416.998, 703.738, 666.147, 306.111, 677.993, 353.231, 458.868, 379.515, 43.3064, 293.766, 250.54, 570.442, 632.883, 394.922, 715.422, 374.543, 383.406, 575.756, 91.9382, 69.1766, 461.368, 617.772, 767.015, 25.2947, 97.3923, 701.797, 103.8, 554.326, 323.073, 155.172, 324.58, 704.57, 299.22, 60.3894, 810.617, 85.9928, 324.736, 60.2891, 40.1816, 967.494, 501.143, 835.48, 511.114, 585.452};

static const std::vector<float> min_impressions = {0.00666984, 0.482191, 0.915861, 0.976796, 0.313329};

//
#endif
