#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 20;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_indep(cons_indep(cons_indep(cons_incl(cons_indep(cons_excl(cons_indep(cons_excl(cons_indep(cons_incl(events[29], events[10]),events[41]),events[12]),events[9]),events[1]),events[45]),events[34]),events[5]),events[37]),events[31]),cons_incl(cons_indep(cons_incl(cons_excl(cons_incl(cons_incl(cons_incl(cons_incl(cons_indep(cons_incl(events[0], events[5]),events[16]),events[12]),events[14]),events[7]),events[9]),events[19]),events[33]),events[22]),events[38]),cons_incl(cons_indep(cons_indep(cons_incl(cons_indep(cons_indep(cons_excl(cons_indep(cons_incl(cons_indep(events[49], events[43]),events[32]),events[36]),events[21]),events[40]),events[6]),events[10]),events[28]),events[31]),events[25]),cons_indep(cons_indep(cons_indep(cons_excl(cons_indep(cons_indep(cons_incl(cons_incl(cons_indep(cons_excl(events[18], events[12]),events[47]),events[30]),events[7]),events[3]),events[23]),events[13]),events[19]),events[44]),events[28]),cons_incl(cons_incl(cons_excl(cons_indep(cons_excl(cons_incl(cons_excl(cons_excl(cons_excl(cons_excl(events[4], events[44]),events[18]),events[41]),events[22]),events[23]),events[25]),events[32]),events[15]),events[9]),events[43]),cons_excl(cons_excl(cons_indep(cons_incl(cons_indep(cons_excl(cons_incl(cons_indep(cons_incl(cons_indep(events[28], events[27]),events[49]),events[18]),events[40]),events[19]),events[46]),events[39]),events[17]),events[13]),events[37]),cons_excl(cons_indep(cons_incl(cons_excl(cons_excl(cons_excl(cons_incl(cons_indep(cons_excl(cons_incl(events[10], events[29]),events[12]),events[43]),events[1]),events[32]),events[20]),events[0]),events[2]),events[5]),events[6]),cons_incl(cons_indep(cons_excl(cons_incl(cons_indep(cons_indep(cons_incl(cons_incl(cons_excl(cons_incl(events[18], events[39]),events[13]),events[19]),events[9]),events[43]),events[14]),events[2]),events[4]),events[24]),events[16]),cons_indep(cons_indep(cons_incl(cons_indep(cons_incl(cons_incl(cons_excl(cons_excl(cons_indep(cons_excl(events[49], events[32]),events[30]),events[3]),events[0]),events[41]),events[46]),events[17]),events[40]),events[18]),events[28]),cons_incl(cons_indep(cons_excl(cons_excl(cons_indep(cons_incl(cons_indep(cons_incl(cons_indep(cons_incl(events[39], events[3]),events[17]),events[41]),events[40]),events[5]),events[2]),events[38]),events[43]),events[24]),events[29]),cons_excl(cons_excl(cons_incl(cons_excl(cons_incl(cons_incl(cons_incl(cons_excl(cons_excl(cons_incl(events[37], events[13]),events[3]),events[30]),events[26]),events[38]),events[5]),events[41]),events[2]),events[12]),events[40]),cons_incl(cons_incl(cons_indep(cons_indep(cons_indep(cons_excl(cons_excl(cons_incl(cons_excl(cons_indep(events[22], events[42]),events[7]),events[6]),events[2]),events[25]),events[13]),events[24]),events[44]),events[18]),events[10]),cons_excl(cons_indep(cons_indep(cons_incl(cons_excl(cons_excl(cons_indep(cons_excl(cons_indep(cons_excl(events[24], events[38]),events[11]),events[14]),events[12]),events[9]),events[19]),events[16]),events[37]),events[46]),events[31]),cons_incl(cons_indep(cons_incl(cons_indep(cons_excl(cons_excl(cons_incl(cons_excl(cons_incl(cons_incl(events[26], events[18]),events[8]),events[35]),events[6]),events[16]),events[34]),events[4]),events[17]),events[12]),events[15]),cons_incl(cons_indep(cons_indep(cons_excl(cons_excl(cons_indep(cons_indep(cons_excl(cons_incl(cons_indep(events[32], events[28]),events[2]),events[20]),events[23]),events[42]),events[30]),events[18]),events[6]),events[41]),events[31]),cons_excl(cons_excl(cons_excl(cons_excl(cons_indep(cons_excl(cons_excl(cons_incl(cons_incl(cons_incl(events[43], events[2]),events[29]),events[1]),events[42]),events[17]),events[47]),events[6]),events[27]),events[44]),events[25]),cons_excl(cons_indep(cons_indep(cons_indep(cons_incl(cons_incl(cons_excl(cons_indep(cons_incl(cons_incl(events[48], events[23]),events[8]),events[13]),events[16]),events[19]),events[33]),events[36]),events[27]),events[4]),events[44]),cons_incl(cons_incl(cons_incl(cons_excl(cons_excl(cons_indep(cons_incl(cons_indep(cons_excl(cons_excl(events[38], events[14]),events[4]),events[3]),events[2]),events[39]),events[36]),events[9]),events[22]),events[41]),events[16]),cons_excl(cons_incl(cons_indep(cons_indep(cons_excl(cons_indep(cons_excl(cons_incl(cons_indep(cons_excl(events[17], events[44]),events[35]),events[0]),events[8]),events[47]),events[49]),events[11]),events[26]),events[48]),events[23]),cons_indep(cons_indep(cons_excl(cons_excl(cons_incl(cons_indep(cons_incl(cons_indep(cons_indep(cons_indep(events[11], events[48]),events[36]),events[37]),events[12]),events[2]),events[43]),events[33]),events[47]),events[20]),events[25])};


static const std::vector< std::vector<float> > prob = {{0.194376, 0.268998, 0.70361, 0.0560253, 0.961752, 0.668902, 0.00788126, 0.743657, 0.589014, 0.377901, 0.715478, 0.635867, 0.254822, 0.864852, 0.746705, 0.579643, 0.28548, 0.199952, 0.446752, 0.878391, 0.0721632, 0.720054, 0.718911, 0.412079, 0.136112, 0.256099, 0.900495, 0.156764, 0.947887, 0.188935, 0.937459, 0.469326, 0.42243, 0.0582049, 0.373493, 0.457073, 0.834193, 0.93798, 0.0129696, 0.02543, 0.786135, 0.304047, 0.271451, 0.865921, 0.328017, 0.688487, 0.55714, 0.351988, 0.620165, 0.824924},
{0.678836, 0.964503, 0.893085, 0.729497, 0.854523, 0.531623, 0.268368, 0.886343, 0.928543, 0.780947, 0.204687, 0.424919, 0.0636902, 0.96745, 0.858573, 0.75655, 0.30398, 0.899627, 0.690987, 0.364696, 0.861357, 0.43666, 0.573551, 0.93929, 0.340357, 0.535393, 0.286613, 0.540398, 0.883039, 0.267491, 0.885272, 0.520077, 0.781348, 0.0209269, 0.855035, 0.501018, 0.683018, 0.018046, 0.717831, 0.468727, 0.728231, 0.26482, 0.348199, 0.559808, 0.377862, 0.20465, 0.160803, 0.831364, 0.926132, 0.415342},
{0.359211, 0.184237, 0.295751, 0.505645, 0.493032, 0.349091, 0.41215, 0.0620785, 0.67295, 0.681929, 0.5162, 0.893826, 0.124455, 0.64426, 0.349301, 0.103748, 0.818933, 0.92668, 0.278854, 0.939479, 0.74284, 0.0781353, 0.00011035, 0.0843733, 0.0795803, 0.995413, 0.274324, 0.835034, 0.840534, 0.999674, 0.425856, 0.0839974, 0.548412, 0.178863, 0.909776, 0.789237, 0.396746, 0.807999, 0.435253, 0.0526229, 0.500795, 0.42363, 0.479226, 0.357396, 0.879762, 0.862022, 0.933357, 0.463369, 0.02874, 0.205791},
{0.418206, 0.021418, 0.293134, 0.209641, 0.192744, 0.718725, 0.191766, 0.582195, 0.466143, 0.524575, 0.957942, 0.880292, 0.385245, 0.931666, 0.376466, 0.129374, 0.178609, 0.0644053, 0.928213, 0.711322, 0.883475, 0.04877, 0.40848, 0.165621, 0.226595, 0.386664, 0.310147, 0.275069, 0.906428, 0.395719, 0.359538, 0.589014, 0.0350636, 0.583128, 0.0155094, 0.181575, 0.184978, 0.202239, 0.590167, 0.205825, 0.961582, 0.0820252, 0.602453, 0.867716, 0.203613, 0.338448, 0.953005, 0.154275, 0.430105, 0.700585},
{0.504825, 0.906234, 0.816054, 0.0102691, 0.967051, 0.776647, 0.658987, 0.436378, 0.620369, 0.599664, 0.704756, 0.091986, 0.76493, 0.611694, 0.660966, 0.411701, 0.434296, 0.729229, 0.202936, 0.22741, 0.626912, 0.137475, 0.197799, 0.897518, 0.964844, 0.723882, 0.788557, 0.035442, 0.564824, 0.97272, 0.620568, 0.347083, 0.130938, 0.63447, 0.590104, 0.97276, 0.459718, 0.748783, 0.13482, 0.720943, 0.624806, 0.0804555, 0.304111, 0.967651, 0.0159872, 0.423356, 0.696854, 0.550876, 0.281992, 0.847875},
{0.897011, 0.401642, 0.144464, 0.139062, 0.651407, 0.768559, 0.387142, 0.294057, 0.913229, 0.390657, 0.241692, 0.670102, 0.117042, 0.400108, 0.216727, 0.785516, 0.388593, 0.156599, 0.618442, 0.983118, 0.102767, 0.443768, 0.346151, 0.93924, 0.932317, 0.684144, 0.421378, 0.946803, 0.652251, 0.966633, 0.725923, 0.399419, 0.357512, 0.0251052, 0.468404, 0.550628, 0.998841, 0.667868, 0.132006, 0.000864577, 0.77017, 0.931283, 0.943867, 0.268769, 0.415572, 0.317984, 0.0479943, 0.338171, 0.567867, 0.660425},
{0.0854203, 0.0158686, 0.7363, 0.69269, 0.69484, 0.923095, 0.904706, 0.877357, 0.654403, 0.855582, 0.47111, 0.789299, 0.156076, 0.710188, 0.821827, 0.733088, 0.204177, 0.804149, 0.371166, 0.358616, 0.0038266, 0.418627, 0.352549, 0.733231, 0.746409, 0.353851, 0.727174, 0.398921, 0.0181928, 0.35363, 0.656427, 0.935629, 0.328206, 0.724415, 0.325802, 0.515531, 0.0864304, 0.215395, 0.119249, 0.525478, 0.724968, 0.530394, 0.410102, 0.531869, 0.791687, 0.882082, 0.215214, 0.177052, 0.227731, 0.358121},
{0.0811831, 0.29761, 0.153461, 0.454523, 0.464765, 0.866415, 0.678116, 0.13872, 0.548742, 0.967886, 0.972548, 0.370845, 0.583502, 0.673745, 0.156192, 0.728777, 0.549341, 0.0544603, 0.320807, 0.235043, 0.45366, 0.683631, 0.490937, 0.387271, 0.638123, 0.256201, 0.288522, 0.694957, 0.736755, 0.420725, 0.39678, 0.348973, 0.74654, 0.153147, 0.822916, 0.432502, 0.660132, 0.797928, 0.22369, 0.609739, 0.636168, 0.529635, 0.451833, 0.334169, 0.682467, 0.0788307, 0.0699455, 0.308934, 0.894527, 0.962827},
{0.495059, 0.189475, 0.691053, 0.848623, 0.0402877, 0.864199, 0.0497671, 0.964713, 0.509823, 0.466325, 0.542729, 0.972487, 0.40313, 0.348116, 0.172101, 0.892108, 0.19366, 0.484665, 0.217035, 0.408415, 0.145939, 0.0705366, 0.125348, 0.143697, 0.64839, 0.53836, 0.217548, 0.513867, 0.95437, 0.111735, 0.593753, 0.546272, 0.442977, 0.0708447, 0.175262, 0.430092, 0.710173, 0.505954, 0.11687, 0.867959, 0.333819, 0.634791, 0.18202, 0.877495, 0.35896, 0.760995, 0.0666863, 0.0443753, 0.197232, 0.455312},
{0.548643, 0.585836, 0.241931, 0.104531, 0.780817, 0.911509, 0.340091, 0.216388, 0.0296967, 0.903157, 0.40413, 0.956366, 0.590047, 0.532564, 0.869887, 0.495476, 0.561432, 0.26171, 0.51191, 0.112317, 0.672226, 0.360609, 0.975931, 0.0877445, 0.821709, 0.943745, 0.265817, 0.150256, 0.748319, 0.534997, 0.497656, 0.162151, 0.491525, 0.548679, 0.871259, 0.716119, 0.117304, 0.886876, 0.193984, 0.499181, 0.198723, 0.462248, 0.633198, 0.407963, 0.596814, 0.979733, 0.352962, 0.883315, 0.37847, 0.12331},
{0.448527, 0.935919, 0.713729, 0.137251, 0.28471, 0.426789, 0.755594, 0.991012, 0.573068, 0.14682, 0.473074, 0.524688, 0.911088, 0.260729, 0.302812, 0.886692, 0.719394, 0.243561, 0.170163, 0.573207, 0.955443, 0.488088, 0.582527, 0.83934, 0.952529, 0.470821, 0.490429, 0.894399, 0.807389, 0.960991, 0.284325, 0.680781, 0.192927, 0.0986717, 0.250508, 0.296369, 0.363956, 0.227863, 0.986589, 0.412058, 0.866836, 0.837379, 0.25548, 0.692011, 0.342097, 0.997638, 0.616685, 0.742753, 0.244748, 0.720635},
{0.049599, 0.920076, 0.669575, 0.773611, 0.0944585, 0.272754, 0.980894, 0.75265, 0.186947, 0.783959, 0.602026, 0.126107, 0.738094, 0.0491845, 0.722742, 0.350466, 0.272884, 0.548087, 0.642787, 0.838159, 0.02566, 0.198452, 0.249557, 0.83018, 0.617795, 0.211173, 0.226545, 0.976873, 0.512775, 0.742095, 0.0677753, 0.840063, 0.473894, 0.985747, 0.629365, 0.172961, 0.498441, 0.49081, 0.545885, 0.581821, 0.026877, 0.235264, 0.39872, 0.245621, 0.200837, 0.87871, 0.326622, 0.371476, 0.608654, 0.981401},
{0.834958, 0.436163, 0.744301, 0.361835, 0.783386, 0.89555, 0.711942, 0.627388, 0.738048, 0.459581, 0.378461, 0.327447, 0.249713, 0.480124, 0.434214, 0.874079, 0.732346, 0.464101, 0.523119, 0.766936, 0.253144, 0.381375, 0.453938, 0.0672226, 0.396534, 0.14659, 0.424463, 0.619225, 0.403789, 0.559505, 0.1739, 0.914807, 0.481023, 0.867882, 0.00939999, 0.269086, 0.639654, 0.524876, 0.92575, 0.325508, 0.734024, 0.353428, 0.835417, 0.731995, 0.385218, 0.0848962, 0.330738, 0.299095, 0.731265, 0.385291},
{0.588296, 0.712933, 0.942676, 0.13399, 0.83729, 0.839504, 0.767237, 0.653095, 0.577031, 0.498917, 0.234388, 0.620383, 0.0210771, 0.172135, 0.172285, 0.611983, 0.375109, 0.492819, 0.59918, 0.248949, 0.573958, 0.211866, 0.585214, 0.9975, 0.895435, 0.770605, 0.902805, 0.994103, 0.284259, 0.587653, 0.420792, 0.325516, 0.643203, 0.0859599, 0.432647, 0.490414, 0.198808, 0.705467, 0.34866, 0.075914, 0.406322, 0.15639, 0.541481, 0.307034, 0.900416, 0.916905, 0.131036, 0.247912, 0.146978, 0.905002},
{0.818838, 0.256525, 0.350296, 0.560268, 0.583397, 0.0461982, 0.0593672, 0.556718, 0.949112, 0.168698, 0.811909, 0.110223, 0.479407, 0.654329, 0.22985, 0.0303004, 0.351574, 0.502942, 0.517639, 0.526514, 0.00977716, 0.246012, 0.390802, 0.303591, 0.191205, 0.0570356, 0.263381, 0.449271, 0.909155, 0.635926, 0.599575, 0.948785, 0.529466, 0.986713, 0.634569, 0.949105, 0.0536094, 0.680527, 0.997641, 0.15197, 0.908168, 0.842762, 0.637746, 0.589956, 0.819561, 0.0178431, 0.942344, 0.317654, 0.598251, 0.18453},
{0.212292, 0.712709, 0.689524, 0.991189, 0.295545, 0.354353, 0.110558, 0.645259, 0.779707, 0.73845, 0.452943, 0.967157, 0.0768883, 0.702984, 0.205467, 0.385668, 0.932027, 0.414421, 0.428387, 0.730535, 0.665229, 0.636023, 0.298182, 0.864291, 0.0440638, 0.29647, 0.603116, 0.593091, 0.199848, 0.420851, 0.769689, 0.164412, 0.23264, 0.0238906, 0.205408, 0.231984, 0.783331, 0.782839, 0.534859, 0.169674, 0.706254, 0.940592, 0.551819, 0.138266, 0.669079, 0.221371, 0.588062, 0.80314, 0.518916, 0.456502},
{0.996011, 0.837615, 0.455889, 0.183858, 0.154988, 0.9116, 0.992569, 0.41815, 0.262074, 0.459295, 0.707002, 0.653795, 0.114545, 0.73389, 0.236558, 0.776038, 0.78061, 0.146337, 0.108289, 0.861256, 0.5574, 0.383283, 0.742666, 0.569175, 0.227614, 0.386306, 0.433916, 0.224926, 0.101298, 0.536087, 0.847077, 0.697054, 0.825351, 0.626743, 0.106466, 0.949386, 0.561941, 0.710833, 0.636874, 0.475466, 0.243986, 0.703647, 0.0315341, 0.317797, 0.927796, 0.0769852, 0.591016, 0.83739, 0.490418, 0.46514},
{0.356967, 0.647635, 0.688904, 0.270473, 0.383265, 0.669404, 0.795618, 0.745633, 0.357075, 0.240654, 0.5632, 0.0862416, 0.528786, 0.486709, 0.461716, 0.144634, 0.622872, 0.681228, 0.559643, 0.292407, 0.426413, 0.408363, 0.947067, 0.859085, 0.395477, 0.249672, 0.682704, 0.657004, 0.670663, 0.226997, 0.1276, 0.435853, 0.711842, 0.100715, 0.82245, 0.569788, 0.640442, 0.823784, 0.290813, 0.935204, 0.981027, 0.883864, 0.498324, 0.586631, 0.690134, 0.690388, 0.244383, 0.867369, 0.272595, 0.100447},
{0.653779, 0.183456, 0.440846, 0.414864, 0.0638759, 0.444284, 0.187883, 0.661635, 0.488472, 0.0023699, 0.839272, 0.363158, 0.123212, 0.447272, 0.74748, 0.840415, 0.242536, 0.367655, 0.937127, 0.620508, 0.503623, 0.96998, 0.0553529, 0.519157, 0.95851, 0.0378316, 0.0844653, 0.909487, 0.53672, 0.542354, 0.552699, 0.848467, 0.414818, 0.126767, 0.954893, 0.036491, 0.520215, 0.164322, 0.204097, 0.682226, 0.431897, 0.632964, 0.557593, 0.406874, 0.74873, 0.772671, 0.669573, 0.597684, 0.072379, 0.925953},
{0.315197, 0.570251, 0.718445, 0.599238, 0.604222, 0.786401, 0.892538, 0.82082, 0.904868, 0.419265, 0.536338, 0.235358, 0.545585, 0.329453, 0.301222, 0.845515, 0.433478, 0.0722981, 0.358698, 0.231956, 0.583459, 0.58826, 0.460403, 0.783836, 0.0741287, 0.319527, 0.353045, 0.0278886, 0.0935412, 0.89339, 0.376947, 0.114404, 0.0256822, 0.182461, 0.748381, 0.973864, 0.400932, 0.235726, 0.861756, 0.415493, 0.483539, 0.922968, 0.782652, 0.599293, 0.647933, 0.887705, 0.0965606, 0.244424, 0.713313, 0.955139},
};

static const std::vector<float> costs = {936.402, 293.167, 579.156, 213.182, 325.287, 795.856, 463.016, 905.677, 889.721, 26.7673, 49.2472, 30.466, 698.699, 678.409, 697.825, 923.868, 40.3741, 151.261, 118.901, 729.395, 517.601, 31.1999, 824.242, 488.948, 769.386, 91.5126, 498.848, 333.321, 31.0242, 700.472, 643.652, 511.408, 197.514, 847.465, 573.403, 443.292, 698.196, 317.043, 678.147, 528.315, 284.162, 303.408, 50.4643, 878.224, 463.102, 306.187, 201.357, 795.936, 629.841, 416.291};

static const std::vector<float> min_impressions = {0.00107711, 0.699844, 0.958369, 0.8233, 0.854089, 0.7534, 0.496607, 0.531579, 0.830663, 0.489136, 0.936337, 0.0609953, 0.581047, 0.458702, 0.598157, 0.101881, 0.258196, 0.549035, 0.451643, 0.332142};

//
#endif
