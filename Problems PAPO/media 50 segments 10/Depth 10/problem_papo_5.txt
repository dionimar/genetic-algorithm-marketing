#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 10;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_excl(cons_excl(cons_excl(cons_indep(cons_excl(cons_incl(cons_indep(cons_indep(cons_indep(cons_excl(events[6], events[3]),events[37]),events[20]),events[28]),events[38]),events[2]),events[46]),events[14]),events[48]),events[32]),cons_indep(cons_excl(cons_incl(cons_incl(cons_indep(cons_excl(cons_excl(cons_incl(cons_incl(cons_indep(events[1], events[38]),events[23]),events[16]),events[37]),events[42]),events[15]),events[47]),events[24]),events[18]),events[39]),cons_indep(cons_excl(cons_incl(cons_incl(cons_incl(cons_indep(cons_incl(cons_incl(cons_excl(cons_excl(events[9], events[1]),events[6]),events[31]),events[4]),events[5]),events[11]),events[39]),events[44]),events[22]),events[15]),cons_excl(cons_indep(cons_indep(cons_excl(cons_indep(cons_incl(cons_excl(cons_incl(cons_incl(cons_incl(events[49], events[42]),events[33]),events[30]),events[19]),events[44]),events[4]),events[21]),events[22]),events[45]),events[27]),cons_excl(cons_indep(cons_excl(cons_excl(cons_indep(cons_excl(cons_excl(cons_indep(cons_excl(cons_indep(events[43], events[34]),events[29]),events[20]),events[40]),events[7]),events[27]),events[32]),events[24]),events[2]),events[25]),cons_incl(cons_excl(cons_indep(cons_excl(cons_excl(cons_indep(cons_excl(cons_excl(cons_excl(cons_excl(events[3], events[17]),events[42]),events[26]),events[48]),events[39]),events[9]),events[1]),events[40]),events[33]),events[29]),cons_incl(cons_incl(cons_indep(cons_excl(cons_incl(cons_indep(cons_incl(cons_indep(cons_excl(cons_excl(events[32], events[15]),events[43]),events[16]),events[37]),events[4]),events[38]),events[39]),events[26]),events[14]),events[47]),cons_incl(cons_indep(cons_incl(cons_incl(cons_incl(cons_excl(cons_incl(cons_indep(cons_indep(cons_excl(events[35], events[21]),events[41]),events[19]),events[31]),events[11]),events[26]),events[44]),events[30]),events[45]),events[28]),cons_indep(cons_indep(cons_indep(cons_excl(cons_incl(cons_incl(cons_excl(cons_indep(cons_excl(cons_incl(events[8], events[9]),events[0]),events[12]),events[37]),events[38]),events[15]),events[36]),events[25]),events[11]),events[26]),cons_excl(cons_indep(cons_excl(cons_excl(cons_incl(cons_excl(cons_excl(cons_incl(cons_excl(cons_indep(events[27], events[32]),events[8]),events[49]),events[16]),events[48]),events[30]),events[7]),events[25]),events[22]),events[2])};


static const std::vector< std::vector<float> > prob = {{0.0954248, 0.376501, 0.361235, 0.487414, 0.809231, 0.218543, 0.774889, 0.19252, 0.429484, 0.75971, 0.759524, 0.190851, 0.170391, 0.0429607, 0.18266, 0.63217, 0.355038, 0.587677, 0.391045, 0.804416, 0.889051, 0.703888, 0.978557, 0.401979, 0.452569, 0.9872, 0.686834, 0.873962, 0.988173, 0.990418, 0.115551, 0.455968, 0.891741, 0.303387, 0.123274, 0.511874, 0.204492, 0.87502, 0.7012, 0.0176273, 0.784695, 0.0129378, 0.763936, 0.737212, 0.0138982, 0.973501, 0.280388, 0.144133, 0.844844, 0.589913},
{0.344382, 0.193379, 0.0873216, 0.227826, 0.679084, 0.831051, 0.90297, 0.885362, 0.935829, 0.969155, 0.814383, 0.565652, 0.202131, 0.198634, 0.570496, 0.45569, 0.878025, 0.359115, 0.940958, 0.0653114, 0.996166, 0.769652, 0.843226, 0.927133, 0.797786, 0.846713, 0.300964, 0.343837, 0.0223852, 0.773042, 0.546438, 0.576933, 0.591395, 0.058981, 0.23791, 0.160701, 0.647196, 0.869353, 0.736063, 0.154755, 0.966499, 0.304388, 0.0318626, 0.139103, 0.915193, 0.714347, 0.785798, 0.478779, 0.633167, 0.79044},
{0.684913, 0.853041, 0.358512, 0.426075, 0.735469, 0.234224, 0.812617, 0.0481845, 0.649413, 0.232747, 0.408996, 0.929004, 0.769125, 0.458014, 0.0750732, 0.378406, 0.2728, 0.419479, 0.739839, 0.238374, 0.101425, 0.951472, 0.729511, 0.99029, 0.976033, 0.252203, 0.978493, 0.168882, 0.857774, 0.179442, 0.5652, 0.213307, 0.868363, 0.462576, 0.87962, 0.152574, 0.775208, 0.613217, 0.410376, 0.351609, 0.293218, 0.567921, 0.188281, 0.139976, 0.301707, 0.627431, 0.0128185, 0.580543, 0.333985, 0.613339},
{0.886118, 0.815872, 0.442172, 0.249798, 0.614106, 0.80345, 0.141415, 0.995686, 0.45741, 0.844184, 0.614501, 0.986955, 0.717192, 0.992818, 0.0383948, 0.819773, 0.119633, 0.479876, 0.267824, 0.413916, 0.809103, 0.732423, 0.239821, 0.282507, 0.707254, 0.160904, 0.732458, 0.478495, 0.138088, 0.108037, 0.350638, 0.0982006, 0.160277, 0.431063, 0.74702, 0.358903, 0.375164, 0.956484, 0.180075, 0.217655, 0.635988, 0.204262, 0.384276, 0.426767, 0.458979, 0.132296, 0.148353, 0.932782, 0.0609734, 0.132266},
{0.614242, 0.0201727, 0.165149, 0.58213, 0.840259, 0.828549, 0.417834, 0.0141623, 0.240704, 0.680323, 0.112562, 0.597943, 0.0161203, 0.0775411, 0.731154, 0.656672, 0.132991, 0.608122, 0.128923, 0.284019, 0.993853, 0.0309036, 0.853178, 0.802938, 0.674105, 0.951501, 0.0762103, 0.998061, 0.503581, 0.488074, 0.238474, 0.121018, 0.884404, 0.742816, 0.741086, 0.570174, 0.849832, 0.151616, 0.3907, 0.209799, 0.416109, 0.634111, 0.40405, 0.22992, 0.480699, 0.206752, 0.566239, 0.9949, 0.580184, 0.742402},
{0.557009, 0.660411, 0.879814, 0.883175, 0.286635, 0.63285, 0.180211, 0.568784, 0.489732, 0.234855, 0.87704, 0.540535, 0.549127, 0.419982, 0.532234, 0.982877, 0.416706, 0.530497, 0.497279, 0.689788, 0.278002, 0.321317, 0.62263, 0.431594, 0.425208, 0.795162, 0.724302, 0.362488, 0.210755, 0.987405, 0.94946, 0.542768, 0.817654, 0.07517, 0.628054, 0.750937, 0.244726, 0.629536, 0.554663, 0.119527, 0.808183, 0.320495, 0.56817, 0.182926, 0.673947, 0.0333094, 0.496231, 0.188658, 0.239838, 0.372634},
{0.831473, 0.746045, 0.18205, 0.52631, 0.441287, 0.921738, 0.0402255, 0.622361, 0.524137, 0.366207, 0.224245, 0.411587, 0.601797, 0.697266, 0.484248, 0.221865, 0.578411, 0.623631, 0.634075, 0.0902973, 0.522613, 0.907652, 0.352755, 0.381027, 0.942062, 0.426381, 0.827063, 0.998593, 0.493245, 0.249786, 0.261571, 0.444991, 0.824274, 0.940374, 0.425132, 0.906934, 0.539308, 0.560349, 0.40406, 0.3771, 0.831171, 0.647001, 0.222432, 0.0738958, 0.728866, 0.514778, 0.725293, 0.623857, 0.896408, 0.760694},
{0.488087, 0.317839, 0.156827, 0.0320434, 0.461929, 0.0500337, 0.661272, 0.354627, 0.647947, 0.401698, 0.7083, 0.218297, 0.425857, 0.364966, 0.317439, 0.170953, 0.918526, 0.193423, 0.459676, 0.32069, 0.971192, 0.576449, 0.208175, 0.374785, 0.454605, 0.667602, 0.389593, 0.10821, 0.813584, 0.745361, 0.569872, 0.883714, 0.569182, 0.571791, 0.153568, 0.615982, 0.17696, 0.189132, 0.975115, 0.160222, 0.199279, 0.876557, 0.163733, 0.274348, 0.00566259, 0.322982, 0.170903, 0.566296, 0.689455, 0.958748},
{0.541798, 0.0566719, 0.131185, 0.767892, 0.828822, 0.740711, 0.391749, 0.202287, 0.554017, 0.460443, 0.85007, 0.697822, 0.824819, 0.67809, 0.313595, 0.98138, 0.811939, 0.205855, 0.340095, 0.908312, 0.985339, 0.188335, 0.35635, 0.125459, 0.402504, 0.698782, 0.298688, 0.157377, 0.38253, 0.897737, 0.248471, 0.289838, 0.90519, 0.847767, 0.617191, 0.536295, 0.589038, 0.463306, 0.735137, 0.80395, 0.784526, 0.716367, 0.982512, 0.605064, 0.251557, 0.413921, 0.362007, 0.316171, 0.440553, 0.579021},
{0.467789, 0.31897, 0.782678, 0.933302, 0.915699, 0.784849, 0.876597, 0.325732, 0.451027, 0.415371, 0.466477, 0.307618, 0.91965, 0.437388, 0.168437, 0.223786, 0.679046, 0.90956, 0.236487, 0.0673165, 0.454083, 0.336066, 0.167676, 0.412168, 0.978869, 0.554515, 0.553603, 0.766992, 0.222154, 0.674603, 0.245745, 0.19467, 0.0110159, 0.070959, 0.286591, 0.283359, 0.636638, 0.604454, 0.094719, 0.279796, 0.185242, 0.0727779, 0.715024, 0.37067, 0.195286, 0.593124, 0.0552387, 0.757344, 0.825909, 0.02652},
};

static const std::vector<float> costs = {167.453, 548.78, 104.151, 37.3633, 364.298, 200.087, 822.012, 187.554, 846.43, 370.521, 279.72, 270.987, 947.627, 94.0898, 244.326, 312.543, 501.419, 135.864, 828.809, 597.734, 239.667, 991.614, 268.569, 248.337, 843.655, 207.661, 996.528, 648.749, 766.209, 590.226, 634.57, 222.059, 281, 454.653, 541.061, 155.913, 120.263, 990.578, 154.218, 937.596, 189.8, 740.333, 780.569, 985.656, 443.903, 13.3878, 88.3331, 385.728, 494.642, 345.939};

static const std::vector<float> min_impressions = {0.723829, 0.0414078, 0.559756, 0.262767, 0.379647, 0.970107, 0.344803, 0.810647, 0.19206, 0.863137};

//
#endif
