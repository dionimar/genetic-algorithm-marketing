#ifndef PROBLEM_H
#define PROBLEM_H
#include "syntax_tree.hpp"
#include <iostream>

#define PAPO

static const int media = 50;
static const int segments = 10;

static const std::vector<Syntax_Tree> events = {
    cons_event(0),  cons_event(1),  cons_event(2),  cons_event(3),
    cons_event(4),  cons_event(5),  cons_event(6),  cons_event(7),
    cons_event(8),  cons_event(9),  cons_event(10), cons_event(11),
    cons_event(12), cons_event(13), cons_event(14), cons_event(15),
    cons_event(16), cons_event(17), cons_event(18), cons_event(19),
    cons_event(20), cons_event(21), cons_event(22), cons_event(23),
    cons_event(24), cons_event(25), cons_event(26), cons_event(27),
    cons_event(28), cons_event(29), cons_event(30), cons_event(31),
    cons_event(32), cons_event(33), cons_event(34), cons_event(35),
    cons_event(36), cons_event(37), cons_event(38), cons_event(39),
    cons_event(40), cons_event(41), cons_event(42), cons_event(43),
    cons_event(44), cons_event(45), cons_event(46), cons_event(47),
    cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {
    cons_indep(
        cons_indep(
            cons_excl(
                cons_excl(
                    cons_excl(cons_incl(cons_excl(cons_indep(
                                                      cons_excl(cons_indep(
                                                                    events[25],
                                                                    events[32]),
                                                                events[28]),
                                                      events[38]),
                                                  events[35]),
                                        events[14]),
                              events[40]),
                    events[13]),
                events[22]),
            events[11]),
        events[36]),
    cons_excl(
        cons_excl(
            cons_indep(
                cons_incl(
                    cons_excl(
                        cons_incl(
                            cons_excl(cons_excl(cons_excl(cons_excl(events[13],
                                                                    events[31]),
                                                          events[30]),
                                                events[46]),
                                      events[8]),
                            events[24]),
                        events[41]),
                    events[23]),
                events[28]),
            events[36]),
        events[17]),
    cons_indep(
        cons_indep(
            cons_incl(
                cons_incl(
                    cons_excl(
                        cons_incl(cons_indep(
                                      cons_excl(cons_excl(cons_excl(events[19],
                                                                    events[36]),
                                                          events[13]),
                                                events[41]),
                                      events[14]),
                                  events[12]),
                        events[23]),
                    events[16]),
                events[9]),
            events[28]),
        events[7]),
    cons_indep(
        cons_excl(
            cons_incl(
                cons_indep(
                    cons_incl(
                        cons_incl(
                            cons_excl(
                                cons_indep(cons_indep(cons_indep(events[7],
                                                                 events[16]),
                                                      events[25]),
                                           events[27]),
                                events[46]),
                            events[48]),
                        events[9]),
                    events[34]),
                events[24]),
            events[14]),
        events[31]),
    cons_excl(
        cons_excl(
            cons_indep(
                cons_indep(
                    cons_excl(cons_indep(
                                  cons_excl(cons_incl(cons_incl(cons_indep(
                                                                    events[28],
                                                                    events[42]),
                                                                events[49]),
                                                      events[45]),
                                            events[3]),
                                  events[32]),
                              events[10]),
                    events[6]),
                events[12]),
            events[22]),
        events[24]),
    cons_excl(
        cons_indep(
            cons_indep(
                cons_indep(
                    cons_indep(
                        cons_indep(
                            cons_indep(
                                cons_incl(cons_indep(cons_indep(events[43],
                                                                events[21]),
                                                     events[20]),
                                          events[48]),
                                events[45]),
                            events[4]),
                        events[6]),
                    events[28]),
                events[1]),
            events[13]),
        events[24]),
    cons_incl(
        cons_incl(
            cons_excl(
                cons_incl(cons_incl(cons_excl(cons_indep(
                                                  cons_indep(
                                                      cons_indep(
                                                          cons_incl(events[13],
                                                                    events[18]),
                                                          events[21]),
                                                      events[46]),
                                                  events[39]),
                                              events[1]),
                                    events[9]),
                          events[44]),
                events[40]),
            events[38]),
        events[3]),
    cons_excl(
        cons_indep(
            cons_incl(
                cons_incl(
                    cons_excl(
                        cons_incl(cons_indep(
                                      cons_incl(cons_incl(cons_excl(events[14],
                                                                    events[10]),
                                                          events[18]),
                                                events[42]),
                                      events[7]),
                                  events[21]),
                        events[0]),
                    events[16]),
                events[44]),
            events[8]),
        events[35]),
    cons_incl(
        cons_incl(
            cons_excl(
                cons_incl(cons_excl(cons_indep(
                                        cons_excl(cons_excl(cons_indep(
                                                                cons_indep(
                                                                    events[35],
                                                                    events[46]),
                                                                events[49]),
                                                            events[34]),
                                                  events[32]),
                                        events[8]),
                                    events[14]),
                          events[22]),
                events[12]),
            events[43]),
        events[1]),
    cons_incl(
        cons_incl(
            cons_incl(
                cons_excl(
                    cons_indep(
                        cons_incl(cons_indep(
                                      cons_indep(cons_excl(cons_excl(events[41],
                                                                     events[7]),
                                                           events[42]),
                                                 events[44]),
                                      events[47]),
                                  events[12]),
                        events[32]),
                    events[1]),
                events[38]),
            events[21]),
        events[23])};
static const std::vector<std::vector<float>> prob = {
    {0.637255, 0.617983,  0.464485, 0.570081,  0.150106, 0.499268,   0.665573,
     0.731235, 0.240589,  0.226594, 0.877764,  0.165587, 0.744485,   0.818598,
     0.967895, 0.0119728, 0.621421, 0.976496,  0.399934, 0.465098,   0.799101,
     0.916511, 0.546682,  0.762491, 0.0566105, 0.521254, 0.202749,   0.77783,
     0.418997, 0.814043,  0.299641, 0.0380271, 0.692591, 0.00414437, 0.995283,
     0.801551, 0.909477,  0.838739, 0.1673,    0.173771, 0.116368,   0.376527,
     0.524033, 0.0813585, 0.983831, 0.367213,  0.563881, 0.25548,    0.181542,
     0.979314},
    {0.78959,  0.769926, 0.832645, 0.470398,  0.396958, 0.337404, 0.625375,
     0.676258, 0.713697, 0.246169, 0.973146,  0.927795, 0.642617, 0.783543,
     0.140069, 0.921513, 0.387211, 0.0848792, 0.20668,  0.434662, 0.143853,
     0.189945, 0.460309, 0.183706, 0.12359,   0.47092,  0.984284, 0.397496,
     0.251138, 0.978018, 0.241455, 0.614614,  0.525293, 0.867331, 0.677344,
     0.514427, 0.511262, 0.942422, 0.462213,  0.119844, 0.695322, 0.8076,
     0.854572, 0.539194, 0.121627, 0.490538,  0.22177,  0.282635, 0.141429,
     0.703613},
    {0.0378624, 0.0647102, 0.723998, 0.57223,  0.159899, 0.232189,  0.0604079,
     0.783894,  0.907711,  0.456182, 0.795176, 0.436151, 0.0365222, 0.769323,
     0.737324,  0.62885,   0.466872, 0.413084, 0.71897,  0.802978,  0.224732,
     0.746782,  0.932145,  0.840571, 0.208055, 0.663686, 0.469642,  0.694384,
     0.123162,  0.844138,  0.970286, 0.763144, 0.682224, 0.319912,  0.840004,
     0.875505,  0.933674,  0.659618, 0.261355, 0.883766, 0.460305,  0.702821,
     0.161413,  0.43221,   0.314171, 0.758984, 0.173348, 0.968459,  0.189369,
     0.476055},
    {0.260358, 0.0116188, 0.455123,  0.00571095, 0.146447, 0.731194, 0.452702,
     0.403072, 0.591755,  0.0998321, 0.766949,   0.819705, 0.673271, 0.194661,
     0.625789, 0.691365,  0.37407,   0.101252,   0.928791, 0.145838, 0.874367,
     0.593879, 0.587104,  0.0153536, 0.811271,   0.273294, 0.297878, 0.931804,
     0.419208, 0.689692,  0.933084,  0.662236,   0.714165, 0.95932,  0.800641,
     0.602646, 0.485489,  0.217493,  0.258474,   0.275991, 0.606162, 0.719411,
     0.818779, 0.332718,  0.731798,  0.699836,   0.306708, 0.68273,  0.873033,
     0.75554},
    {0.273685, 0.60819,  0.437159, 0.261243, 0.173376,  0.871424, 0.122507,
     0.889513, 0.553575, 0.226709, 0.469934, 0.952403,  0.674951, 0.330593,
     0.163382, 0.637677, 0.860541, 0.77985,  0.56151,   0.547399, 0.764822,
     0.827577, 0.610401, 0.198764, 0.967392, 0.813539,  0.8324,   0.35974,
     0.695527, 0.815601, 0.322515, 0.648065, 0.012048,  0.886239, 0.67674,
     0.665822, 0.041867, 0.395382, 0.205989, 0.640753,  0.917973, 0.39853,
     0.25005,  0.784858, 0.526806, 0.606453, 0.0510619, 0.560239, 0.21701,
     0.540293},
    {0.119413, 0.984524, 0.796168, 0.978239,  0.115107, 0.890512, 0.568623,
     0.602191, 0.502785, 0.97633,  0.862808,  0.934885, 0.914806, 0.71739,
     0.549953, 0.883475, 0.669096, 0.600264,  0.138035, 0.284986, 0.684418,
     0.705823, 0.36603,  0.888419, 0.0755997, 0.293207, 0.385416, 0.318825,
     0.537235, 0.186682, 0.143607, 0.804045,  0.955864, 0.23723,  0.263741,
     0.779225, 0.145058, 0.672211, 0.0998648, 0.73001,  0.441396, 0.074755,
     0.783579, 0.434526, 0.945664, 0.516341,  0.798108, 0.54896,  0.0516156,
     0.864676},
    {0.993736,   0.540538,  0.120987,  0.985288,  0.740134, 0.683256, 0.461942,
     0.936933,   0.951701,  0.0946809, 0.137704,  0.704864, 0.546446, 0.410826,
     0.398927,   0.0161338, 0.134829,  0.488385,  0.474682, 0.58866,  0.659356,
     0.863649,   0.848776,  0.634118,  0.0337892, 0.979666, 0.212609, 0.945201,
     0.00873973, 0.374948,  0.733211,  0.485094,  0.77517,  0.263904, 0.0872634,
     0.210586,   0.394066,  0.503012,  0.49983,   0.645235, 0.345481, 0.559144,
     0.905553,   0.674556,  0.281959,  0.301938,  0.586979, 0.45986,  0.654152,
     0.615508},
    {0.696576,  0.694385,  0.598244, 0.178333,  0.486857, 0.657295,   0.256642,
     0.181044,  0.890761,  0.571419, 0.0562572, 0.652864, 0.726689,   0.758568,
     0.365631,  0.600633,  0.436433, 0.263359,  0.114474, 0.78421,    0.483381,
     0.375415,  0.816659,  0.641992, 0.087875,  0.674147, 0.319365,   0.0577572,
     0.0488425, 0.66485,   0.919499, 0.383394,  0.963471, 0.00633584, 0.942012,
     0.290596,  0.0121026, 0.984623, 0.941902,  0.64501,  0.433838,   0.190722,
     0.290138,  0.0994744, 0.791105, 0.91631,   0.312672, 0.587606,   0.372353,
     0.106232},
    {0.646808,   0.754716, 0.306457, 0.489397, 0.110983, 0.942793, 0.212992,
     0.460298,   0.998594, 0.292822, 0.633353, 0.530626, 0.331649, 0.261458,
     0.00235469, 0.486429, 0.608617, 0.850897, 0.716383, 0.414941, 0.538732,
     0.162509,   0.424455, 0.370594, 0.607888, 0.937722, 0.1411,   0.534053,
     0.100148,   0.496762, 0.476142, 0.639124, 0.180764, 0.582508, 0.549461,
     0.260695,   0.370967, 0.650782, 0.544988, 0.454488, 0.799491, 0.106215,
     0.752746,   0.820678, 0.406643, 0.812208, 0.740139, 0.866335, 0.89414,
     0.602544},
    {0.787059,  0.0787887, 0.372103,   0.557515, 0.818621,   0.619191,
     0.22233,   0.053341,  0.00335976, 0.356469, 0.00970506, 0.498258,
     0.668471,  0.785585,  0.606129,   0.678188, 0.161274,   0.542046,
     0.863822,  0.0151197, 0.47599,    0.477647, 0.371352,   0.872522,
     0.860121,  0.129474,  0.470271,   0.864138, 0.110351,   0.0418123,
     0.0174864, 0.148525,  0.736314,   0.45489,  0.319757,   0.158818,
     0.73437,   0.518438,  0.348097,   0.437455, 0.261554,   0.0440052,
     0.0337833, 0.64828,   0.459687,   0.249934, 0.130165,   0.922129,
     0.0696553, 0.787519},
};

static const std::vector<float> costs = {
    6.95164, 413.227, 984.073, 872.33,  752.648, 337.111, 897.069, 576.178,
    604.578, 859.205, 80.4928, 170.986, 612.217, 954.41,  790.374, 477.445,
    177.4,   97.1936, 9.04778, 176.105, 630.975, 575.146, 197.457, 126.916,
    384.467, 536.143, 440.107, 416.243, 498.255, 771.596, 520.602, 985.618,
    968.136, 106.883, 934.075, 110.554, 885.77,  849.442, 538.446, 444.329,
    557.992, 227.44,  16.7336, 988.306, 340.007, 522.868, 349.533, 370.845,
    702.463, 71.5875};

static const std::vector<float> min_impressions = {
    0.614526, 0.431213, 0.106989, 0.807942, 0.833272,
    0.498023, 0.299776, 0.899706, 0.367428, 0.795316};

//
#endif
