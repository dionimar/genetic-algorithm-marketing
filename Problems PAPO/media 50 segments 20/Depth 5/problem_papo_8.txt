#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 20;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_excl(cons_incl(cons_excl(cons_excl(cons_excl(events[2], events[24]),events[23]),events[6]),events[37]),events[34]),cons_excl(cons_incl(cons_indep(cons_excl(cons_incl(events[44], events[47]),events[49]),events[26]),events[34]),events[7]),cons_excl(cons_indep(cons_indep(cons_incl(cons_incl(events[26], events[16]),events[31]),events[3]),events[27]),events[47]),cons_excl(cons_excl(cons_indep(cons_incl(cons_excl(events[4], events[32]),events[18]),events[7]),events[40]),events[26]),cons_excl(cons_incl(cons_excl(cons_excl(cons_indep(events[8], events[42]),events[46]),events[32]),events[47]),events[14]),cons_indep(cons_incl(cons_excl(cons_incl(cons_indep(events[40], events[3]),events[33]),events[26]),events[2]),events[14]),cons_incl(cons_indep(cons_indep(cons_incl(cons_incl(events[42], events[7]),events[13]),events[6]),events[39]),events[32]),cons_indep(cons_incl(cons_indep(cons_indep(cons_excl(events[29], events[35]),events[14]),events[36]),events[16]),events[10]),cons_excl(cons_indep(cons_incl(cons_excl(cons_incl(events[42], events[12]),events[35]),events[38]),events[21]),events[33]),cons_incl(cons_incl(cons_excl(cons_excl(cons_excl(events[3], events[13]),events[32]),events[12]),events[16]),events[41]),cons_indep(cons_incl(cons_incl(cons_indep(cons_indep(events[3], events[29]),events[6]),events[49]),events[5]),events[47]),cons_incl(cons_indep(cons_indep(cons_incl(cons_incl(events[12], events[5]),events[2]),events[49]),events[16]),events[3]),cons_excl(cons_excl(cons_excl(cons_incl(cons_indep(events[27], events[0]),events[35]),events[19]),events[33]),events[49]),cons_excl(cons_excl(cons_excl(cons_incl(cons_indep(events[44], events[8]),events[24]),events[6]),events[47]),events[31]),cons_indep(cons_incl(cons_indep(cons_incl(cons_indep(events[46], events[24]),events[32]),events[13]),events[6]),events[5]),cons_indep(cons_indep(cons_indep(cons_excl(cons_indep(events[1], events[45]),events[15]),events[40]),events[42]),events[24]),cons_incl(cons_incl(cons_incl(cons_excl(cons_indep(events[23], events[5]),events[46]),events[2]),events[19]),events[26]),cons_incl(cons_excl(cons_excl(cons_excl(cons_incl(events[0], events[13]),events[15]),events[26]),events[2]),events[7]),cons_excl(cons_incl(cons_indep(cons_incl(cons_incl(events[6], events[39]),events[19]),events[48]),events[10]),events[25]),cons_excl(cons_incl(cons_incl(cons_incl(cons_indep(events[3], events[23]),events[44]),events[38]),events[28]),events[13])};


static const std::vector< std::vector<float> > prob = {{0.566852, 0.778063, 0.556127, 0.656752, 0.741208, 0.530935, 0.831566, 0.834048, 0.296705, 0.690216, 0.706459, 0.42114, 0.978236, 0.268406, 0.302708, 0.906831, 0.887269, 0.459449, 0.907279, 0.196826, 0.27796, 0.0578849, 0.912211, 0.664536, 0.455864, 0.377055, 0.418019, 0.974785, 0.758798, 0.894153, 0.451419, 0.604409, 0.564146, 0.493787, 0.579149, 0.396595, 0.730509, 0.97116, 0.824358, 0.458195, 0.00893984, 0.832113, 0.0428491, 0.491559, 0.0425879, 0.0464963, 0.164988, 0.173455, 0.781058, 0.940969},
{0.668711, 0.440842, 0.863827, 0.259059, 0.84179, 0.916737, 0.544025, 0.93405, 0.113434, 0.229375, 0.994545, 0.620226, 0.747732, 0.740992, 0.795884, 0.688262, 0.828007, 0.129655, 0.57316, 0.600166, 0.253495, 0.87246, 0.754811, 0.828947, 0.25161, 0.563543, 0.961118, 0.387661, 0.758212, 0.082802, 0.905501, 0.979854, 0.315123, 0.352319, 0.717868, 0.692979, 0.776039, 0.581694, 0.458506, 0.147591, 0.56123, 0.64492, 0.7571, 0.886344, 0.64272, 0.453342, 0.857707, 0.979861, 0.517185, 0.27039},
{0.993769, 0.100117, 0.0267589, 0.375433, 0.459009, 0.342704, 0.624457, 0.139957, 0.182124, 0.960692, 0.338625, 0.900777, 0.37524, 0.775322, 0.782611, 0.442134, 0.69296, 0.0276147, 0.742513, 0.875144, 0.746007, 0.479355, 0.371087, 0.470385, 0.50649, 0.113468, 0.206545, 0.135247, 0.259415, 0.24342, 0.923841, 0.875707, 0.544529, 0.0253358, 0.84175, 0.857715, 0.718853, 0.86976, 0.0820971, 0.950133, 0.484276, 0.517144, 0.18024, 0.754633, 0.672351, 0.471984, 0.0770766, 0.105642, 0.764138, 0.224539},
{0.978463, 0.580344, 0.726644, 0.191377, 0.0675753, 0.655382, 0.230514, 0.835365, 0.540873, 0.941471, 0.645186, 0.2212, 0.368124, 0.300221, 0.591579, 0.209653, 0.484959, 0.696753, 0.263619, 0.52375, 0.00518298, 0.585233, 0.0950311, 0.0518855, 0.132471, 0.685921, 0.814787, 0.29503, 0.33843, 0.6893, 0.715006, 0.0306741, 0.0341335, 0.787285, 0.792161, 0.0672115, 0.0724717, 0.189935, 0.0801712, 0.703853, 0.532928, 0.298017, 0.838592, 0.737693, 0.508689, 0.0513191, 0.832067, 0.391073, 0.610118, 0.685708},
{0.176104, 0.0695108, 0.647939, 0.95813, 0.627565, 0.59863, 0.421447, 0.613754, 0.242903, 0.628555, 0.307041, 0.901803, 0.608166, 0.70884, 0.97906, 0.073857, 0.743377, 0.484199, 0.879792, 0.052178, 0.444876, 0.288642, 0.259183, 0.679002, 0.780197, 0.38581, 0.975929, 0.259766, 0.158492, 0.981601, 0.0242483, 0.301482, 0.942155, 0.0148842, 0.979961, 0.623677, 0.32078, 0.0311046, 0.94008, 0.993709, 0.386404, 0.793082, 0.157056, 0.0159646, 0.27921, 0.778124, 0.229718, 0.151405, 0.873761, 0.254931},
{0.601148, 0.892679, 0.924564, 0.770835, 0.0456802, 0.580464, 0.892139, 0.964246, 0.716492, 0.909938, 0.962676, 0.871081, 0.450701, 0.0541925, 0.0700011, 0.144239, 0.892713, 0.116796, 0.728721, 0.111706, 0.328319, 0.119702, 0.0172111, 0.752418, 0.786624, 0.145607, 0.488821, 0.906451, 0.994807, 0.27401, 0.812686, 0.799411, 0.900511, 0.882021, 0.334752, 0.674063, 0.865055, 0.624343, 0.120639, 0.0512862, 0.402606, 0.153215, 0.734344, 0.115049, 0.559905, 0.122199, 0.423373, 0.936298, 0.891269, 0.561992},
{0.492501, 0.785584, 0.842616, 0.70291, 0.275191, 0.682573, 0.435222, 0.178872, 0.426625, 0.862566, 0.723046, 0.533825, 0.889034, 0.739774, 0.395261, 0.955007, 0.733174, 0.502911, 0.418608, 0.196736, 0.109767, 0.266718, 0.632828, 0.319092, 0.283983, 0.0808916, 0.34696, 0.626654, 0.145094, 0.0990447, 0.0183586, 0.407176, 0.571837, 0.600919, 0.215798, 0.832037, 0.83595, 0.953446, 0.283355, 0.805753, 0.832022, 0.513347, 0.257687, 0.674943, 0.896442, 0.695815, 0.23062, 0.167283, 0.831451, 0.649026},
{0.695382, 0.921498, 0.250686, 0.11409, 0.0443896, 0.85731, 0.00110661, 0.235577, 0.215029, 0.700319, 0.51541, 0.948575, 0.90011, 0.389145, 0.675484, 0.203172, 0.929906, 0.145386, 0.971933, 0.429845, 0.381901, 0.567023, 0.349253, 0.384517, 0.811724, 0.325914, 0.420106, 0.19392, 0.52677, 0.670184, 0.584929, 0.161937, 0.201866, 0.540929, 0.96379, 0.187705, 0.254644, 0.90394, 0.665542, 0.186303, 0.753922, 0.331908, 0.923376, 0.604515, 0.846313, 0.575696, 0.364889, 0.779023, 0.0479005, 0.313603},
{0.991203, 0.62218, 0.683736, 0.148572, 0.610806, 0.359485, 0.418094, 0.37665, 0.752583, 0.569875, 0.615865, 0.604301, 0.74524, 0.224556, 0.850706, 0.494204, 0.348169, 0.86055, 0.448635, 0.793034, 0.191371, 0.229211, 0.121421, 0.0831514, 0.520884, 0.187373, 0.810823, 0.508865, 0.622556, 0.750716, 0.467584, 0.306249, 0.755611, 0.585388, 0.885194, 0.579059, 0.89272, 0.940261, 0.0218589, 0.538846, 0.72965, 0.297773, 0.171844, 0.383741, 0.438809, 0.411007, 0.243678, 0.387329, 0.679619, 0.650356},
{0.577109, 0.744732, 0.767607, 0.837768, 0.581108, 0.424147, 0.259035, 0.940193, 0.453421, 0.0129693, 0.981394, 0.964791, 0.113876, 0.471165, 0.7716, 0.0338598, 0.292405, 0.566766, 0.0715899, 0.697349, 0.242914, 0.482383, 0.923878, 0.298003, 0.91106, 0.265115, 0.658662, 0.665741, 0.484868, 0.0759763, 0.28458, 0.536861, 0.0121926, 0.779764, 0.433199, 0.524933, 0.0597883, 0.908158, 0.60144, 0.0696829, 0.121832, 0.374383, 0.886952, 0.908487, 0.669762, 0.121483, 0.47618, 0.789598, 0.920081, 0.547972},
{0.923185, 0.369056, 0.302251, 0.671892, 0.342322, 0.840064, 0.800399, 0.253997, 0.530941, 0.43515, 0.858155, 0.185781, 0.56048, 0.700103, 0.97465, 0.154532, 0.857798, 0.429236, 0.22359, 0.397629, 0.664865, 0.427351, 0.0570357, 0.612584, 0.915818, 0.757267, 0.897534, 0.967624, 0.538583, 0.828809, 0.331041, 0.231337, 0.584403, 0.0882242, 0.920658, 0.368593, 0.0744838, 0.129496, 0.875276, 0.953476, 0.866793, 0.435814, 0.429653, 0.050461, 0.236365, 0.199881, 0.866957, 0.774434, 0.080376, 0.446539},
{0.66484, 0.457307, 0.648997, 0.305874, 0.315573, 0.376221, 0.493785, 0.033657, 0.697584, 0.764416, 0.289696, 0.980855, 0.128424, 0.701012, 0.590531, 0.471552, 0.700061, 0.482064, 0.952072, 0.672069, 0.322338, 0.669094, 0.555637, 0.904635, 0.819519, 0.557292, 0.271288, 0.0901465, 0.00456946, 0.111182, 0.536427, 0.271945, 0.971655, 0.180726, 0.483792, 0.392917, 0.72312, 0.30673, 0.879123, 0.185248, 0.778241, 0.826677, 0.863286, 0.706089, 0.908227, 0.273863, 0.642416, 0.764705, 0.154925, 0.799673},
{0.73017, 0.234056, 0.476319, 0.0185267, 0.948952, 0.720448, 0.796232, 0.820831, 0.944455, 0.386371, 0.978672, 0.44625, 0.413034, 0.059607, 0.916758, 0.556356, 0.853287, 0.72472, 0.181761, 0.57873, 0.768962, 0.884001, 0.230318, 0.0422316, 0.042312, 0.31674, 0.409392, 0.258572, 0.317642, 0.697586, 0.149022, 0.651085, 0.181076, 0.96448, 0.56423, 0.863448, 0.115622, 0.708318, 0.0805372, 0.185057, 0.652111, 0.693982, 0.270111, 0.295992, 0.590126, 0.947303, 0.221019, 0.0614509, 0.289321, 0.222824},
{0.110984, 0.301788, 0.926389, 0.580364, 0.468291, 0.0636797, 0.519498, 0.844393, 0.153424, 0.944787, 0.839498, 0.751768, 0.757816, 0.96596, 0.808623, 0.510684, 0.951484, 0.2099, 0.42608, 0.421029, 0.34846, 0.934681, 0.789631, 0.449243, 0.162262, 0.443453, 0.657952, 0.719803, 0.266219, 0.37941, 0.342357, 0.776467, 0.460226, 0.252537, 0.508772, 0.726467, 0.798197, 0.969024, 0.63296, 0.815817, 0.644393, 0.783453, 0.544481, 0.998423, 0.729662, 0.894502, 0.434868, 0.852263, 0.77025, 0.395071},
{0.367929, 0.971493, 0.0449899, 0.734894, 0.566639, 0.832886, 0.4362, 0.749592, 0.662414, 0.402128, 0.394296, 0.871971, 0.368191, 0.40266, 0.993234, 0.221952, 0.923597, 0.771783, 0.976779, 0.560974, 0.855034, 0.936841, 0.670714, 0.447835, 0.92302, 0.232554, 0.745028, 0.477189, 0.851544, 0.740364, 0.544789, 0.713794, 0.965299, 0.770502, 0.512598, 0.940276, 0.226084, 0.496044, 0.57684, 0.318701, 0.634068, 0.91886, 0.513528, 0.960232, 0.364101, 0.414803, 0.27633, 0.687681, 0.390067, 0.280567},
{0.743719, 0.470474, 0.886873, 0.0353319, 0.887362, 0.49776, 0.879521, 0.506715, 0.0225588, 0.0255953, 0.776731, 0.04734, 0.773344, 0.168761, 0.780792, 0.54859, 0.387606, 0.960517, 0.29418, 0.46918, 0.75972, 0.308279, 0.50723, 0.178397, 0.206671, 0.22007, 0.709679, 0.718346, 0.0801215, 0.61482, 0.964275, 0.701407, 0.739173, 0.523143, 0.130674, 0.813745, 0.843689, 0.995317, 0.986037, 0.9908, 0.225058, 0.529037, 0.0821118, 0.208748, 0.628343, 0.482621, 0.625972, 0.320653, 0.209061, 0.706658},
{0.2384, 0.116017, 0.68141, 0.0265971, 0.129334, 0.711181, 0.655406, 0.815957, 0.43031, 0.0749442, 0.509438, 0.813212, 0.496063, 0.35972, 0.520865, 0.69537, 0.147162, 0.656429, 0.709121, 0.10852, 0.863434, 0.29707, 0.474117, 0.273497, 0.291802, 0.0401112, 0.944227, 0.596472, 0.365339, 0.850744, 0.554923, 0.0968708, 0.705775, 0.244044, 0.983904, 0.826266, 0.174061, 0.550551, 0.905095, 0.490818, 0.257896, 0.468537, 0.165571, 0.635558, 0.481507, 0.781172, 0.800426, 0.90115, 0.99386, 0.082944},
{0.509713, 0.265547, 0.347926, 0.634164, 0.532727, 0.558951, 0.65825, 0.886579, 0.108231, 0.46, 0.780844, 0.405408, 0.649148, 0.0548383, 0.667627, 0.654476, 0.253016, 0.0150901, 0.879087, 0.600768, 0.531637, 0.155594, 0.380921, 0.551753, 0.853267, 0.311168, 0.042186, 0.27618, 0.0780624, 0.749368, 0.988216, 0.952442, 0.983038, 0.0865799, 0.75954, 0.965148, 0.897815, 0.148621, 0.570357, 0.919171, 0.231858, 0.165951, 0.161808, 0.139903, 0.591728, 0.244555, 0.388463, 0.95086, 0.118988, 0.984191},
{0.540191, 0.420327, 0.55106, 0.776146, 0.527596, 0.25824, 0.451118, 0.144088, 0.767454, 0.265018, 0.696869, 0.533307, 0.838072, 0.466264, 0.961723, 0.263151, 0.133585, 0.440338, 0.679072, 0.541448, 0.573639, 0.279011, 0.896869, 0.201928, 0.824954, 0.911529, 0.263628, 0.590031, 0.736045, 0.508033, 0.939062, 0.113446, 0.8677, 0.870584, 0.077908, 0.525822, 0.330712, 0.688032, 0.0353711, 0.589103, 0.198496, 0.665298, 0.596221, 0.676562, 0.965278, 0.519061, 0.441441, 0.906414, 0.0946883, 0.55453},
{0.393941, 0.00941859, 0.475152, 0.741587, 0.256914, 0.582633, 0.531308, 0.14739, 0.500906, 0.800861, 0.463051, 0.368769, 0.836224, 0.901296, 0.611293, 0.778338, 0.848883, 0.532167, 0.660214, 0.187295, 0.595625, 0.496038, 0.780267, 0.127616, 0.0839267, 0.746674, 0.795135, 0.416692, 0.273519, 0.0989726, 0.561788, 0.522266, 0.164878, 0.292805, 0.712433, 0.910823, 0.448714, 0.832583, 0.237319, 0.29782, 0.582275, 0.758179, 0.208873, 0.130865, 0.381077, 0.464178, 0.0306749, 0.670944, 0.937877, 0.330295},
};

static const std::vector<float> costs = {71.4267, 788.619, 753.375, 265.679, 373.691, 6.54671, 148.761, 853.198, 196.722, 689.984, 759.37, 381.973, 479.425, 684.57, 207.375, 622.332, 485.191, 410.508, 260.515, 97.8227, 772.909, 349.107, 371.036, 621.147, 162.006, 290.437, 865.693, 473.153, 814.269, 746.742, 791.938, 648.335, 355.753, 413.286, 354.121, 404.155, 986.911, 189.527, 676.431, 477.076, 82.163, 777.833, 787.126, 385.315, 145.519, 861.857, 752.662, 451.563, 716.522, 828.351};

static const std::vector<float> min_impressions = {0.427846, 0.368297, 0.577905, 0.738627, 0.267456, 0.32785, 0.386968, 0.866909, 0.608155, 0.314954, 0.722921, 0.200062, 0.312977, 0.897745, 0.308175, 0.637428, 0.76545, 0.840617, 0.864673, 0.721402};

//
#endif
