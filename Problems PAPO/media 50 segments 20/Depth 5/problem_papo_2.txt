#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 20;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_indep(cons_incl(cons_excl(cons_excl(cons_incl(events[20], events[35]),events[38]),events[2]),events[39]),events[37]),cons_indep(cons_indep(cons_indep(cons_indep(cons_incl(events[41], events[1]),events[15]),events[26]),events[28]),events[23]),cons_indep(cons_excl(cons_excl(cons_excl(cons_indep(events[39], events[7]),events[0]),events[35]),events[27]),events[31]),cons_indep(cons_excl(cons_indep(cons_incl(cons_incl(events[20], events[22]),events[15]),events[10]),events[43]),events[17]),cons_incl(cons_excl(cons_incl(cons_incl(cons_indep(events[2], events[10]),events[12]),events[41]),events[37]),events[9]),cons_incl(cons_indep(cons_incl(cons_excl(cons_indep(events[19], events[17]),events[47]),events[18]),events[34]),events[22]),cons_indep(cons_excl(cons_indep(cons_incl(cons_incl(events[16], events[15]),events[31]),events[0]),events[49]),events[9]),cons_excl(cons_indep(cons_indep(cons_indep(cons_incl(events[11], events[22]),events[44]),events[7]),events[47]),events[42]),cons_incl(cons_incl(cons_indep(cons_incl(cons_excl(events[21], events[31]),events[39]),events[29]),events[14]),events[48]),cons_excl(cons_indep(cons_indep(cons_excl(cons_excl(events[8], events[2]),events[29]),events[14]),events[45]),events[25]),cons_indep(cons_incl(cons_incl(cons_indep(cons_excl(events[45], events[23]),events[8]),events[11]),events[31]),events[4]),cons_excl(cons_incl(cons_excl(cons_incl(cons_incl(events[2], events[3]),events[21]),events[14]),events[23]),events[29]),cons_incl(cons_incl(cons_excl(cons_indep(cons_incl(events[43], events[49]),events[4]),events[27]),events[13]),events[46]),cons_indep(cons_excl(cons_incl(cons_excl(cons_incl(events[43], events[8]),events[37]),events[31]),events[6]),events[27]),cons_indep(cons_excl(cons_excl(cons_indep(cons_indep(events[23], events[45]),events[47]),events[49]),events[16]),events[14]),cons_excl(cons_incl(cons_indep(cons_indep(cons_excl(events[45], events[19]),events[4]),events[3]),events[7]),events[16]),cons_incl(cons_excl(cons_indep(cons_incl(cons_incl(events[8], events[39]),events[32]),events[3]),events[13]),events[26]),cons_incl(cons_excl(cons_excl(cons_indep(cons_incl(events[48], events[9]),events[24]),events[20]),events[30]),events[31]),cons_excl(cons_incl(cons_indep(cons_indep(cons_excl(events[28], events[38]),events[45]),events[2]),events[20]),events[24]),cons_indep(cons_excl(cons_indep(cons_incl(cons_indep(events[11], events[26]),events[16]),events[19]),events[8]),events[43])};


static const std::vector< std::vector<float> > prob = {{0.616624, 0.985163, 0.0846638, 0.104235, 0.0739549, 0.777274, 0.213685, 0.81913, 0.100971, 0.67436, 0.0440212, 0.33313, 0.483255, 0.489039, 0.147225, 0.21331, 0.75071, 0.666402, 0.552706, 0.460807, 0.252976, 0.285073, 0.383883, 0.758776, 0.109947, 0.906411, 0.09349, 0.311913, 0.800285, 0.618786, 0.212588, 0.613508, 0.436729, 0.466147, 0.16627, 0.606019, 0.527312, 0.457787, 0.630589, 0.911193, 0.210572, 0.118569, 0.352232, 0.745701, 0.239612, 0.893808, 0.222031, 0.932742, 0.757734, 0.351611},
{0.0403873, 0.12937, 0.885574, 0.870828, 0.0479094, 0.503195, 0.613287, 0.379831, 0.22616, 0.825876, 0.39823, 0.93644, 0.653997, 0.0189121, 0.749041, 0.661921, 0.537422, 0.772067, 0.366682, 0.647966, 0.0513716, 0.0112523, 0.133365, 0.829757, 0.595156, 0.400282, 0.814605, 0.0425737, 0.292532, 0.334204, 0.391175, 0.787683, 0.962346, 0.527767, 0.143601, 0.346308, 0.552706, 0.858446, 0.57874, 0.784375, 0.87653, 0.371353, 0.436334, 0.235894, 0.744803, 0.671028, 0.337639, 0.0799734, 0.110474, 0.636018},
{0.2766, 0.10975, 0.312182, 0.96542, 0.494058, 0.613696, 0.658241, 0.735643, 0.0652607, 0.401173, 0.51015, 0.244425, 0.0691259, 0.0546555, 0.573006, 0.718843, 0.0544868, 0.262503, 0.578223, 0.119439, 0.808085, 0.863497, 0.00344218, 0.923424, 0.899954, 0.481577, 0.830231, 0.937398, 0.472026, 0.562485, 0.238775, 0.728257, 0.61913, 0.0144836, 0.492676, 0.380933, 0.456256, 0.220093, 0.300108, 0.904459, 0.242498, 0.408882, 0.162145, 0.320765, 0.178607, 0.222259, 0.671269, 0.0815121, 0.762763, 0.404054},
{0.125806, 0.721591, 0.960644, 0.111309, 0.381979, 0.626586, 0.668576, 0.605539, 0.915441, 0.760472, 0.888295, 0.853078, 0.680592, 0.497785, 0.151089, 0.542398, 0.529553, 0.899121, 0.702915, 0.511954, 0.3775, 0.939199, 0.706013, 0.592984, 0.312326, 0.34623, 0.53462, 0.384995, 0.851674, 0.797827, 0.767379, 0.115881, 0.608875, 0.747378, 0.543748, 0.753373, 0.649231, 0.355299, 0.707813, 0.498733, 0.700953, 0.152287, 0.427167, 0.566877, 0.718232, 0.998152, 0.481053, 0.371111, 0.86699, 0.133266},
{0.454584, 0.441055, 0.307558, 0.603175, 0.383144, 0.146161, 0.553437, 0.540978, 0.822155, 0.760714, 0.301519, 0.570444, 0.611482, 0.694134, 0.458774, 0.0486383, 0.459565, 0.882075, 0.185492, 0.808902, 0.87029, 0.709857, 0.660364, 0.996916, 0.112693, 0.0259752, 0.304256, 0.998367, 0.982983, 0.113257, 0.304689, 0.482147, 0.258396, 0.0302259, 0.00612493, 0.490083, 0.19805, 0.363532, 0.546067, 0.459585, 0.649569, 0.550249, 0.535094, 0.861509, 0.490967, 0.905677, 0.259105, 0.819784, 0.360087, 0.589755},
{0.958764, 0.914551, 0.596144, 0.630668, 0.214229, 0.256758, 0.0979085, 0.295771, 0.993939, 0.409586, 0.780347, 0.542092, 0.913384, 0.671476, 0.109363, 0.914169, 0.879451, 0.00743575, 0.338576, 0.957119, 0.680963, 0.147452, 0.984357, 0.87549, 0.541911, 0.324743, 0.26888, 0.0987057, 0.718182, 0.837705, 0.945825, 0.693147, 0.0846788, 0.0321007, 0.523006, 0.572594, 0.469245, 0.134387, 0.465254, 0.648672, 0.502129, 0.764303, 0.148818, 0.46608, 0.815924, 0.10148, 0.688353, 0.119667, 0.656803, 0.71811},
{0.0580016, 0.0899828, 0.470875, 0.960889, 0.293333, 0.5031, 0.922941, 0.165303, 0.147807, 0.322768, 0.237115, 0.636875, 0.595831, 0.619956, 0.960635, 0.177879, 0.344653, 0.0551443, 0.937241, 0.10328, 0.76456, 0.453854, 0.39434, 0.177297, 0.0975938, 0.83602, 0.107213, 0.143874, 0.179413, 0.218116, 0.817852, 0.882774, 0.803927, 0.96874, 0.217565, 0.15763, 0.0144185, 0.162079, 0.353558, 0.0946859, 0.282986, 0.561472, 0.653871, 0.703845, 0.072869, 0.00300562, 0.0742638, 0.263024, 0.352514, 0.158414},
{0.279232, 0.03272, 0.750922, 0.596723, 0.201556, 0.636103, 0.0973793, 0.924527, 0.881668, 0.00903435, 0.719155, 0.241802, 0.374063, 0.832227, 0.806504, 0.994864, 0.684706, 0.361563, 0.338809, 0.49364, 0.642388, 0.51973, 0.393985, 0.00348291, 0.231197, 0.939054, 0.674222, 0.386604, 0.0411534, 0.325413, 0.274436, 0.621549, 0.465223, 0.854104, 0.335671, 0.621534, 0.973927, 0.597912, 0.0719273, 0.0127312, 0.258484, 0.238177, 0.412901, 0.133416, 0.117939, 0.931638, 0.373563, 0.418484, 0.932723, 0.918628},
{0.15916, 0.191598, 0.592787, 0.120442, 0.100892, 0.301497, 0.238305, 0.991741, 0.744867, 0.858764, 0.601859, 0.576971, 0.259092, 0.699887, 0.196319, 0.772774, 0.133844, 0.555262, 0.724239, 0.815122, 0.984817, 0.314141, 0.847491, 0.830472, 0.417083, 0.133209, 0.416132, 0.734467, 0.858555, 0.370409, 0.861583, 0.614318, 0.836086, 0.891189, 0.230245, 0.200775, 0.667986, 0.792467, 0.698125, 0.67806, 0.330871, 0.871101, 0.213148, 0.268779, 0.115156, 0.76966, 0.27043, 0.415221, 0.833912, 0.32744},
{0.759134, 0.895194, 0.290552, 0.368953, 0.142347, 0.962469, 0.849708, 0.965343, 0.243625, 0.273693, 0.830286, 0.664548, 0.214014, 0.651796, 0.195482, 0.278409, 0.344699, 0.163457, 0.280746, 0.576918, 0.4118, 0.228078, 0.730727, 0.175789, 0.119476, 0.15233, 0.91545, 0.0126703, 0.286696, 0.219275, 0.147791, 0.345534, 0.288004, 0.668709, 0.46331, 0.472162, 0.716407, 0.737965, 0.227821, 0.617775, 0.753054, 0.657579, 0.195122, 0.34278, 0.475862, 0.28373, 0.647909, 0.260677, 0.251592, 0.569489},
{0.655294, 0.936831, 0.9809, 0.0559026, 0.111669, 0.880015, 0.16377, 0.941084, 0.665153, 0.199101, 0.869297, 0.870998, 0.192706, 0.317953, 0.294645, 0.776412, 0.248434, 0.0387102, 0.499754, 0.952563, 0.372593, 0.976003, 0.238317, 0.358258, 0.752553, 0.595623, 0.125975, 0.36784, 0.0536168, 0.323559, 0.134917, 0.838797, 0.97862, 0.907524, 0.564536, 0.916596, 0.391187, 0.0446319, 0.283753, 0.54701, 0.128702, 0.458567, 0.971867, 0.752211, 0.715384, 0.499933, 0.680846, 0.0629482, 0.599481, 0.10224},
{0.255761, 0.7414, 0.880515, 0.674861, 0.945654, 0.884829, 0.177509, 0.282852, 0.833438, 0.431784, 0.559136, 0.800668, 0.666548, 0.891486, 0.648068, 0.302114, 0.0705425, 0.189671, 0.579108, 0.0896473, 0.610412, 0.287353, 0.139195, 0.313444, 0.54343, 0.618741, 0.298416, 0.564074, 0.403844, 0.370414, 0.782112, 0.512266, 0.856184, 0.832135, 0.861167, 0.545164, 0.604088, 0.366417, 0.388242, 0.0915549, 0.0580681, 0.955174, 0.314467, 0.745152, 0.657596, 0.899488, 0.431016, 0.483525, 0.496866, 0.548766},
{0.0366795, 0.107578, 0.64531, 0.579065, 0.199241, 0.98052, 0.558706, 0.775384, 0.777826, 0.652424, 0.18383, 0.660829, 0.336739, 0.600759, 0.133162, 0.241083, 0.903384, 0.142527, 0.417155, 0.133298, 0.777399, 0.405829, 0.0907936, 0.0276344, 0.400542, 0.997559, 0.092065, 0.206758, 0.902984, 0.837391, 0.976973, 0.310833, 0.770614, 0.851629, 0.381666, 0.703713, 0.132125, 0.339324, 0.1585, 0.928789, 0.507779, 0.705628, 0.714071, 0.302603, 0.529687, 0.498443, 0.931093, 0.710113, 0.899864, 0.451782},
{0.518482, 0.0668629, 0.657366, 0.93686, 0.302876, 0.137418, 0.685214, 0.479236, 0.817325, 0.00604059, 0.204974, 0.111414, 0.144486, 0.325288, 0.252159, 0.0539491, 0.245632, 0.308097, 0.26239, 0.678966, 0.360435, 0.4193, 0.581546, 0.334865, 0.910593, 0.598888, 0.529202, 0.915668, 0.0506292, 0.287625, 0.77046, 0.983827, 0.290874, 0.0840157, 0.133716, 0.350772, 0.049465, 0.319585, 0.906951, 0.334631, 0.577528, 0.796238, 0.728155, 0.903815, 0.57479, 0.0690594, 0.61577, 0.488788, 0.581238, 0.929151},
{0.47141, 0.664323, 0.0392198, 0.461339, 0.895368, 0.965566, 0.237989, 0.478305, 0.288837, 0.330309, 0.778826, 0.0417248, 0.782223, 0.562884, 0.304871, 0.286638, 0.430151, 0.227708, 0.727687, 0.805899, 0.985826, 0.427223, 0.477955, 0.0592513, 0.465742, 0.332254, 0.539211, 0.0662363, 0.0589792, 0.268916, 0.386318, 0.565618, 0.76591, 0.787703, 0.523753, 0.733001, 0.360507, 0.743288, 0.90676, 0.907908, 0.555471, 0.528221, 0.625195, 0.661548, 0.570768, 0.325074, 0.797816, 0.719104, 0.432625, 0.360913},
{0.534396, 0.933204, 0.671722, 0.788925, 0.893111, 0.499998, 0.737525, 0.836196, 0.355757, 0.795281, 0.383165, 0.086588, 0.513308, 0.313303, 0.917821, 0.859672, 0.188872, 0.337034, 0.697142, 0.268191, 0.783814, 0.162843, 0.26843, 0.249473, 0.907217, 0.85649, 0.706004, 0.637337, 0.616978, 0.243239, 0.0780367, 0.62097, 0.484139, 0.913232, 0.72329, 0.0914239, 0.0669052, 0.191155, 0.0600436, 0.61476, 0.432899, 0.0439511, 0.285088, 0.216746, 0.716574, 0.820278, 0.70262, 0.312133, 0.589636, 0.773073},
{0.0535365, 0.2231, 0.93227, 0.406196, 0.189522, 0.601036, 0.454379, 0.519621, 0.769063, 0.663916, 0.433572, 0.21626, 0.073857, 0.39032, 0.198403, 0.0493998, 0.503306, 0.793094, 0.698059, 0.254375, 0.87121, 0.204281, 0.185743, 0.275657, 0.0520322, 0.295862, 0.898046, 0.249293, 0.0786932, 0.861035, 0.395471, 0.169819, 0.179834, 0.359455, 0.195256, 0.081443, 0.930181, 0.142108, 0.0376605, 0.0933806, 0.0815674, 0.365992, 0.307595, 0.398, 0.946385, 0.478463, 0.106775, 0.704329, 0.808473, 0.927451},
{0.240527, 0.788601, 0.948114, 0.265516, 0.0281239, 0.76179, 0.669663, 0.383468, 0.359601, 0.75093, 0.216743, 0.136135, 0.726788, 0.437354, 0.766492, 0.851486, 0.00322734, 0.638268, 0.164775, 0.405454, 0.486816, 0.85355, 0.949419, 0.952933, 0.281488, 0.721248, 0.722829, 0.505514, 0.834945, 0.28327, 0.916385, 0.774163, 0.857495, 0.253286, 0.185063, 0.493526, 0.104993, 0.0774404, 0.748379, 0.599039, 0.875046, 0.416425, 0.489136, 0.661613, 0.223647, 0.199978, 0.563235, 0.774703, 0.0398874, 0.094011},
{0.189801, 0.154061, 0.943903, 0.701316, 0.131879, 0.649568, 0.205333, 0.960733, 0.388877, 0.131747, 0.270268, 0.725989, 0.684357, 0.193845, 0.947196, 0.884389, 0.396883, 0.51894, 0.149624, 0.986658, 0.669875, 0.143869, 0.57559, 0.718771, 0.813832, 0.603528, 0.891486, 0.555254, 0.386317, 0.735275, 0.958998, 0.784645, 0.62239, 0.848496, 0.0357205, 0.429196, 0.490212, 0.634228, 0.867053, 0.56136, 0.215133, 0.994393, 0.45496, 0.620105, 0.878044, 0.35154, 0.773649, 0.289403, 0.691608, 0.932452},
{0.664426, 0.994071, 0.852146, 0.545118, 0.52067, 0.606357, 0.0815681, 0.359054, 0.276202, 0.765591, 0.284631, 0.690213, 0.150797, 0.157457, 0.721696, 0.443964, 0.53659, 0.688002, 0.718575, 0.510779, 0.49889, 0.605524, 0.226043, 0.0569338, 0.303689, 0.0717514, 0.88327, 0.0433671, 0.958607, 0.835946, 0.864268, 0.203414, 0.410513, 0.48434, 0.33374, 0.672626, 0.0946738, 0.635532, 0.526697, 0.222182, 0.746822, 0.266219, 0.990832, 0.101945, 0.570033, 0.930113, 0.675626, 0.0512142, 0.384052, 0.816907},
};

static const std::vector<float> costs = {212.308, 152.382, 729.863, 237.138, 73.1954, 5.14153, 525.868, 234.594, 517.928, 46.3752, 53.2963, 229.16, 606.529, 940.944, 323.836, 800.554, 218.472, 213.181, 315.457, 766.827, 176.748, 146.831, 421.885, 90.7374, 735.417, 626.098, 518.579, 941.433, 237.887, 312.867, 695.424, 346.399, 508.199, 310.054, 187.793, 179.557, 872.506, 267.459, 640.636, 514.853, 719.815, 373.751, 103.213, 383.456, 473.106, 272.578, 686.965, 298.073, 406.362, 892.816};

static const std::vector<float> min_impressions = {0.215015, 0.0456891, 0.992418, 0.307878, 0.586864, 0.947613, 0.645004, 0.578829, 0.0385655, 0.0665601, 0.45366, 0.137254, 0.111971, 0.823688, 0.119205, 0.948134, 0.728609, 0.530828, 0.145747, 0.682125};

//
#endif
