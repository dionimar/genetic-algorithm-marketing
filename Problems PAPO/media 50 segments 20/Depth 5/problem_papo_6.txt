#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 20;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_excl(cons_incl(cons_incl(cons_indep(cons_excl(events[26], events[46]),events[30]),events[49]),events[10]),events[38]),cons_indep(cons_indep(cons_indep(cons_incl(cons_excl(events[42], events[5]),events[33]),events[19]),events[45]),events[28]),cons_indep(cons_indep(cons_indep(cons_indep(cons_incl(events[24], events[23]),events[28]),events[31]),events[7]),events[16]),cons_indep(cons_excl(cons_excl(cons_indep(cons_indep(events[24], events[5]),events[47]),events[3]),events[37]),events[4]),cons_incl(cons_excl(cons_indep(cons_excl(cons_excl(events[24], events[17]),events[10]),events[21]),events[47]),events[2]),cons_indep(cons_excl(cons_indep(cons_incl(cons_excl(events[23], events[7]),events[20]),events[32]),events[5]),events[46]),cons_indep(cons_incl(cons_indep(cons_incl(cons_indep(events[30], events[40]),events[47]),events[23]),events[13]),events[48]),cons_excl(cons_indep(cons_excl(cons_indep(cons_indep(events[13], events[12]),events[0]),events[37]),events[39]),events[41]),cons_excl(cons_excl(cons_excl(cons_indep(cons_indep(events[41], events[4]),events[30]),events[22]),events[34]),events[6]),cons_incl(cons_incl(cons_excl(cons_indep(cons_indep(events[7], events[42]),events[39]),events[19]),events[0]),events[13]),cons_incl(cons_excl(cons_incl(cons_incl(cons_excl(events[10], events[28]),events[22]),events[9]),events[26]),events[7]),cons_incl(cons_incl(cons_incl(cons_excl(cons_incl(events[22], events[12]),events[31]),events[1]),events[21]),events[47]),cons_indep(cons_excl(cons_indep(cons_indep(cons_indep(events[0], events[43]),events[18]),events[12]),events[9]),events[16]),cons_indep(cons_indep(cons_indep(cons_incl(cons_indep(events[47], events[19]),events[15]),events[2]),events[1]),events[41]),cons_indep(cons_incl(cons_indep(cons_incl(cons_incl(events[47], events[29]),events[27]),events[12]),events[8]),events[35]),cons_indep(cons_excl(cons_incl(cons_excl(cons_excl(events[25], events[48]),events[24]),events[20]),events[5]),events[31]),cons_incl(cons_incl(cons_incl(cons_excl(cons_excl(events[44], events[24]),events[16]),events[49]),events[43]),events[30]),cons_incl(cons_indep(cons_incl(cons_indep(cons_incl(events[17], events[30]),events[12]),events[13]),events[4]),events[10]),cons_indep(cons_incl(cons_indep(cons_indep(cons_indep(events[45], events[38]),events[24]),events[31]),events[30]),events[12]),cons_excl(cons_indep(cons_excl(cons_excl(cons_excl(events[49], events[2]),events[0]),events[24]),events[6]),events[39])};


static const std::vector< std::vector<float> > prob = {{0.271065, 0.463306, 0.35061, 0.0319898, 0.395916, 0.366643, 0.124756, 0.918408, 0.951676, 0.99014, 0.919432, 0.527116, 0.0645125, 0.228154, 0.730498, 0.46074, 0.310442, 0.181457, 0.413671, 0.91565, 0.601555, 0.696637, 0.874786, 0.663875, 0.0438352, 0.986445, 0.477874, 0.764604, 0.549612, 0.577222, 0.679776, 0.849379, 0.5226, 0.579687, 0.375344, 0.838117, 0.882469, 0.469908, 0.541476, 0.430986, 0.297448, 0.961872, 0.40311, 0.950466, 0.343563, 0.924099, 0.366144, 0.196971, 0.830675, 0.0461045},
{0.822124, 0.412258, 0.15737, 0.155821, 0.674495, 0.559986, 0.787621, 0.182719, 0.95536, 0.551887, 0.247788, 0.210717, 0.669608, 0.642202, 0.106049, 0.877392, 0.686611, 0.732676, 0.905606, 0.922501, 0.521514, 0.256097, 0.60347, 0.137532, 0.642857, 0.28297, 0.255217, 0.69689, 0.523471, 0.496614, 0.655311, 0.315496, 0.291399, 0.607359, 0.792786, 0.770011, 0.250049, 0.200295, 0.626677, 0.349042, 0.643956, 0.671404, 0.393347, 0.314351, 0.00617699, 0.731966, 0.096213, 0.786677, 0.806149, 0.588093},
{0.410293, 0.570866, 0.418857, 0.727597, 0.960482, 0.637314, 0.522547, 0.0456784, 0.768023, 0.249642, 0.564008, 0.79656, 0.934252, 0.742135, 0.352614, 0.0689596, 0.404495, 0.67928, 0.93164, 0.895078, 0.749354, 0.53479, 0.757283, 0.250196, 0.830449, 0.68093, 0.381306, 0.319338, 0.863273, 0.48314, 0.391661, 0.713487, 0.436844, 0.999044, 0.358685, 0.703302, 0.116328, 0.00375011, 0.757994, 0.336856, 0.922287, 0.665584, 0.815685, 0.0595037, 0.349485, 0.113431, 0.560435, 0.631411, 0.0406192, 0.238613},
{0.164047, 0.940007, 0.839813, 0.185626, 0.938335, 0.454854, 0.268149, 0.522752, 0.128735, 0.836159, 0.0549282, 0.648304, 0.768295, 0.0858174, 0.774359, 0.273215, 0.593368, 0.331449, 0.219353, 0.106104, 0.714892, 0.026915, 0.918436, 0.476087, 0.532641, 0.958798, 0.918052, 0.49966, 0.252481, 0.351401, 0.600386, 0.485145, 0.858422, 0.359095, 0.0387324, 0.82217, 0.238919, 0.899133, 0.737704, 0.292037, 0.732014, 0.62436, 0.314408, 0.59753, 0.285542, 0.10062, 0.0845607, 0.398491, 0.435026, 0.882051},
{0.52887, 0.782531, 0.699796, 0.0316343, 0.875658, 0.282441, 0.877815, 0.164271, 0.59274, 0.303783, 0.431223, 0.928213, 0.78412, 0.0739759, 0.23356, 0.33383, 0.751436, 0.676514, 0.0313775, 0.206515, 0.999509, 0.959448, 0.907407, 0.823789, 0.44773, 0.990552, 0.400563, 0.420606, 0.0133916, 0.557373, 0.194461, 0.113038, 0.574916, 0.0110413, 0.9559, 0.889374, 0.0115498, 0.579132, 0.953735, 0.772575, 0.717878, 0.574548, 0.912902, 0.283996, 0.0110673, 0.431204, 0.691298, 0.677381, 0.979047, 0.737604},
{0.908912, 0.128009, 0.481141, 0.872488, 0.513769, 0.141776, 0.026567, 0.49987, 0.576533, 0.261746, 0.29857, 0.50139, 0.851415, 0.332365, 0.293124, 0.331343, 0.213247, 0.542865, 0.194159, 0.720837, 0.229175, 0.375784, 0.324, 0.881611, 0.00158238, 0.190438, 0.55309, 0.832527, 0.471612, 0.832265, 0.422899, 0.0343459, 0.159209, 0.624803, 0.97267, 0.479414, 0.677034, 0.893615, 0.30985, 0.801913, 0.787853, 0.207389, 0.749593, 0.289502, 0.98199, 0.835289, 0.696085, 0.0110084, 0.563405, 0.026553},
{0.39373, 0.416253, 0.449448, 0.461271, 0.532378, 0.553743, 0.63317, 0.615227, 0.645448, 0.418346, 0.899329, 0.504671, 0.542506, 0.699905, 0.61987, 0.621287, 0.499197, 0.597566, 0.879062, 0.629671, 0.951874, 0.285364, 0.679169, 0.847232, 0.170216, 0.571527, 0.761805, 0.901299, 0.560214, 0.639255, 0.869455, 0.79693, 0.473091, 0.0644754, 0.94628, 0.943919, 0.195582, 0.167515, 0.702892, 0.263927, 0.966988, 0.089095, 0.883184, 0.669855, 0.00551328, 0.655129, 0.775629, 0.265561, 0.642222, 0.353466},
{0.476718, 0.190748, 0.647243, 0.115176, 0.651883, 0.8536, 0.168694, 0.851389, 0.965607, 0.45061, 0.6997, 0.212348, 0.97423, 0.0365036, 0.699467, 0.764855, 0.558221, 0.809392, 0.871593, 0.581991, 0.950675, 0.828902, 0.772072, 0.029964, 0.356891, 0.654449, 0.56561, 0.0523557, 0.594944, 0.124884, 0.66445, 0.729154, 0.498756, 0.405225, 0.71921, 0.399773, 0.189348, 0.853377, 0.782344, 0.72257, 0.634693, 0.679758, 0.452546, 0.323611, 0.353363, 0.714482, 0.704665, 0.462732, 0.733328, 0.403259},
{0.0464028, 0.123328, 0.880317, 0.228427, 0.609361, 0.485716, 0.874402, 0.468015, 0.977762, 0.918664, 0.830798, 0.801289, 0.20841, 0.839101, 0.271619, 0.644439, 0.883879, 0.842494, 0.899831, 0.385975, 0.308848, 0.955677, 0.869039, 0.79634, 0.917347, 0.13477, 0.262608, 0.550806, 0.34553, 0.274344, 0.525901, 0.0671687, 0.629688, 0.406635, 0.685657, 0.4125, 0.288535, 0.844147, 0.771368, 0.174601, 0.754908, 0.402652, 0.180662, 0.621954, 0.962909, 0.349399, 0.373966, 0.755405, 0.252392, 0.281769},
{0.346228, 0.334297, 0.704637, 0.0486578, 0.375486, 0.0374458, 0.528321, 0.9664, 0.161976, 0.992933, 0.106427, 0.103322, 0.897812, 0.360397, 0.976564, 0.598175, 0.741941, 0.0873192, 0.562549, 0.559534, 0.261221, 0.178858, 0.399884, 0.131961, 0.892535, 0.761859, 0.830983, 0.586084, 0.482183, 0.289285, 0.103204, 0.245741, 0.171677, 0.572903, 0.993627, 0.426423, 0.111597, 0.703384, 0.262461, 0.247381, 0.888467, 0.460278, 0.584149, 0.65844, 0.359837, 0.048336, 0.644143, 0.808593, 0.605846, 0.630277},
{0.716958, 0.868078, 0.477846, 0.111075, 0.220761, 0.373136, 0.713928, 0.802408, 0.8942, 0.99469, 0.995642, 0.215349, 0.478445, 0.13826, 0.682599, 0.561677, 0.830697, 0.386308, 0.973279, 0.809518, 0.224465, 0.154836, 0.250136, 0.388282, 0.479756, 0.641677, 0.53832, 0.985958, 0.920404, 0.62853, 0.777586, 0.0811147, 0.313772, 0.481874, 0.921842, 0.890594, 0.247565, 0.720241, 0.173188, 0.0173366, 0.421059, 0.383512, 0.681946, 0.879807, 0.167735, 0.502164, 0.945181, 0.321395, 0.501307, 0.875799},
{0.248571, 0.0616335, 0.0984511, 0.509694, 0.643165, 0.356956, 0.879544, 0.949354, 0.498234, 0.184728, 0.441683, 0.443008, 0.675314, 0.270954, 0.210657, 0.92586, 0.67931, 0.99652, 0.964163, 0.18815, 0.0977609, 0.181301, 0.295452, 0.631711, 0.836524, 0.66997, 0.668715, 0.649887, 0.0927542, 0.660125, 0.574669, 0.93811, 0.41124, 0.920964, 0.805831, 0.766452, 0.742255, 0.669948, 0.267391, 0.687014, 0.929499, 0.0211378, 0.621925, 0.144761, 0.963659, 0.201018, 0.10423, 0.938252, 0.741727, 0.047102},
{0.0643881, 0.741431, 0.436327, 0.944892, 0.00582757, 0.568079, 0.0460933, 0.0561143, 0.0391738, 0.652629, 0.379129, 0.605194, 0.29496, 0.303663, 0.530821, 0.640182, 0.108173, 0.967131, 0.509443, 0.61457, 0.693178, 0.101115, 0.569243, 0.605465, 0.211148, 0.148088, 0.945599, 0.73631, 0.925653, 0.834312, 0.234891, 0.407921, 0.761625, 0.799323, 0.410012, 0.907779, 0.792736, 0.251277, 0.0226424, 0.87118, 0.158895, 0.995219, 0.724002, 0.544379, 0.780136, 0.0643972, 0.97337, 0.405419, 0.617891, 0.507797},
{0.0850118, 0.418785, 0.67658, 0.0618665, 0.750887, 0.0108938, 0.76161, 0.586344, 0.720745, 0.226539, 0.910262, 0.980659, 0.0788692, 0.106285, 0.303735, 0.881508, 0.847853, 0.0635486, 0.547668, 0.924691, 0.958954, 0.0424283, 0.0679973, 0.00298393, 0.698586, 0.297609, 0.235614, 0.875028, 0.575992, 0.247434, 0.52976, 0.185014, 0.551532, 0.386558, 0.63406, 0.457514, 0.672506, 0.0815859, 0.592058, 0.973082, 0.640791, 0.159563, 0.92903, 0.810164, 0.985849, 0.928501, 0.502809, 0.335089, 0.349673, 0.862385},
{0.795044, 0.803881, 0.132798, 0.573896, 0.625505, 0.635931, 0.130145, 0.150262, 0.174065, 0.404824, 0.204445, 0.649184, 0.545003, 0.531893, 0.330594, 0.173266, 0.793721, 0.468057, 0.029339, 0.22438, 0.0587206, 0.0752289, 0.051582, 0.706313, 0.241158, 0.31571, 0.626014, 0.427325, 0.206373, 0.938149, 0.0130012, 0.306836, 0.192096, 0.380603, 0.936678, 0.57465, 0.965994, 0.803712, 0.132439, 0.0253852, 0.738466, 0.908695, 0.288976, 0.361924, 0.529345, 0.875954, 0.154011, 0.0675214, 0.487921, 0.917657},
{0.993028, 0.308523, 0.0189752, 0.990642, 0.0472463, 0.823636, 0.563364, 0.390808, 0.141858, 0.839791, 0.206698, 0.367985, 0.93922, 0.471592, 0.754514, 0.0769038, 0.583801, 0.984499, 0.864712, 0.076682, 0.199364, 0.354289, 0.710352, 0.848918, 0.718133, 0.569674, 0.232317, 0.33066, 0.555654, 0.0884022, 0.272903, 0.0732305, 0.87964, 0.237246, 0.720736, 0.244767, 0.3663, 0.120829, 0.535478, 0.981986, 0.766083, 0.291037, 0.348361, 0.0617889, 0.869112, 0.0749111, 0.568643, 0.886168, 0.360596, 0.481843},
{0.210989, 0.624982, 0.412614, 0.455108, 0.608375, 0.0310418, 0.0545637, 0.466625, 0.253092, 0.398582, 0.32037, 0.116689, 0.0527485, 0.856903, 0.740768, 0.545156, 0.0483819, 0.0961235, 0.879042, 0.00687666, 0.0617268, 0.0831134, 0.396209, 0.454913, 0.423567, 0.906994, 0.941376, 0.71147, 0.889972, 0.950642, 0.605137, 0.913311, 0.222104, 0.247443, 0.906485, 0.15085, 0.10352, 0.808343, 0.802275, 0.190423, 0.476162, 0.904495, 0.707508, 0.933295, 0.588544, 0.265047, 0.821453, 0.0772275, 0.125028, 0.228837},
{0.939291, 0.650517, 0.419853, 0.887704, 0.878969, 0.51126, 0.719312, 0.243519, 0.355308, 0.358016, 0.253889, 0.190749, 0.0921564, 0.267392, 0.184217, 0.108898, 0.441672, 0.365915, 0.310951, 0.780129, 0.748258, 0.944408, 0.0772046, 0.690651, 0.498143, 0.58841, 0.568153, 0.230939, 0.0707376, 0.435493, 0.945117, 0.291544, 0.118897, 0.439311, 0.93038, 0.898295, 0.514754, 0.2641, 0.880152, 0.755107, 0.411446, 0.49308, 0.667177, 0.270562, 0.945776, 0.0476709, 0.344294, 0.911705, 0.963842, 0.947978},
{0.513412, 0.267679, 0.714969, 0.112945, 0.0832453, 0.308979, 0.595703, 0.703669, 0.60312, 0.657264, 0.143598, 0.589798, 0.450044, 0.156414, 0.285203, 0.490706, 0.804031, 0.333777, 0.789355, 0.326498, 0.156327, 0.901773, 0.130474, 0.760415, 0.169464, 0.233311, 0.338055, 0.318833, 0.977221, 0.214913, 0.430987, 0.206313, 0.572048, 0.580292, 0.52816, 0.119654, 0.766599, 0.674815, 0.219848, 0.255057, 0.658709, 0.0348146, 0.594399, 0.245231, 0.369757, 0.538275, 0.0246224, 0.741541, 0.665381, 0.574771},
{0.776483, 0.478498, 0.203129, 0.320026, 0.241724, 0.187587, 0.178009, 0.0315341, 0.240013, 0.712265, 0.483433, 0.0463309, 0.114889, 0.247752, 0.213795, 0.0601125, 0.980246, 0.522758, 0.0595656, 0.964986, 0.626382, 0.879372, 0.701495, 0.0310603, 0.65569, 0.390762, 0.0842813, 0.781294, 0.23674, 0.266784, 0.632974, 0.435602, 0.17654, 0.966414, 0.30485, 0.554622, 0.943277, 0.192801, 0.491004, 0.32651, 0.39162, 0.638193, 0.643679, 0.95264, 0.592231, 0.691644, 0.965515, 0.605454, 0.757804, 0.811089},
};

static const std::vector<float> costs = {869.502, 855.213, 308.202, 785.069, 780.133, 704.962, 904.48, 496.221, 471.404, 623.435, 444.818, 390.171, 840.497, 358.059, 136.79, 486.539, 873.9, 890.755, 783.033, 472.622, 547.011, 281.481, 246.103, 411.351, 944.776, 398.213, 527.979, 955.672, 944.713, 989.147, 511.876, 409.056, 497.164, 945.433, 460.242, 327.311, 861.3, 825.713, 959.346, 93.4116, 269.485, 356.201, 287.582, 157.881, 399.715, 422.75, 31.7311, 20.334, 534.796, 981.928};

static const std::vector<float> min_impressions = {0.978101, 0.134271, 0.290405, 0.33218, 0.613911, 0.23122, 0.798304, 0.496854, 0.506276, 0.0172763, 0.0275933, 0.851658, 0.350365, 0.249163, 0.606011, 0.64549, 0.329556, 0.143103, 0.427085, 0.984161};

//
#endif
