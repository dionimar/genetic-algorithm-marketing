#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 10;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_excl(cons_excl(cons_excl(cons_indep(cons_indep(events[36], events[27]),events[29]),events[43]),events[32]),events[31]),cons_excl(cons_indep(cons_excl(cons_excl(cons_excl(events[19], events[49]),events[31]),events[8]),events[1]),events[2]),cons_excl(cons_indep(cons_indep(cons_excl(cons_indep(events[49], events[16]),events[36]),events[48]),events[43]),events[32]),cons_excl(cons_excl(cons_excl(cons_incl(cons_excl(events[37], events[28]),events[1]),events[0]),events[23]),events[18]),cons_indep(cons_excl(cons_excl(cons_indep(cons_excl(events[25], events[27]),events[21]),events[18]),events[45]),events[0]),cons_excl(cons_excl(cons_incl(cons_excl(cons_incl(events[48], events[22]),events[9]),events[12]),events[27]),events[43]),cons_incl(cons_indep(cons_indep(cons_indep(cons_incl(events[19], events[4]),events[7]),events[34]),events[48]),events[26]),cons_excl(cons_incl(cons_indep(cons_excl(cons_incl(events[2], events[21]),events[16]),events[30]),events[18]),events[23]),cons_excl(cons_excl(cons_incl(cons_incl(cons_excl(events[8], events[23]),events[15]),events[16]),events[20]),events[42]),cons_indep(cons_incl(cons_indep(cons_incl(cons_indep(events[8], events[1]),events[12]),events[2]),events[25]),events[26])};


static const std::vector< std::vector<float> > prob = {{0.477048, 0.3732, 0.88524, 0.683903, 0.746756, 0.797032, 0.340848, 0.495541, 0.402424, 0.935136, 0.859944, 0.8143, 0.73795, 0.907411, 0.649349, 0.220032, 0.893168, 0.755935, 0.092219, 0.746761, 0.232166, 0.120184, 0.381922, 0.592591, 0.125876, 0.8758, 0.0570201, 0.414106, 0.771525, 0.649631, 0.565868, 0.7653, 0.673776, 0.827261, 0.678108, 0.503962, 0.981897, 0.790253, 0.278351, 0.143432, 0.908023, 0.816185, 0.42211, 0.832291, 0.547047, 0.661095, 0.260777, 0.551139, 0.13898, 0.480601},
{0.0550193, 0.429852, 0.11954, 0.197237, 0.375716, 0.614016, 0.167754, 0.59889, 0.391477, 0.271419, 0.903368, 0.513797, 0.486571, 0.824838, 0.216824, 0.560556, 0.284464, 0.527622, 0.465847, 0.614857, 0.529516, 0.0883947, 0.991222, 0.289494, 0.198462, 0.605945, 0.452436, 0.0366609, 0.825363, 0.470724, 0.588745, 0.398582, 0.476612, 0.102665, 0.142882, 0.129193, 0.36279, 0.631179, 0.981582, 0.196278, 0.670129, 0.533936, 0.952595, 0.116846, 0.00169155, 0.326005, 0.579203, 0.485925, 0.246727, 0.129487},
{0.682227, 0.975579, 0.951775, 0.614018, 0.0515985, 0.477595, 0.14794, 0.651614, 0.99887, 0.257652, 0.299812, 0.324345, 0.84995, 0.0584228, 0.689431, 0.219572, 0.0762133, 0.437702, 0.508179, 0.217168, 0.70351, 0.887045, 0.258342, 0.424143, 0.989556, 0.172552, 0.646949, 0.0314722, 0.716602, 0.872329, 0.444799, 0.575937, 0.369654, 0.903501, 0.913118, 0.624503, 0.632985, 0.516372, 0.83011, 0.214623, 0.132784, 0.329358, 0.721541, 0.972155, 0.5014, 0.321181, 0.484566, 0.439797, 0.795522, 0.93026},
{0.398273, 0.16391, 0.867383, 0.393937, 0.835096, 0.281156, 0.498427, 0.174216, 0.476267, 0.410575, 0.157733, 0.635865, 0.374842, 0.0265882, 0.337808, 0.206429, 0.13171, 0.222424, 0.120145, 0.462599, 0.868181, 0.137315, 0.745444, 0.817193, 0.100099, 0.234453, 0.660841, 0.33573, 0.0335301, 0.882779, 0.636625, 0.0212331, 0.190109, 0.694057, 0.471888, 0.618824, 0.194838, 0.622453, 0.353711, 0.00571453, 0.295864, 0.154503, 0.635778, 0.782559, 0.530697, 0.957874, 0.687301, 0.838265, 0.246287, 0.482385},
{0.221778, 0.964355, 0.846349, 0.405268, 0.144677, 0.931708, 0.335966, 0.657037, 0.884844, 0.148275, 0.0879572, 0.672171, 0.764094, 0.945698, 0.48442, 0.333062, 0.606822, 0.377025, 0.437991, 0.544864, 0.415725, 0.124468, 0.824236, 0.466608, 0.29489, 0.660038, 0.619142, 0.859916, 0.33458, 0.363548, 0.703912, 0.462913, 0.468103, 0.0880206, 0.0456471, 0.214533, 0.933925, 0.937733, 0.555672, 0.207095, 0.394121, 0.0273083, 0.789115, 0.889841, 0.0797851, 0.674361, 0.706682, 0.785233, 0.139829, 0.133965},
{0.948852, 0.486818, 0.449103, 0.840073, 0.628112, 0.50272, 0.47994, 0.498039, 0.896553, 0.935485, 0.807685, 0.308524, 0.16743, 0.924182, 0.484602, 0.386878, 0.372467, 0.411998, 0.845635, 0.998275, 0.818589, 0.487942, 0.51565, 0.239148, 0.233822, 0.654456, 0.912165, 0.891427, 0.86818, 0.519094, 0.097571, 0.43699, 0.48366, 0.632743, 0.0628997, 0.642725, 0.195466, 0.0618919, 0.087267, 0.416768, 0.0893334, 0.935784, 0.0630109, 0.48335, 0.560209, 0.876843, 0.34598, 0.629364, 0.312475, 0.887893},
{0.376616, 0.171428, 0.272656, 0.0311917, 0.985792, 0.219502, 0.240155, 0.0928418, 0.0354017, 0.976035, 0.215548, 0.559257, 0.589204, 0.265252, 0.162472, 0.293609, 0.926811, 0.179486, 0.0429889, 0.558361, 0.720633, 0.511109, 0.503188, 0.950618, 0.261071, 0.906373, 0.368434, 0.104603, 0.281601, 0.641399, 0.659607, 0.934601, 0.879489, 0.992806, 0.911949, 0.539774, 0.545231, 0.219246, 0.98205, 0.0714512, 0.26316, 0.869995, 0.271183, 0.520912, 0.280793, 0.0727306, 0.700844, 0.614046, 0.506125, 0.858741},
{0.908589, 0.0586804, 0.92703, 0.722331, 0.671732, 0.266227, 0.857244, 0.00758365, 0.0097132, 0.298991, 0.292992, 0.121158, 0.101774, 0.172894, 0.259937, 0.212132, 0.334281, 0.105519, 0.815022, 0.406358, 0.82785, 0.186636, 0.148745, 0.911731, 0.11701, 0.310088, 0.875931, 0.532192, 0.264513, 0.695231, 0.409172, 0.221641, 0.897299, 0.996256, 0.796605, 0.0322736, 0.582527, 0.985001, 0.522057, 0.609209, 0.216559, 0.322106, 0.767643, 0.770774, 0.154498, 0.903915, 0.309065, 0.824187, 0.425082, 0.876925},
{0.165699, 0.727577, 0.261204, 0.108253, 0.647995, 0.985048, 0.401872, 0.541475, 0.826154, 0.744732, 0.813668, 0.427085, 0.165015, 0.716953, 0.414986, 0.966294, 0.669204, 0.342127, 0.98451, 0.149437, 0.847658, 0.348385, 0.904947, 0.812838, 0.593905, 0.370834, 0.327429, 0.91409, 0.769914, 0.271403, 0.651093, 0.93425, 0.645228, 0.216433, 0.0601728, 0.268881, 0.184133, 0.668157, 0.807299, 0.659638, 0.504865, 0.504893, 0.683331, 0.423199, 0.817751, 0.702875, 0.211434, 0.346337, 0.864999, 0.0953322},
{0.0821305, 0.117334, 0.285656, 0.708979, 0.670166, 0.296822, 0.624284, 0.0590931, 0.0921187, 0.0496381, 0.292018, 0.923392, 0.518488, 0.91761, 0.371415, 0.717534, 0.944979, 0.778938, 0.403368, 0.147032, 0.626519, 0.12912, 0.436842, 0.16114, 0.785469, 0.325703, 0.212049, 0.866657, 0.773023, 0.356203, 0.167309, 0.277355, 0.402939, 0.269697, 0.339086, 0.803, 0.743996, 0.980638, 0.37378, 0.840886, 0.218771, 0.148548, 0.402297, 0.572455, 0.367725, 0.755328, 0.474432, 0.495026, 0.303826, 0.809866},
};

static const std::vector<float> costs = {851.387, 876.904, 335.98, 21.3743, 902.9, 229.771, 870.69, 780.813, 177.464, 196.873, 647.748, 889.02, 685.404, 969.168, 312.099, 795.335, 919.518, 841.37, 540.056, 160.783, 92.5917, 282.456, 43.824, 855.51, 479.872, 212.425, 132.633, 195.217, 119.918, 414.869, 992.042, 556.349, 337.253, 590.406, 739.657, 902.645, 816.667, 621.908, 814.605, 930.14, 89.7776, 374.718, 734.526, 491.404, 909.63, 954.289, 740.564, 32.9289, 722.187, 633.162};

static const std::vector<float> min_impressions = {0.328865, 0.467996, 0.921548, 0.469929, 0.523757, 0.353592, 0.0571252, 0.631948, 0.869424, 0.368198};

//
#endif
