#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 10;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_excl(cons_incl(cons_excl(cons_excl(cons_excl(cons_indep(cons_excl(cons_indep(cons_incl(cons_indep(events[43], events[7]),events[39]),events[15]),events[37]),events[36]),events[14]),events[47]),events[46]),events[26]),events[17]),cons_incl(cons_indep(cons_excl(cons_indep(cons_incl(cons_indep(cons_indep(cons_incl(cons_incl(cons_incl(events[30], events[39]),events[6]),events[10]),events[5]),events[16]),events[9]),events[34]),events[24]),events[28]),events[46]),cons_indep(cons_indep(cons_indep(cons_indep(cons_excl(cons_excl(cons_indep(cons_incl(cons_indep(cons_indep(events[26], events[46]),events[20]),events[15]),events[2]),events[14]),events[45]),events[7]),events[38]),events[9]),events[5]),cons_incl(cons_indep(cons_excl(cons_excl(cons_incl(cons_indep(cons_excl(cons_excl(cons_excl(cons_incl(events[45], events[38]),events[46]),events[35]),events[22]),events[16]),events[13]),events[31]),events[17]),events[42]),events[30]),cons_indep(cons_excl(cons_incl(cons_incl(cons_excl(cons_indep(cons_excl(cons_incl(cons_incl(cons_excl(events[2], events[36]),events[30]),events[13]),events[14]),events[7]),events[42]),events[24]),events[47]),events[9]),events[46]),cons_excl(cons_indep(cons_excl(cons_incl(cons_excl(cons_excl(cons_excl(cons_indep(cons_indep(cons_indep(events[37], events[7]),events[45]),events[13]),events[31]),events[47]),events[23]),events[6]),events[12]),events[46]),events[10]),cons_indep(cons_excl(cons_excl(cons_indep(cons_incl(cons_indep(cons_excl(cons_indep(cons_incl(cons_incl(events[31], events[10]),events[4]),events[32]),events[25]),events[45]),events[49]),events[27]),events[37]),events[5]),events[42]),cons_excl(cons_incl(cons_indep(cons_indep(cons_incl(cons_excl(cons_excl(cons_excl(cons_excl(cons_indep(events[37], events[33]),events[11]),events[28]),events[31]),events[39]),events[19]),events[42]),events[25]),events[4]),events[41]),cons_excl(cons_excl(cons_incl(cons_indep(cons_incl(cons_excl(cons_excl(cons_indep(cons_indep(cons_excl(events[32], events[6]),events[37]),events[4]),events[33]),events[8]),events[17]),events[1]),events[42]),events[26]),events[43]),cons_indep(cons_incl(cons_incl(cons_incl(cons_indep(cons_indep(cons_indep(cons_excl(cons_indep(cons_indep(events[17], events[4]),events[10]),events[47]),events[7]),events[48]),events[5]),events[39]),events[20]),events[13]),events[12])};


static const std::vector< std::vector<float> > prob = {{0.151554, 0.334315, 0.145294, 0.419212, 0.569201, 0.00857138, 0.92261, 0.684372, 0.649945, 0.901873, 0.304731, 0.637166, 0.128922, 0.465022, 0.72681, 0.0505958, 0.320286, 0.13448, 0.217967, 0.780128, 0.319756, 0.669676, 0.877565, 0.165696, 0.161703, 0.139671, 0.898654, 0.563354, 0.644842, 0.103782, 0.906545, 0.100525, 0.191034, 0.813608, 0.282462, 0.53281, 0.5684, 0.35892, 0.0770998, 0.842896, 0.645721, 0.649652, 0.700171, 0.581412, 0.932636, 0.941554, 0.478542, 0.987631, 0.547104, 0.879318},
{0.068285, 0.746962, 0.239568, 0.786255, 0.975425, 0.356218, 0.694212, 0.822805, 0.476632, 0.879193, 0.447459, 0.275897, 0.947599, 0.777588, 0.532685, 0.0917053, 0.273168, 0.174065, 0.936705, 0.308118, 0.556583, 0.47587, 0.737467, 0.117965, 0.765092, 0.694218, 0.988405, 0.377738, 0.614619, 0.941389, 0.708175, 0.545959, 0.739223, 0.252212, 0.914593, 0.204456, 0.935032, 0.465136, 0.703831, 0.245423, 0.608021, 0.650832, 0.438913, 0.141501, 0.48586, 0.480992, 0.85128, 0.337574, 0.0279772, 0.303896},
{0.14379, 0.474897, 0.00182903, 0.0235003, 0.287412, 0.84835, 0.721395, 0.875096, 0.915412, 0.998526, 0.24262, 0.256596, 0.651798, 0.963057, 0.264766, 0.523864, 0.545452, 0.959169, 0.348169, 0.928257, 0.211998, 0.808684, 0.671659, 0.551408, 0.841248, 0.335442, 0.386292, 0.0110943, 0.174951, 0.0226326, 0.923987, 0.77258, 0.194873, 0.12589, 0.657982, 0.851379, 0.344309, 0.64594, 0.00081918, 0.78301, 0.162559, 0.232639, 0.0439519, 0.598046, 0.546058, 0.124533, 0.231051, 0.947298, 0.183337, 0.908062},
{0.490204, 0.703309, 0.801835, 0.640225, 0.414264, 0.486287, 0.298955, 0.312068, 0.944312, 0.409099, 0.330452, 0.844236, 0.83828, 0.295977, 0.0875253, 0.572725, 0.376137, 0.77605, 0.850239, 0.435836, 0.972808, 0.282743, 0.187231, 0.230913, 0.773518, 0.757007, 0.808599, 0.811145, 0.221118, 0.953773, 0.971803, 0.382826, 0.209075, 0.929256, 0.840293, 0.918738, 0.725474, 0.450238, 0.409355, 0.361224, 0.521546, 0.335664, 0.644289, 0.792857, 0.230751, 0.940533, 0.881458, 0.768135, 0.762214, 0.745699},
{0.962085, 0.403303, 0.859559, 0.794032, 0.853336, 0.590359, 0.489074, 0.535753, 0.41585, 0.410954, 0.207242, 0.542934, 0.175205, 0.445693, 0.987667, 0.864681, 0.195542, 0.258202, 0.786248, 0.622663, 0.314434, 0.0470241, 0.321906, 0.493573, 0.0542908, 0.133503, 0.288797, 0.138075, 0.0953643, 0.127904, 0.625467, 0.332513, 0.654723, 0.0636321, 0.661661, 0.895423, 0.701353, 0.676035, 0.427233, 0.842979, 0.758909, 0.975632, 0.963689, 0.050695, 0.445958, 0.3419, 0.674595, 0.0402547, 0.469521, 0.222459},
{0.903876, 0.249196, 0.453281, 0.599804, 0.00428643, 0.492267, 0.533653, 0.476326, 0.243394, 0.218029, 0.918076, 0.716304, 0.494049, 0.925473, 0.193997, 0.236123, 0.19894, 0.188104, 0.649017, 0.807757, 0.223767, 0.18257, 0.100532, 0.227779, 0.248926, 0.47472, 0.308113, 0.899565, 0.622216, 0.751235, 0.0629422, 0.524617, 0.83459, 0.748122, 0.530524, 0.135043, 0.934108, 0.936602, 0.762142, 0.344474, 0.586531, 0.950968, 0.0464037, 0.79775, 0.43176, 0.0638031, 0.746898, 0.700615, 0.00932617, 0.84548},
{0.0263655, 0.316582, 0.0489676, 0.994875, 0.143435, 0.600538, 0.0906278, 0.117341, 0.788168, 0.579497, 0.0410955, 0.766655, 0.716263, 0.732424, 0.386347, 0.610269, 0.295759, 0.238623, 0.600041, 0.107327, 0.389096, 0.408051, 0.933412, 0.347564, 0.459661, 0.859031, 0.117028, 0.537421, 0.637086, 0.822853, 0.604347, 0.231859, 0.399878, 0.517512, 0.300454, 0.851407, 0.850847, 0.511532, 0.494051, 0.0896, 0.00640848, 0.181132, 0.800507, 0.313993, 0.929391, 0.19853, 0.335234, 0.850819, 0.833551, 0.317055},
{0.981179, 0.612153, 0.679621, 0.741931, 0.139498, 0.786629, 0.368535, 0.567083, 0.36393, 0.642557, 0.49141, 0.325295, 0.869562, 0.938454, 0.317425, 0.24858, 0.216195, 0.641027, 0.545093, 0.052646, 0.0975273, 0.701487, 0.844478, 0.549982, 0.0431634, 0.774151, 0.713174, 0.66089, 0.800389, 0.527742, 0.355793, 0.285696, 0.769676, 0.660735, 0.269708, 0.479522, 0.745024, 0.236709, 0.219571, 0.907832, 0.0777509, 0.833256, 0.90061, 0.772174, 0.364404, 0.964799, 0.563754, 0.234767, 0.166233, 0.990078},
{0.755794, 0.364928, 0.569766, 0.443385, 0.23584, 0.82174, 0.911924, 0.309759, 0.246538, 0.365423, 0.612675, 0.404199, 0.577098, 0.830119, 0.486722, 0.905141, 0.667762, 0.217099, 0.579469, 0.481299, 0.409213, 0.980559, 0.631852, 0.86027, 0.895601, 0.321209, 0.0439293, 0.476705, 0.0106019, 0.690362, 0.691308, 0.399875, 0.0782481, 0.187672, 0.220295, 0.183204, 0.717074, 0.958652, 0.368063, 0.581234, 0.460834, 0.194027, 0.454509, 0.732567, 0.400695, 0.656654, 0.112319, 0.887018, 0.632172, 0.0162284},
{0.829645, 0.796653, 0.948693, 0.941004, 0.546303, 0.72576, 0.994781, 0.547416, 0.959599, 0.959877, 0.893535, 0.105046, 0.261409, 0.235203, 0.193947, 0.367065, 0.448714, 0.680001, 0.634477, 0.105658, 0.167938, 0.195289, 0.512231, 0.0166875, 0.454841, 0.757506, 0.745202, 0.542078, 0.119312, 0.0395128, 0.999803, 0.314, 0.157784, 0.0298629, 0.715818, 0.0587654, 0.898025, 0.0571071, 0.739633, 0.564176, 0.327929, 0.0929966, 0.615868, 0.18546, 0.640098, 0.653321, 0.977594, 0.469086, 0.51098, 0.54367},
};

static const std::vector<float> costs = {755.881, 443.149, 563.036, 386.66, 227.77, 552.506, 44.1824, 329.197, 165.486, 459.295, 300.208, 637.673, 742.233, 763.309, 870.38, 130.123, 640.832, 358.176, 521.959, 991.844, 828.762, 843.865, 441.815, 48.3033, 559.045, 970.68, 962.404, 419.728, 209.275, 839.473, 793.095, 851.204, 139.724, 340.132, 51.7774, 786.242, 363.816, 955.25, 58.8916, 37.705, 760.086, 40.1151, 399.023, 183.843, 972.899, 649.187, 680.881, 8.03468, 731.606, 346.407};

static const std::vector<float> min_impressions = {0.532905, 0.82989, 0.837685, 0.756266, 0.188515, 0.0134913, 0.465108, 0.603221, 0.763033, 0.23061};

//
#endif
