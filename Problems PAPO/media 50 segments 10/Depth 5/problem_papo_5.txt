#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 10;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_indep(cons_indep(cons_excl(cons_incl(cons_excl(events[45], events[29]),events[42]),events[49]),events[48]),events[47]),cons_incl(cons_incl(cons_indep(cons_excl(cons_incl(events[21], events[19]),events[33]),events[45]),events[29]),events[44]),cons_indep(cons_excl(cons_excl(cons_indep(cons_indep(events[18], events[39]),events[35]),events[1]),events[45]),events[19]),cons_excl(cons_incl(cons_excl(cons_incl(cons_incl(events[22], events[6]),events[30]),events[13]),events[48]),events[29]),cons_excl(cons_excl(cons_indep(cons_excl(cons_excl(events[38], events[26]),events[31]),events[27]),events[45]),events[19]),cons_indep(cons_incl(cons_incl(cons_excl(cons_excl(events[3], events[20]),events[4]),events[0]),events[9]),events[42]),cons_excl(cons_excl(cons_indep(cons_indep(cons_indep(events[44], events[33]),events[48]),events[15]),events[4]),events[26]),cons_incl(cons_excl(cons_incl(cons_indep(cons_indep(events[29], events[3]),events[39]),events[23]),events[11]),events[28]),cons_excl(cons_excl(cons_incl(cons_indep(cons_excl(events[34], events[25]),events[30]),events[17]),events[29]),events[7]),cons_indep(cons_incl(cons_indep(cons_indep(cons_indep(events[39], events[8]),events[16]),events[35]),events[43]),events[33])};


static const std::vector< std::vector<float> > prob = {{0.543588, 0.438804, 0.64357, 0.180603, 0.211403, 0.566005, 0.0537365, 0.274484, 0.329286, 0.552344, 0.930224, 0.88091, 0.10255, 0.34968, 0.762085, 0.276978, 0.303388, 0.765327, 0.750844, 0.48753, 0.589975, 0.717358, 0.0946111, 0.856754, 0.599572, 0.685668, 0.357229, 0.231942, 0.546893, 0.809462, 0.405509, 0.696007, 0.5359, 0.30016, 0.655988, 0.499718, 0.165483, 0.547807, 0.286082, 0.0469424, 0.0538665, 0.485238, 0.322158, 0.565489, 0.809354, 0.456654, 0.475889, 0.169977, 0.671277, 0.938302},
{0.349161, 0.876307, 0.976153, 0.830996, 0.235353, 0.264224, 0.697004, 0.78052, 0.689372, 0.426878, 0.582803, 0.943856, 0.800188, 0.531435, 0.543087, 0.460569, 0.56948, 0.992845, 0.986764, 0.781569, 0.581625, 0.977004, 0.0307312, 0.903142, 0.0314713, 0.890174, 0.588234, 0.643226, 0.7489, 0.799994, 0.924245, 0.694666, 0.121681, 0.9098, 0.221655, 0.72843, 0.471757, 0.737771, 0.811823, 0.795943, 0.219986, 0.475397, 0.9996, 0.667093, 0.964944, 0.887224, 0.787552, 0.959473, 0.116069, 0.487246},
{0.691483, 0.0342861, 0.324699, 0.262184, 0.876306, 0.42248, 0.738576, 0.229554, 0.144049, 0.570383, 0.214001, 0.713694, 0.911637, 0.615766, 0.382056, 0.455529, 0.950556, 0.010307, 0.191395, 0.907175, 0.810361, 0.0319342, 0.629751, 0.532521, 0.931273, 0.260227, 0.723952, 0.0243937, 0.448691, 0.937228, 0.247409, 0.254393, 0.263932, 0.519576, 0.734072, 0.107147, 0.928936, 0.72712, 0.912376, 0.520742, 0.743787, 0.598924, 0.467781, 0.723656, 0.79157, 0.976609, 0.40924, 0.13349, 0.456567, 0.607954},
{0.0279161, 0.775271, 0.777242, 0.779802, 0.201891, 0.69298, 0.65153, 0.0441994, 0.977798, 0.461201, 0.757508, 0.488374, 0.78005, 0.507756, 0.356582, 0.540968, 0.861941, 0.523193, 0.952648, 0.691501, 0.1192, 0.725775, 0.0467189, 0.586942, 0.590834, 0.404637, 0.609267, 0.963779, 0.105711, 0.64624, 0.379429, 0.0557944, 0.817819, 0.947756, 0.73904, 0.742441, 0.236288, 0.935692, 0.176963, 0.884127, 0.970187, 0.798711, 0.80093, 0.0603437, 0.381737, 0.325288, 0.46458, 0.838102, 0.464723, 0.936487},
{0.188252, 0.00563378, 0.56642, 0.789155, 0.75863, 0.596269, 0.460873, 0.829227, 0.0170084, 0.906213, 0.108062, 0.765368, 0.890522, 0.027244, 0.042448, 0.724448, 0.0348816, 0.969852, 0.469401, 0.529197, 0.40976, 0.980428, 0.841835, 0.161757, 0.337422, 0.459448, 0.905436, 0.166499, 0.120013, 0.725945, 0.327813, 0.478301, 0.27497, 0.0971213, 0.907692, 0.935819, 0.894276, 0.867631, 0.649528, 0.331286, 0.977631, 0.0166544, 0.129175, 0.351212, 0.335357, 0.591608, 0.98236, 0.271731, 0.0316153, 0.914386},
{0.110382, 0.218218, 0.139553, 0.0938486, 0.159492, 0.818137, 0.945723, 0.853601, 0.101789, 0.714178, 0.960159, 0.34332, 0.642736, 0.926087, 0.137637, 0.232639, 0.0774155, 0.78067, 0.960078, 0.105986, 0.0563518, 0.482937, 0.702561, 0.203205, 0.221137, 0.536905, 0.0624645, 0.239074, 0.504515, 0.547375, 0.521153, 0.522133, 0.455787, 0.488836, 0.251879, 0.904118, 0.713749, 0.840098, 0.779498, 0.497026, 0.016327, 0.521416, 0.736419, 0.470834, 0.215122, 0.809552, 0.762058, 0.186665, 0.878759, 0.0890275},
{0.0471993, 0.444988, 0.618786, 0.843927, 0.913159, 0.595323, 0.591817, 0.00500207, 0.245394, 0.0444923, 0.809416, 0.646985, 0.618431, 0.0493313, 0.575789, 0.247804, 0.370216, 0.328339, 0.84776, 0.136201, 0.563681, 0.54398, 0.653279, 0.462164, 0.409684, 0.174105, 0.947593, 0.33193, 0.445312, 0.564978, 0.61602, 0.834168, 0.430441, 0.989726, 0.330942, 0.728791, 0.443391, 0.153406, 0.40294, 0.632158, 0.151169, 0.472094, 0.0672369, 0.411918, 0.400659, 0.381345, 0.907559, 0.92358, 0.600843, 0.347639},
{0.461971, 0.677079, 0.570687, 0.651721, 0.435686, 0.693192, 0.203339, 0.31231, 0.0788291, 0.827566, 0.14352, 0.698832, 0.794991, 0.0150471, 0.85515, 0.00617409, 0.507799, 0.294242, 0.212787, 0.970792, 0.197801, 0.340001, 0.459767, 0.569809, 0.189371, 0.22054, 0.513438, 0.170585, 0.989057, 0.534063, 0.849986, 0.0406167, 0.10122, 0.521676, 0.0682606, 0.124231, 0.196818, 0.78144, 0.0761764, 0.12262, 0.115269, 0.560948, 0.394824, 0.979377, 0.0560541, 0.265209, 0.121561, 0.15506, 0.208759, 0.121921},
{0.650713, 0.534244, 0.371319, 0.858972, 0.477235, 0.164715, 0.288013, 0.460425, 0.69326, 0.906979, 0.500783, 0.50921, 0.568422, 0.131767, 0.310148, 0.153023, 0.797724, 0.352708, 0.0490407, 0.651028, 0.0743003, 0.547888, 0.568595, 0.791638, 0.267359, 0.307521, 0.389849, 0.132179, 0.190765, 0.715815, 0.723556, 0.839691, 0.73433, 0.700383, 0.591315, 0.904565, 0.196526, 0.800908, 0.484479, 0.745115, 0.664695, 0.915617, 0.884895, 0.259088, 0.868639, 0.850675, 0.0635128, 0.00744873, 0.627559, 0.383609},
{0.141841, 0.854844, 0.122467, 0.173948, 0.378018, 0.340307, 0.282106, 0.340596, 0.265089, 0.400701, 0.467339, 0.574724, 0.930978, 0.0895007, 0.404691, 0.875219, 0.871346, 0.215189, 0.78873, 0.63885, 0.0234033, 0.0376307, 0.371205, 0.503031, 0.675832, 0.408242, 0.364256, 0.0276296, 0.490799, 0.408534, 0.0425838, 0.122165, 0.920467, 0.8226, 0.806399, 0.0673005, 0.952249, 0.845346, 0.0921488, 0.718568, 0.997063, 0.716499, 0.174678, 0.531664, 0.775216, 0.374259, 0.992257, 0.8332, 0.579847, 0.658127},
};

static const std::vector<float> costs = {490.365, 798.463, 834.207, 926.421, 326.313, 566.601, 840.441, 999.97, 678.19, 226.311, 144.196, 472.262, 371.904, 601.36, 238.367, 371.179, 808.822, 116.805, 933.354, 567.751, 861.111, 893.617, 444.076, 112.999, 740.071, 973.019, 450.979, 211.744, 455.819, 231.393, 757.617, 790.7, 463.683, 817.774, 629.941, 468.723, 96.2935, 836.731, 495.266, 137.663, 79.8235, 899.538, 837.615, 371.038, 808.594, 967.274, 370.375, 920.327, 111.569, 427.544};

static const std::vector<float> min_impressions = {0.30788, 0.879388, 0.0796968, 0.680884, 0.941309, 0.85568, 0.238533, 0.236692, 0.661382, 0.0406711};

//
#endif
