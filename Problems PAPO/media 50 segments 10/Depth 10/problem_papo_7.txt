#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 10;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_incl(cons_indep(cons_incl(cons_incl(cons_indep(cons_indep(cons_indep(cons_excl(cons_indep(cons_excl(events[33], events[16]),events[1]),events[21]),events[22]),events[41]),events[25]),events[26]),events[8]),events[34]),events[28]),cons_incl(cons_incl(cons_indep(cons_indep(cons_excl(cons_indep(cons_incl(cons_incl(cons_indep(cons_incl(events[21], events[47]),events[41]),events[18]),events[38]),events[15]),events[10]),events[20]),events[6]),events[48]),events[19]),cons_incl(cons_incl(cons_incl(cons_incl(cons_incl(cons_excl(cons_indep(cons_incl(cons_indep(cons_indep(events[14], events[29]),events[15]),events[1]),events[46]),events[34]),events[42]),events[37]),events[30]),events[3]),events[16]),cons_incl(cons_incl(cons_incl(cons_indep(cons_excl(cons_excl(cons_incl(cons_incl(cons_excl(cons_indep(events[18], events[37]),events[20]),events[48]),events[26]),events[31]),events[24]),events[5]),events[6]),events[38]),events[2]),cons_indep(cons_excl(cons_indep(cons_indep(cons_indep(cons_excl(cons_incl(cons_excl(cons_excl(cons_excl(events[45], events[24]),events[33]),events[17]),events[8]),events[20]),events[35]),events[42]),events[11]),events[36]),events[6]),cons_indep(cons_incl(cons_indep(cons_indep(cons_indep(cons_excl(cons_indep(cons_excl(cons_excl(cons_incl(events[30], events[25]),events[37]),events[43]),events[44]),events[9]),events[26]),events[0]),events[4]),events[48]),events[39]),cons_excl(cons_indep(cons_indep(cons_incl(cons_indep(cons_excl(cons_indep(cons_incl(cons_excl(cons_indep(events[11], events[31]),events[40]),events[2]),events[17]),events[45]),events[30]),events[46]),events[14]),events[25]),events[22]),cons_indep(cons_indep(cons_indep(cons_indep(cons_excl(cons_incl(cons_incl(cons_incl(cons_excl(cons_indep(events[31], events[2]),events[7]),events[18]),events[13]),events[44]),events[1]),events[11]),events[49]),events[24]),events[10]),cons_incl(cons_incl(cons_indep(cons_excl(cons_indep(cons_excl(cons_incl(cons_indep(cons_indep(cons_incl(events[45], events[29]),events[10]),events[43]),events[3]),events[14]),events[1]),events[4]),events[36]),events[46]),events[23]),cons_indep(cons_excl(cons_indep(cons_excl(cons_incl(cons_excl(cons_excl(cons_excl(cons_incl(cons_indep(events[16], events[41]),events[30]),events[34]),events[23]),events[40]),events[1]),events[10]),events[11]),events[18]),events[48])};


static const std::vector< std::vector<float> > prob = {{0.442937, 0.766946, 0.359579, 0.898733, 0.842082, 0.257701, 0.853285, 0.0545986, 0.778739, 0.508039, 0.976226, 0.167682, 0.216925, 0.141728, 0.893577, 0.783042, 0.15954, 0.223733, 0.200783, 0.845072, 0.596775, 0.666362, 0.199753, 0.726043, 0.254716, 0.284047, 0.28335, 0.899718, 0.646703, 0.235604, 0.538124, 0.77132, 0.509454, 0.934946, 0.340276, 0.0268125, 0.188837, 0.25701, 0.378753, 0.681282, 0.852141, 0.870209, 0.56495, 0.604573, 0.0632717, 0.580962, 0.824736, 0.02904, 0.781265, 0.207036},
{0.49909, 0.0890327, 0.691156, 0.40819, 0.484213, 0.799541, 0.152828, 0.718633, 0.817188, 0.174516, 0.549936, 0.0150924, 0.370522, 0.263766, 0.706251, 0.735623, 0.390111, 0.216844, 0.819293, 0.586316, 0.642123, 0.772432, 0.204626, 0.42631, 0.497761, 0.0223233, 0.0802854, 0.202068, 7.30763e05, 0.778182, 0.155615, 0.56492, 0.236358, 0.53984, 0.696009, 0.674551, 0.10097, 0.312389, 0.799751, 0.290753, 0.726818, 0.420142, 0.735227, 0.516187, 0.959774, 0.842541, 0.870752, 0.371394, 0.176771, 0.199393},
{0.223777, 0.699456, 0.818919, 0.0377793, 0.580015, 0.760413, 0.979253, 0.0203511, 0.678896, 0.889096, 0.940917, 0.449339, 0.874809, 0.164938, 0.525585, 0.281979, 0.61195, 0.254867, 0.170541, 0.0793124, 0.283204, 0.779225, 0.919993, 0.386879, 0.227991, 0.377908, 0.307056, 0.723441, 0.586749, 0.0976539, 0.856261, 0.691775, 0.900774, 0.575006, 0.671084, 0.49423, 0.952881, 0.470178, 0.477234, 0.753346, 0.572813, 0.508417, 0.255326, 0.444595, 0.312217, 0.357624, 0.772133, 0.592467, 0.103059, 0.958727},
{0.0525892, 0.197205, 0.949158, 0.952104, 0.723749, 0.0938129, 0.701263, 0.975689, 0.152097, 0.308114, 0.0620028, 0.577358, 0.22195, 0.555525, 0.848058, 0.461964, 0.755538, 0.746289, 0.433833, 0.169412, 0.25849, 0.669757, 0.074744, 0.893877, 0.63002, 0.301444, 0.760075, 0.0622051, 0.27565, 0.486751, 0.116387, 0.613531, 0.673381, 0.493751, 0.271479, 0.708131, 0.814505, 0.906229, 0.609268, 0.200855, 0.476103, 0.0392941, 0.924603, 0.449097, 0.0608637, 0.611988, 0.672688, 0.594291, 0.746964, 0.626405},
{0.713663, 0.565945, 0.611021, 0.855594, 0.279161, 0.569229, 0.359109, 0.925406, 0.950888, 0.327446, 0.21387, 0.628471, 0.734253, 0.933578, 0.833216, 0.141518, 0.726331, 0.928609, 0.0672304, 0.140185, 0.435944, 0.54405, 0.482894, 0.662627, 0.723193, 0.431761, 0.252328, 0.633785, 0.359819, 0.0835415, 0.50918, 0.516561, 0.38697, 0.84668, 0.397267, 0.0899826, 0.280984, 0.486861, 0.774115, 0.325462, 0.433272, 0.381742, 0.127041, 0.167232, 0.13332, 0.00865251, 0.241724, 0.397842, 0.0402146, 0.859383},
{0.760888, 0.0267521, 0.688784, 0.709494, 0.64189, 0.622919, 0.549665, 0.116133, 0.0754529, 0.775968, 0.679452, 0.745002, 0.340453, 0.593696, 0.983468, 0.663209, 0.593182, 0.810055, 0.247012, 0.901196, 0.95546, 0.116218, 0.702366, 0.716396, 0.244651, 0.0831103, 0.979175, 0.86654, 0.114971, 0.291406, 0.953366, 0.237536, 0.563643, 0.379913, 0.775331, 0.259781, 0.594678, 0.392006, 0.516754, 0.963631, 0.201464, 0.0947063, 0.587611, 0.390565, 0.0795337, 0.626064, 0.93697, 0.134898, 0.846663, 0.609525},
{0.123935, 0.685225, 0.769801, 0.633156, 0.364902, 0.980683, 0.646957, 0.0388021, 0.795395, 0.300285, 0.441285, 0.0600047, 0.0593609, 0.0620466, 0.561363, 0.0535834, 0.415393, 0.109468, 0.277818, 0.240483, 0.790227, 0.0306427, 0.0225565, 0.217201, 0.0990607, 0.733325, 0.47057, 0.942501, 0.34021, 0.669581, 0.803976, 0.12393, 0.623167, 0.40074, 0.0474969, 0.358379, 0.829525, 0.233789, 0.695137, 0.906429, 0.737212, 0.927908, 0.697456, 0.57593, 0.636933, 0.172742, 0.0757993, 0.149278, 0.0404884, 0.191391},
{0.459331, 0.0731464, 0.587694, 0.791187, 0.29598, 0.649734, 0.841538, 0.781536, 0.659818, 0.666639, 0.443384, 0.961792, 0.65825, 0.544738, 0.000160407, 0.460808, 0.799008, 0.326815, 0.77612, 0.860673, 0.31274, 0.953887, 0.573328, 0.55471, 0.353109, 0.584908, 0.421702, 0.548524, 0.241479, 0.96425, 0.259125, 0.100156, 0.814919, 0.440363, 0.730627, 0.77099, 0.970387, 0.41727, 0.5654, 0.0660522, 0.448526, 0.700091, 0.984053, 0.199247, 0.552678, 0.185013, 0.439749, 0.622171, 0.773735, 0.828701},
{0.644149, 0.211335, 0.468171, 0.39999, 0.590194, 0.76209, 0.674327, 0.651534, 0.105266, 0.324446, 0.984977, 0.323408, 0.0962439, 0.187302, 0.227794, 0.851683, 0.905219, 0.0864592, 0.507688, 0.268105, 0.871199, 0.660773, 0.318501, 0.738847, 0.998959, 0.643681, 0.920747, 0.993291, 0.698306, 0.0790073, 0.0797461, 0.661705, 0.275796, 0.148789, 0.562017, 0.326319, 0.933158, 0.216971, 0.163152, 0.787505, 0.0913627, 0.455681, 0.166195, 0.946942, 0.140552, 0.660678, 0.181116, 0.411108, 0.599509, 0.990467},
{0.99001, 0.285502, 0.927154, 0.406729, 0.408503, 0.0852919, 0.400245, 0.833347, 0.52571, 0.537892, 0.258393, 0.965379, 0.302775, 0.175069, 0.874768, 0.317199, 0.311229, 0.357302, 0.226149, 0.668786, 0.808312, 0.882924, 0.462338, 0.183927, 0.371595, 0.0261523, 0.868421, 0.171227, 0.0633878, 0.30797, 0.0214964, 0.198438, 0.710634, 0.643322, 0.678889, 0.190589, 0.0258828, 0.555319, 0.274968, 0.38821, 0.891868, 0.322885, 0.0600247, 0.775575, 0.00633153, 0.0280859, 0.904701, 0.738094, 0.0440329, 0.330795},
};

static const std::vector<float> costs = {216.296, 638.733, 76.8678, 307.247, 409.56, 793.054, 1.84635, 942.27, 481.871, 996.166, 205.786, 674.398, 201.154, 289.619, 405.847, 352.022, 212.994, 41.8745, 520.612, 537.021, 572.443, 329.289, 26.1311, 196.581, 847.767, 638.396, 662.238, 632.088, 588.177, 975.543, 156.781, 526.475, 94.4238, 625.995, 247.809, 862.739, 135.465, 786.471, 138.877, 218.18, 349.962, 383.254, 653.683, 914.033, 139.942, 501.705, 187.304, 565.895, 984.296, 310.265};

static const std::vector<float> min_impressions = {0.140719, 0.277038, 0.458913, 0.750212, 0.0383971, 0.875635, 0.0752996, 0.021698, 0.404378, 0.765117};

//
#endif
