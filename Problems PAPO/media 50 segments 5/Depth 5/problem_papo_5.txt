#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 5;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_excl(cons_excl(cons_indep(cons_incl(cons_excl(events[31], events[24]),events[0]),events[15]),events[9]),events[17]),cons_excl(cons_incl(cons_indep(cons_incl(cons_indep(events[45], events[40]),events[37]),events[16]),events[6]),events[49]),cons_incl(cons_indep(cons_indep(cons_indep(cons_incl(events[17], events[24]),events[3]),events[14]),events[0]),events[9]),cons_excl(cons_incl(cons_indep(cons_incl(cons_incl(events[6], events[29]),events[13]),events[38]),events[35]),events[12]),cons_excl(cons_incl(cons_incl(cons_incl(cons_indep(events[7], events[6]),events[49]),events[0]),events[8]),events[42])};


static const std::vector< std::vector<float> > prob = {{0.227174, 0.970524, 0.132498, 0.316455, 0.243285, 0.970174, 0.890979, 0.154065, 0.430369, 0.0317395, 0.830594, 0.104194, 0.568941, 0.5531, 0.612947, 0.0529117, 0.429467, 0.511217, 0.986748, 0.909884, 0.98939, 0.0263853, 0.409444, 0.705932, 0.0507723, 0.723224, 0.728425, 0.448094, 0.31393, 0.467067, 0.0634896, 0.808852, 0.017953, 0.245884, 0.458672, 0.293099, 0.285162, 0.937617, 0.400874, 0.442087, 0.105065, 0.665571, 0.592421, 0.878059, 0.905757, 0.0893921, 0.141681, 0.846809, 0.780118, 0.666694},
{0.863186, 0.801813, 0.910413, 0.803921, 0.255837, 0.835771, 0.548649, 0.423428, 0.643117, 0.283981, 0.883171, 0.0310467, 0.105378, 0.700373, 0.758648, 0.449602, 0.48154, 0.728639, 0.0325244, 0.135509, 0.173014, 0.146403, 0.428509, 0.796051, 0.547476, 0.0561954, 0.476453, 0.433303, 0.860636, 0.0883214, 0.130236, 0.337017, 0.384473, 0.151722, 0.0545705, 0.356821, 0.355988, 0.723088, 0.670957, 0.778185, 0.893525, 0.653959, 0.159289, 0.901989, 0.356181, 0.168043, 0.471985, 0.780254, 0.974079, 0.825611},
{0.927741, 0.676016, 0.365287, 0.93002, 0.225424, 0.0754214, 0.355822, 0.34507, 0.983645, 0.433314, 0.825837, 0.791535, 0.673044, 0.100111, 0.295147, 0.042102, 0.969965, 0.890108, 0.297341, 0.980049, 0.559606, 0.657841, 0.266178, 0.279837, 0.314078, 0.334366, 0.695756, 0.105529, 0.428697, 0.606602, 0.364615, 0.577634, 0.930055, 0.224292, 0.842176, 0.661805, 0.624986, 0.627956, 0.940128, 0.446674, 0.783415, 0.38141, 0.264971, 0.961561, 0.863058, 0.0387354, 0.0243673, 0.281191, 0.813503, 0.658293},
{0.554743, 0.680544, 0.821804, 0.0451007, 0.337326, 0.772088, 0.981116, 0.391897, 0.721641, 0.166101, 0.40474, 0.939078, 0.797164, 0.635977, 0.539124, 0.502994, 0.467386, 0.693943, 0.194523, 0.676872, 0.476306, 0.882708, 0.297552, 0.621187, 0.182102, 0.621296, 0.443895, 0.0345924, 0.585511, 0.499742, 0.28357, 0.901772, 0.907869, 0.0448873, 0.412404, 0.560554, 0.677522, 0.995105, 0.887699, 0.00521336, 0.970059, 0.397895, 0.240013, 0.00987045, 0.395982, 0.131004, 0.700741, 0.747765, 0.234384, 0.4024},
{0.173097, 0.468567, 0.206427, 0.550541, 0.999189, 0.763084, 0.448675, 0.894395, 0.157433, 0.704965, 0.988267, 0.379199, 0.618493, 0.723149, 0.401194, 0.914393, 0.091959, 0.457556, 0.251363, 0.354666, 0.350288, 0.110685, 0.191835, 0.516145, 0.277228, 0.138988, 0.699495, 0.605096, 0.893029, 0.752397, 0.0623137, 0.814558, 0.00511408, 0.730222, 0.257018, 0.138143, 0.992815, 0.848977, 0.137275, 0.382553, 0.0147144, 0.250735, 0.973968, 0.507855, 0.835785, 0.78159, 0.357183, 0.22905, 0.29949, 0.811461},
};

static const std::vector<float> costs = {214.975, 312.104, 494.398, 600.418, 187.997, 179.269, 361.042, 445.71, 116.612, 962.468, 927.209, 15.6209, 856.121, 590.391, 751.116, 274.552, 88.6136, 267.195, 222.638, 483.623, 786.533, 57.7739, 514.926, 585.607, 921.157, 687.349, 979.449, 682.117, 918.444, 544.651, 727.648, 490.395, 876.661, 353.909, 867.821, 765.915, 264.738, 285.029, 902.935, 248.975, 706.6, 752.013, 231.01, 210.914, 744.488, 432.934, 442.401, 525.228, 551.731, 844.504};

static const std::vector<float> min_impressions = {0.434575, 0.709113, 0.266848, 0.514237, 0.465119};

//
#endif
