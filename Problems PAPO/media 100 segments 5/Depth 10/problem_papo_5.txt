#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 100;
static const int segments = 5;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49), cons_event(50), cons_event(51), cons_event(52), cons_event(53), cons_event(54), cons_event(55), cons_event(56), cons_event(57), cons_event(58), cons_event(59), cons_event(60), cons_event(61), cons_event(62), cons_event(63), cons_event(64), cons_event(65), cons_event(66), cons_event(67), cons_event(68), cons_event(69), cons_event(70), cons_event(71), cons_event(72), cons_event(73), cons_event(74), cons_event(75), cons_event(76), cons_event(77), cons_event(78), cons_event(79), cons_event(80), cons_event(81), cons_event(82), cons_event(83), cons_event(84), cons_event(85), cons_event(86), cons_event(87), cons_event(88), cons_event(89), cons_event(90), cons_event(91), cons_event(92), cons_event(93), cons_event(94), cons_event(95), cons_event(96), cons_event(97), cons_event(98), cons_event(99)};

static const std::vector<Syntax_Tree> restrictions = {cons_excl(cons_incl(cons_indep(cons_incl(cons_indep(cons_incl(cons_indep(cons_incl(cons_incl(cons_incl(events[21], events[82]),events[37]),events[18]),events[95]),events[88]),events[55]),events[56]),events[31]),events[10]),events[53]),cons_incl(cons_indep(cons_indep(cons_excl(cons_indep(cons_incl(cons_indep(cons_indep(cons_excl(cons_incl(events[83], events[90]),events[27]),events[81]),events[80]),events[77]),events[11]),events[35]),events[14]),events[64]),events[72]),cons_indep(cons_incl(cons_incl(cons_indep(cons_indep(cons_incl(cons_indep(cons_indep(cons_incl(cons_incl(events[33], events[30]),events[50]),events[28]),events[56]),events[4]),events[72]),events[97]),events[17]),events[98]),events[81]),cons_excl(cons_incl(cons_excl(cons_excl(cons_indep(cons_indep(cons_incl(cons_excl(cons_indep(cons_incl(events[71], events[80]),events[3]),events[29]),events[10]),events[74]),events[68]),events[28]),events[2]),events[86]),events[34]),cons_excl(cons_excl(cons_incl(cons_indep(cons_incl(cons_excl(cons_excl(cons_indep(cons_incl(cons_incl(events[17], events[1]),events[74]),events[37]),events[12]),events[15]),events[69]),events[54]),events[66]),events[77]),events[71])};


static const std::vector< std::vector<float> > prob = {{0.301215, 0.499465, 0.549792, 0.781769, 0.465607, 0.681778, 0.10972, 0.615903, 0.809597, 0.065764, 0.775285, 0.283982, 0.191514, 0.0978358, 0.382392, 0.284664, 0.482864, 0.0245941, 0.0691403, 0.138853, 0.641704, 0.823868, 0.906371, 0.633781, 0.376464, 0.274808, 0.106379, 0.58911, 0.436148, 0.211457, 0.428704, 0.4346, 0.586534, 0.696545, 0.0709538, 0.160621, 0.352177, 0.60655, 0.620298, 0.531249, 0.892749, 0.976618, 0.68767, 0.914404, 0.983312, 0.727348, 0.87915, 0.328093, 0.0915038, 0.576212, 0.147578, 0.855575, 0.250572, 0.159267, 0.0659119, 0.358372, 0.524954, 0.264142, 0.59558, 0.163361, 0.200227, 0.0675065, 0.125765, 0.142823, 0.843443, 0.0667129, 0.923908, 0.42822, 0.0316606, 0.736534, 0.0959036, 0.457766, 0.0709088, 0.282197, 0.255796, 0.324201, 0.367637, 0.267297, 0.311623, 0.899593, 0.977697, 0.411531, 0.466386, 0.702881, 0.692392, 0.975845, 0.386986, 0.917463, 0.954877, 0.150106, 0.527195, 0.666636, 0.230903, 0.665134, 0.985813, 0.790709, 0.646884, 0.0778187, 0.538547, 0.985846},
{0.939435, 0.14023, 0.239734, 0.646315, 0.0728845, 0.138327, 0.0643177, 0.20574, 0.00820413, 0.730854, 0.699677, 0.262561, 0.856794, 0.897786, 0.574738, 0.33352, 0.351392, 0.364898, 0.315651, 0.0946357, 0.0664547, 0.470855, 0.105328, 0.478232, 0.566902, 0.453534, 0.297684, 0.287583, 0.118314, 0.24176, 0.123406, 0.332812, 0.879617, 0.729909, 0.303122, 0.326653, 0.939771, 0.0547513, 0.921335, 0.793066, 0.067845, 0.236934, 0.13155, 0.379079, 0.100731, 0.549123, 0.000658425, 0.183823, 0.359654, 0.433946, 0.53776, 0.376478, 0.453389, 0.18547, 0.551543, 0.0910376, 0.225661, 0.4419, 0.79356, 0.34197, 0.323132, 0.568881, 0.0467954, 0.0805257, 0.308518, 0.0849822, 0.946111, 0.640711, 0.294557, 0.901072, 0.0501445, 0.968331, 0.973721, 0.0379027, 0.00213281, 0.937821, 0.0743106, 0.290531, 0.886892, 0.456378, 0.412345, 0.848379, 0.893379, 0.566854, 0.98143, 0.185748, 0.933236, 0.649236, 0.779226, 0.825057, 0.0414477, 0.544259, 0.719107, 0.460644, 0.216393, 0.820724, 0.622623, 0.598678, 0.932479, 0.599298},
{0.566511, 0.18597, 0.576384, 0.972919, 0.951717, 0.0337425, 0.232323, 0.44466, 0.443398, 0.863878, 0.876322, 0.41995, 0.733872, 0.0878042, 0.579564, 0.783751, 0.934622, 0.41667, 0.752276, 0.294139, 0.470368, 0.768805, 0.371272, 0.18917, 0.921777, 0.892407, 0.762176, 0.723287, 0.415211, 0.269564, 0.212122, 0.699426, 0.556779, 0.675139, 0.661638, 0.534237, 0.695821, 0.712424, 0.603727, 0.661284, 0.455591, 0.945271, 0.919296, 0.442167, 0.430264, 0.00719635, 0.473109, 0.0257629, 0.504388, 0.143885, 0.956015, 0.0480481, 0.171346, 0.131934, 0.295614, 0.354138, 0.191474, 0.948004, 0.279848, 0.377053, 0.796624, 0.560256, 0.409556, 0.708623, 0.223847, 0.954075, 0.50819, 0.695871, 0.816854, 0.712564, 0.319419, 0.063879, 0.946929, 0.867126, 0.635581, 0.213223, 0.987523, 0.154609, 0.0215762, 0.948356, 0.393485, 0.920785, 0.784515, 0.986996, 0.329737, 0.543596, 0.139501, 0.448058, 0.94323, 0.746973, 0.150192, 0.212079, 0.073677, 0.644797, 0.739058, 0.929197, 0.260867, 0.723112, 0.929465, 0.157861},
{0.364981, 0.206033, 0.927975, 0.397239, 0.607938, 0.361377, 0.466547, 0.175664, 0.370067, 0.795451, 0.797197, 0.0703897, 0.398968, 0.39568, 0.191891, 0.396279, 0.685497, 0.728307, 0.0148119, 0.839163, 0.960929, 0.811279, 0.238371, 0.161597, 0.538098, 0.241059, 0.0377647, 0.928541, 0.114988, 0.0148075, 0.399293, 0.364917, 0.839559, 0.252814, 0.771319, 0.398688, 0.393213, 0.0581572, 0.152614, 0.882405, 0.377835, 0.751449, 0.202798, 0.842135, 0.885063, 0.261083, 0.43759, 0.611708, 0.751037, 0.203134, 0.576408, 0.295984, 0.731537, 0.974144, 0.900672, 0.157186, 0.309813, 0.872308, 0.624753, 0.294161, 0.172891, 0.333135, 0.548689, 0.057804, 0.70101, 0.538961, 0.945632, 0.60586, 0.441757, 0.131645, 0.952711, 0.588973, 0.223142, 0.71795, 0.321371, 0.257579, 0.717912, 0.762255, 0.40767, 0.916932, 0.307075, 0.961009, 0.262166, 0.947682, 0.0692457, 0.765712, 0.511589, 0.594105, 0.461821, 0.828575, 0.0216408, 0.0480431, 0.916844, 0.331647, 0.776628, 0.800028, 0.804278, 0.917083, 0.162966, 0.385881},
{0.916148, 0.859114, 0.567381, 0.00627195, 0.0978593, 0.903779, 0.608199, 0.736974, 0.281751, 0.414781, 0.954833, 0.0802969, 0.632595, 0.0900936, 0.771449, 0.575094, 0.524364, 0.868449, 0.617316, 0.505233, 0.27329, 0.560692, 0.0945383, 0.781981, 0.0149066, 0.914859, 0.422451, 0.438157, 0.511803, 0.262462, 0.0930344, 0.851343, 0.0720012, 0.273437, 0.0403666, 0.0270157, 0.244568, 0.443471, 0.402979, 0.884753, 0.761639, 0.453704, 0.486904, 0.839632, 0.565848, 0.693251, 0.216264, 0.882254, 0.954169, 0.435094, 0.411507, 0.950845, 0.941978, 0.918782, 0.368459, 0.848397, 0.931419, 0.575345, 0.962809, 0.223587, 0.634864, 0.926074, 0.242855, 0.206482, 0.657406, 0.158932, 0.252405, 0.159777, 0.389795, 0.203079, 0.0839187, 0.668201, 0.255573, 0.648802, 0.94149, 0.0983824, 0.13326, 0.0399493, 0.376252, 0.656002, 0.363097, 0.80329, 0.959673, 0.436514, 0.92885, 0.0894801, 0.119209, 0.192486, 0.606348, 0.287079, 0.60647, 0.00333914, 0.0580743, 0.162915, 0.363243, 0.607644, 0.503745, 0.26139, 0.451899, 0.628544},
};

static const std::vector<float> costs = {873.012, 506.809, 756.751, 592.617, 684.671, 350.598, 524.998, 241.127, 587.395, 514.695, 40.773, 411.892, 141.867, 295.209, 933.431, 705.589, 958.845, 536.295, 741.339, 465.023, 231.317, 602.727, 220.667, 569.208, 738.896, 722.705, 67.4461, 652.448, 63.0583, 616.195, 352.987, 567.183, 364.925, 465.046, 502.782, 413.719, 764.388, 451.105, 746.169, 101.794, 463.549, 967.31, 192.155, 295.926, 38.2815, 385.9, 201.075, 300.088, 383.581, 880.416, 213.796, 233.226, 909.715, 658.958, 761.483, 244.944, 28.9947, 775.528, 46.6771, 395.375, 85.5289, 462.912, 451.858, 694.169, 514.456, 382.65, 286.755, 252.511, 827.22, 202.172, 948.94, 893.24, 402.752, 508.426, 974.796, 562.987, 828.233, 777.511, 538.934, 695.943, 444.008, 140.155, 342.018, 993.338, 531.099, 922.914, 888.22, 302.606, 568.897, 579.119, 180.744, 536.155, 107.973, 639.921, 207.197, 540.168, 759.008, 511.603, 8.85234, 842.23};

static const std::vector<float> min_impressions = {0.663592, 0.94974, 0.978091, 0.244567, 0.741739};

//
#endif
