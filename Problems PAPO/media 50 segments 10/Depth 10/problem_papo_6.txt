#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 10;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_excl(cons_excl(cons_incl(cons_excl(cons_incl(cons_indep(cons_incl(cons_indep(cons_indep(cons_excl(events[30], events[36]),events[48]),events[9]),events[10]),events[37]),events[8]),events[27]),events[38]),events[21]),events[15]),cons_indep(cons_indep(cons_incl(cons_incl(cons_indep(cons_excl(cons_indep(cons_incl(cons_excl(cons_indep(events[38], events[21]),events[41]),events[3]),events[15]),events[1]),events[17]),events[14]),events[33]),events[27]),events[7]),cons_indep(cons_excl(cons_excl(cons_indep(cons_indep(cons_excl(cons_indep(cons_incl(cons_excl(cons_excl(events[6], events[17]),events[32]),events[19]),events[47]),events[8]),events[24]),events[18]),events[39]),events[26]),events[9]),cons_incl(cons_excl(cons_indep(cons_incl(cons_indep(cons_excl(cons_incl(cons_excl(cons_excl(cons_indep(events[31], events[20]),events[4]),events[9]),events[18]),events[45]),events[41]),events[33]),events[6]),events[5]),events[42]),cons_incl(cons_incl(cons_excl(cons_excl(cons_indep(cons_excl(cons_incl(cons_indep(cons_excl(cons_incl(events[49], events[4]),events[41]),events[39]),events[1]),events[8]),events[25]),events[44]),events[24]),events[35]),events[20]),cons_excl(cons_excl(cons_excl(cons_excl(cons_incl(cons_incl(cons_excl(cons_incl(cons_indep(cons_excl(events[28], events[24]),events[5]),events[43]),events[38]),events[8]),events[27]),events[39]),events[4]),events[47]),events[21]),cons_incl(cons_incl(cons_excl(cons_excl(cons_indep(cons_indep(cons_indep(cons_incl(cons_incl(cons_incl(events[7], events[8]),events[20]),events[21]),events[9]),events[38]),events[35]),events[2]),events[26]),events[5]),events[24]),cons_indep(cons_indep(cons_incl(cons_incl(cons_incl(cons_incl(cons_indep(cons_indep(cons_incl(cons_incl(events[30], events[33]),events[13]),events[14]),events[35]),events[5]),events[21]),events[3]),events[12]),events[23]),events[48]),cons_incl(cons_indep(cons_incl(cons_indep(cons_incl(cons_indep(cons_excl(cons_excl(cons_incl(cons_indep(events[35], events[13]),events[29]),events[8]),events[4]),events[10]),events[37]),events[40]),events[14]),events[11]),events[12]),cons_indep(cons_indep(cons_excl(cons_indep(cons_excl(cons_excl(cons_incl(cons_indep(cons_indep(cons_incl(events[5], events[41]),events[31]),events[44]),events[15]),events[37]),events[11]),events[22]),events[48]),events[33]),events[40])};


static const std::vector< std::vector<float> > prob = {{0.95658, 0.67986, 0.281389, 0.503814, 0.614393, 0.0825451, 0.858936, 0.567361, 0.817113, 0.462365, 0.384805, 0.085746, 0.859803, 0.957521, 0.209509, 0.4404, 0.581966, 0.573869, 0.617801, 0.761124, 0.93234, 0.91089, 0.225301, 0.651312, 0.897582, 0.899394, 0.042392, 0.526147, 0.717548, 0.739181, 0.822976, 0.909763, 0.0229244, 0.265264, 0.751525, 0.953431, 0.750064, 0.958916, 0.729515, 0.93419, 0.987774, 0.368363, 0.357787, 0.823041, 0.36226, 0.418552, 0.368697, 0.900455, 0.185224, 0.885319},
{0.747912, 0.378961, 0.823513, 0.735781, 0.0904686, 0.340802, 0.387279, 0.691251, 0.341918, 0.829199, 0.251047, 0.365052, 0.624799, 0.953442, 0.910261, 0.170666, 0.316956, 0.0124971, 0.368146, 0.0415222, 0.739518, 0.239708, 0.0427832, 0.513797, 0.272849, 0.626105, 0.300868, 0.284349, 0.83053, 0.16789, 0.780635, 0.700014, 0.0612138, 0.0679868, 0.797597, 0.170558, 0.858623, 0.0533557, 0.262807, 0.971462, 0.351773, 0.13167, 0.646069, 0.0512679, 0.611728, 0.434104, 0.348649, 0.358532, 0.631265, 0.0900904},
{0.625806, 0.0612378, 0.745983, 0.364113, 0.558241, 0.436965, 0.516749, 0.631359, 0.857966, 0.716359, 0.960199, 0.103891, 0.770653, 0.779196, 0.798193, 0.178124, 0.383453, 0.300723, 0.702726, 0.532522, 0.0809895, 0.120628, 0.973758, 0.92519, 0.959196, 0.157569, 0.406596, 0.186147, 0.395538, 0.962421, 0.345602, 0.283126, 0.209421, 0.780882, 0.636508, 0.222463, 0.188323, 0.839072, 0.502866, 0.33097, 0.188838, 0.000376139, 0.129735, 0.415928, 0.00338093, 0.751985, 0.978022, 0.332534, 0.323404, 0.529812},
{0.365416, 0.348778, 0.634082, 0.0187262, 0.974773, 0.103247, 0.968292, 0.679961, 0.00582426, 0.778157, 0.0757224, 0.26791, 0.949521, 0.537351, 0.241851, 0.0333742, 0.562758, 0.827689, 0.511253, 0.208571, 0.973039, 0.206592, 0.632211, 0.362365, 0.521333, 0.245775, 0.161782, 0.109405, 0.130015, 0.235567, 0.0955726, 0.894659, 0.760179, 0.975826, 0.542704, 0.534451, 0.446147, 0.214171, 0.463016, 0.788874, 0.971322, 0.565036, 0.905431, 0.117756, 0.280476, 0.211881, 0.322261, 0.420534, 0.630495, 0.661701},
{0.663976, 0.397057, 0.0534877, 0.877069, 0.196165, 0.175127, 0.562893, 0.673202, 0.880017, 0.229535, 0.740473, 0.0569987, 0.555435, 0.231879, 0.99332, 0.215155, 0.593323, 0.691986, 0.434992, 0.954935, 0.777128, 0.045646, 0.260367, 0.173781, 0.361157, 0.970416, 0.31977, 0.815734, 0.635024, 0.779084, 0.255762, 0.129604, 0.609762, 0.969947, 0.80162, 0.56107, 0.445035, 0.330248, 0.0304642, 0.695754, 0.0607905, 0.364361, 0.203158, 0.373513, 0.858737, 0.894531, 0.91429, 0.57947, 0.748864, 0.668916},
{0.693286, 0.652834, 0.0430498, 0.625192, 0.161687, 0.896404, 0.25937, 0.921815, 0.772229, 0.195599, 0.0534649, 0.141948, 0.548039, 0.401129, 0.270048, 0.471737, 0.77637, 0.681716, 0.159238, 0.199032, 0.735424, 0.143218, 0.820169, 0.0292247, 0.759973, 0.967065, 0.791125, 0.580342, 0.603159, 0.254147, 0.155532, 0.0930851, 0.621961, 0.500946, 0.523675, 0.454547, 0.386769, 0.0268183, 0.47434, 0.22742, 0.408022, 0.906459, 0.466516, 0.279675, 0.457118, 0.696376, 0.0510115, 0.997256, 0.459283, 0.615701},
{0.674282, 0.312528, 0.783349, 0.843973, 0.165686, 0.302032, 0.778626, 0.81933, 0.230012, 0.114467, 0.573118, 0.222743, 0.460116, 0.583547, 0.330825, 0.623852, 0.905235, 0.940169, 0.431931, 0.361614, 0.541637, 0.0528703, 0.274703, 0.746384, 0.573144, 0.775723, 0.108891, 0.634773, 0.330185, 0.107045, 0.00291436, 0.489752, 0.425597, 0.554921, 0.212433, 0.570751, 0.270795, 0.118445, 0.487194, 0.850555, 0.862922, 0.301723, 0.34789, 0.803287, 0.515126, 0.177755, 0.0184938, 0.408951, 0.343481, 0.836082},
{0.179184, 0.492873, 0.0845216, 0.688885, 0.939866, 0.497809, 0.0501211, 0.171571, 0.91618, 0.0365251, 0.792507, 0.439472, 0.162089, 0.432052, 0.530846, 0.686083, 0.270366, 0.936943, 0.869495, 0.107786, 0.818559, 0.729494, 0.963103, 0.181924, 0.705097, 0.534609, 0.469005, 0.661715, 0.58199, 0.72377, 0.360044, 0.0988794, 0.345798, 0.0521739, 0.927832, 0.924893, 0.0963876, 0.244565, 0.706467, 0.533105, 0.601907, 0.744491, 0.0486346, 0.216701, 0.398405, 0.196508, 0.118533, 0.166538, 0.453938, 0.280303},
{0.0986817, 0.0193638, 0.193753, 0.501544, 0.221375, 0.9256, 0.0251457, 0.416074, 0.660897, 0.894346, 0.531726, 0.580132, 0.944509, 0.00115892, 0.125113, 0.817671, 0.226909, 0.1205, 0.917639, 0.0528146, 0.536255, 0.689068, 0.492267, 0.0417139, 0.0176659, 0.245216, 0.827862, 0.196461, 0.519058, 0.432987, 0.501125, 0.976051, 0.803312, 0.593985, 0.386988, 0.907407, 0.391362, 0.198141, 0.629124, 0.378482, 0.453653, 0.0896273, 0.0128934, 0.960094, 0.135192, 0.227385, 0.517103, 0.397486, 0.517749, 0.963594},
{0.220467, 0.550274, 0.308917, 0.438467, 0.113982, 0.269723, 0.0160487, 0.533653, 0.361159, 0.713638, 0.987895, 0.17873, 0.322701, 0.774297, 0.508106, 0.912827, 0.591292, 0.587471, 0.434447, 0.688281, 0.0224439, 0.440733, 0.973194, 0.714714, 0.525535, 0.134473, 0.191811, 0.109236, 0.650146, 0.75917, 0.964931, 0.0471619, 0.663528, 0.123893, 0.228083, 0.239429, 0.768866, 0.335281, 0.190031, 0.773712, 0.489526, 0.013106, 0.661717, 0.348548, 0.802563, 0.787178, 0.969038, 0.0420794, 0.80793, 0.982593},
};

static const std::vector<float> costs = {220.246, 586.239, 845.802, 611.978, 71.1075, 870.288, 923.047, 696.734, 802.382, 812.516, 624.959, 668.048, 598.968, 763.295, 807.229, 535.47, 711.754, 483.779, 420.198, 779.38, 954.026, 97.6043, 611.958, 633.025, 766.648, 740.879, 454.396, 166.642, 119.432, 965.519, 676.296, 866.926, 272.234, 770.143, 583.899, 710.029, 279.704, 407.116, 493.387, 213.064, 133.835, 217.659, 215.656, 979.181, 594.388, 234.979, 281.41, 161.377, 310.555, 105.902};

static const std::vector<float> min_impressions = {0.56978, 0.66376, 0.757287, 0.599758, 0.521403, 0.431906, 0.321092, 0.471885, 0.871846, 0.402618};

//
#endif
