#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 20;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_indep(cons_indep(cons_indep(cons_incl(cons_indep(events[25], events[43]),events[31]),events[29]),events[11]),events[15]),cons_incl(cons_incl(cons_indep(cons_indep(cons_incl(events[37], events[47]),events[42]),events[24]),events[36]),events[0]),cons_indep(cons_incl(cons_indep(cons_excl(cons_excl(events[41], events[47]),events[39]),events[5]),events[37]),events[11]),cons_incl(cons_indep(cons_excl(cons_incl(cons_excl(events[28], events[18]),events[49]),events[9]),events[46]),events[43]),cons_incl(cons_excl(cons_indep(cons_excl(cons_incl(events[26], events[14]),events[11]),events[9]),events[1]),events[47]),cons_indep(cons_incl(cons_indep(cons_excl(cons_indep(events[8], events[36]),events[33]),events[47]),events[18]),events[10]),cons_incl(cons_indep(cons_incl(cons_excl(cons_excl(events[17], events[21]),events[27]),events[16]),events[10]),events[38]),cons_excl(cons_excl(cons_indep(cons_excl(cons_excl(events[4], events[43]),events[34]),events[12]),events[17]),events[47]),cons_indep(cons_incl(cons_indep(cons_indep(cons_indep(events[23], events[7]),events[10]),events[42]),events[46]),events[35]),cons_indep(cons_incl(cons_excl(cons_incl(cons_incl(events[48], events[45]),events[17]),events[11]),events[2]),events[33]),cons_excl(cons_excl(cons_indep(cons_indep(cons_excl(events[32], events[9]),events[39]),events[38]),events[33]),events[2]),cons_indep(cons_incl(cons_incl(cons_excl(cons_incl(events[26], events[20]),events[10]),events[43]),events[2]),events[15]),cons_indep(cons_indep(cons_incl(cons_excl(cons_incl(events[27], events[16]),events[25]),events[0]),events[35]),events[10]),cons_indep(cons_incl(cons_incl(cons_excl(cons_indep(events[36], events[4]),events[21]),events[31]),events[14]),events[49]),cons_incl(cons_incl(cons_excl(cons_excl(cons_indep(events[9], events[15]),events[42]),events[0]),events[19]),events[16]),cons_indep(cons_incl(cons_excl(cons_indep(cons_incl(events[1], events[15]),events[10]),events[6]),events[27]),events[18]),cons_excl(cons_excl(cons_excl(cons_excl(cons_excl(events[47], events[41]),events[11]),events[4]),events[22]),events[20]),cons_indep(cons_incl(cons_indep(cons_excl(cons_indep(events[41], events[3]),events[23]),events[38]),events[7]),events[9]),cons_excl(cons_excl(cons_indep(cons_excl(cons_excl(events[45], events[18]),events[17]),events[41]),events[27]),events[4]),cons_indep(cons_incl(cons_excl(cons_excl(cons_excl(events[20], events[14]),events[3]),events[7]),events[41]),events[28])};


static const std::vector< std::vector<float> > prob = {{0.867879, 0.100289, 0.59074, 0.559414, 0.978657, 0.0380611, 0.0795447, 0.0232266, 0.103804, 0.0687427, 0.0811826, 0.576699, 0.307568, 0.447172, 0.174491, 0.687902, 0.398441, 0.0810243, 0.419029, 0.0230136, 0.919486, 0.613766, 0.823554, 0.776483, 0.793531, 0.713963, 0.834385, 0.27239, 0.135333, 0.564373, 0.489061, 0.307374, 0.86127, 0.230785, 0.47534, 0.715263, 0.310249, 0.86318, 0.873121, 0.540401, 0.730085, 0.847295, 0.03623, 0.768994, 0.195221, 0.750187, 0.76619, 0.00326416, 0.504945, 0.691692},
{0.613815, 0.177268, 0.783207, 0.607871, 0.216707, 0.786025, 0.742537, 0.897118, 0.00389822, 0.234273, 0.977236, 0.782576, 0.47253, 0.795023, 0.673662, 0.324256, 0.347095, 0.0703468, 0.401611, 0.796385, 0.261996, 0.198474, 0.49658, 0.587455, 0.181659, 0.379216, 0.477058, 0.288446, 0.919066, 0.391875, 0.712455, 0.6181, 0.164671, 0.735888, 0.30868, 0.539945, 0.870838, 0.457353, 0.38646, 0.0754202, 0.776703, 0.421341, 0.692784, 0.944635, 0.594952, 0.229123, 0.437756, 0.245436, 0.562252, 0.899916},
{0.172992, 0.407782, 0.686088, 0.31227, 0.0825814, 0.605877, 0.756689, 0.359894, 0.165937, 0.80554, 0.687177, 0.648564, 0.800876, 0.182187, 0.818219, 0.464134, 0.211584, 0.118643, 0.954711, 0.269623, 0.187175, 0.760748, 0.777478, 0.269262, 0.64251, 0.956069, 0.671934, 0.472079, 0.489962, 0.431338, 0.86927, 0.870569, 0.452718, 0.230057, 0.54547, 0.718687, 0.66881, 0.817717, 0.223401, 0.900804, 0.22601, 0.831474, 0.224274, 0.322602, 0.519282, 0.604279, 0.854113, 0.985028, 0.540276, 0.187658},
{0.576675, 0.72844, 0.408881, 0.65435, 0.68481, 0.135581, 0.218828, 0.0933608, 0.221286, 0.661918, 0.853327, 0.30134, 0.929324, 0.0834772, 0.665261, 0.114973, 0.8055, 0.99005, 0.577092, 0.292208, 0.547168, 0.469373, 0.920965, 0.611774, 0.495325, 0.202408, 0.994556, 0.918351, 0.566834, 0.672139, 0.392091, 0.630411, 0.191262, 0.658688, 0.26079, 0.647488, 0.140616, 0.775365, 0.492864, 0.666125, 0.0303034, 0.166252, 0.809075, 0.87496, 0.139339, 0.0906368, 0.606143, 0.339786, 0.630148, 0.0992469},
{0.47958, 0.746625, 0.814359, 0.0366368, 0.520902, 0.700017, 0.141066, 0.327676, 0.574508, 0.221516, 0.574279, 0.900682, 0.33573, 0.132928, 0.335716, 0.590794, 0.321625, 0.0626488, 0.690376, 0.439957, 0.0575388, 0.148411, 0.546284, 0.738388, 0.950738, 0.422672, 0.65325, 0.545261, 0.117739, 0.243668, 0.795965, 0.282873, 0.370064, 0.563861, 0.330089, 0.0543664, 0.640664, 0.209096, 0.837575, 0.709446, 0.852365, 0.423082, 0.664532, 0.899598, 0.161804, 0.374756, 0.802312, 0.791361, 0.522667, 0.0781782},
{0.406043, 0.0598834, 0.237295, 0.369347, 0.424715, 0.914017, 0.309532, 0.739163, 0.667017, 0.948928, 0.680634, 0.797022, 0.197115, 0.689249, 0.946482, 0.578627, 0.929374, 0.718681, 0.957298, 0.317911, 0.488817, 0.201339, 0.944218, 0.258962, 0.0291055, 0.647049, 0.713307, 0.467026, 0.840808, 0.163783, 0.836917, 0.358451, 0.235051, 0.0104712, 0.325435, 0.345867, 0.0754356, 0.267583, 0.0242598, 0.55558, 0.0693671, 0.771515, 0.629059, 0.674117, 0.518709, 0.868335, 0.314017, 0.724926, 0.271685, 0.798078},
{0.349652, 0.98384, 0.727257, 0.730198, 0.782247, 0.332572, 0.257646, 0.307016, 0.990718, 0.387766, 0.571016, 0.980777, 0.0711043, 0.336322, 0.180909, 0.703613, 0.763389, 0.483537, 0.514824, 0.0193958, 0.297324, 0.91646, 0.960233, 0.555492, 0.66317, 0.251179, 0.0570016, 0.752606, 0.0115693, 0.968249, 0.987664, 0.418688, 0.920718, 0.467866, 0.322766, 0.197322, 0.6354, 0.90483, 0.514255, 0.867108, 0.705728, 0.330986, 0.817098, 0.35066, 0.0073233, 0.70576, 0.461923, 0.135369, 0.592764, 0.240471},
{0.714602, 0.971169, 0.483274, 0.0381134, 0.34527, 0.37702, 0.753344, 0.277428, 0.163957, 0.991224, 0.220754, 0.059893, 0.328045, 0.0216577, 0.122262, 0.767665, 0.637761, 0.490697, 0.0904533, 0.268612, 0.609576, 0.45963, 0.025045, 0.432211, 0.197142, 0.707605, 0.759968, 0.862247, 0.356218, 0.312186, 0.288755, 0.953416, 0.862598, 0.610727, 0.584491, 0.113597, 0.984882, 0.193642, 0.847694, 0.16546, 0.280896, 0.331418, 0.0757283, 0.78336, 0.988592, 0.970271, 0.0429733, 0.133785, 0.0969109, 0.250841},
{0.676135, 0.867784, 0.283744, 0.426691, 0.766416, 0.432993, 0.807705, 0.0740279, 0.439507, 0.562226, 0.657801, 0.317341, 0.47948, 0.130457, 0.773847, 0.885307, 0.380871, 0.609467, 0.149921, 0.702633, 0.187136, 0.554406, 0.470903, 0.08733, 0.434295, 0.68873, 0.544168, 0.923083, 0.847707, 0.823227, 0.450192, 0.195061, 0.432535, 0.765355, 0.529584, 0.574599, 0.836798, 0.250369, 0.905069, 0.634187, 0.696875, 0.323634, 0.844346, 0.369274, 0.126909, 0.0668273, 0.882126, 0.693672, 0.552429, 0.230169},
{0.864454, 0.235828, 0.0612216, 0.703542, 0.833909, 0.8644, 0.71867, 0.760443, 0.651143, 0.584264, 0.174067, 0.638534, 0.640588, 0.247612, 0.854417, 0.0979355, 0.147326, 0.408951, 0.0389697, 0.35549, 0.146894, 0.640331, 0.518262, 0.556485, 0.0338241, 0.186052, 0.989909, 0.699652, 0.217271, 0.133931, 0.27188, 0.55126, 0.262797, 0.657483, 0.0713818, 0.549697, 0.420339, 0.480918, 0.531408, 0.435975, 0.896767, 0.274871, 0.94912, 0.858992, 0.89192, 0.0583713, 0.314251, 0.93324, 0.571509, 0.7531},
{0.443024, 0.653257, 0.258039, 0.769986, 0.293681, 0.418239, 0.0129466, 0.822551, 0.648809, 0.804879, 0.703997, 0.576801, 0.814707, 0.369933, 0.904124, 0.491282, 0.981764, 0.222739, 0.573156, 0.380203, 0.111184, 0.128429, 0.867917, 0.906133, 0.220538, 0.604522, 0.773907, 0.137381, 0.633125, 0.266174, 0.255888, 0.870124, 0.676456, 0.754272, 0.800041, 0.135712, 0.752373, 0.226808, 0.023646, 0.628254, 0.781185, 0.730115, 0.165687, 0.490009, 0.807755, 0.24109, 0.148482, 0.119469, 0.0934118, 0.951385},
{0.0503187, 0.466759, 0.722475, 0.233799, 0.517026, 0.697574, 0.213519, 0.662715, 0.170503, 0.231901, 0.269749, 0.602128, 0.904556, 0.104807, 0.654162, 0.826798, 0.854082, 0.519212, 0.084281, 0.0162042, 0.412993, 0.130174, 0.931417, 0.296681, 0.921807, 0.779272, 0.319046, 0.179858, 0.93022, 0.289989, 0.885512, 0.0504109, 0.0384385, 0.523571, 0.6702, 0.15958, 0.110202, 0.901115, 0.22149, 0.838956, 0.0377091, 0.230411, 0.841596, 0.430803, 0.247651, 0.613692, 0.620574, 0.979904, 0.792265, 0.374602},
{0.944082, 0.116944, 0.843728, 0.152367, 0.508877, 0.812733, 0.0787029, 0.871027, 0.108323, 0.822551, 0.525602, 0.45741, 0.148871, 0.0604352, 0.0282466, 0.840456, 0.834848, 0.347101, 0.70287, 0.372385, 0.158295, 0.000946504, 0.874316, 0.106073, 0.124742, 0.155679, 0.535873, 0.435689, 0.875412, 0.247084, 0.744057, 0.170476, 0.335559, 0.0513995, 0.00666598, 0.908658, 0.0909963, 0.258904, 0.672362, 0.438922, 0.0766823, 0.15551, 0.540378, 0.000756561, 0.859465, 0.619436, 0.218636, 0.190278, 0.731393, 0.838252},
{0.443837, 0.0865884, 0.453885, 0.121856, 0.841747, 0.482074, 0.764241, 0.153918, 0.904254, 0.218313, 0.553591, 0.425874, 0.101771, 0.893099, 0.744268, 0.526315, 0.188291, 0.612005, 0.844788, 0.759202, 0.0740505, 0.207905, 0.508351, 0.446603, 0.948768, 0.965298, 0.542037, 0.0826295, 0.167348, 0.428987, 0.680427, 0.369792, 0.688989, 0.36761, 0.829332, 0.905406, 0.456322, 0.331561, 0.114267, 0.671581, 0.683151, 0.606066, 0.381374, 0.383067, 0.565714, 0.693831, 0.589243, 0.476434, 0.687988, 0.268981},
{0.231924, 0.39766, 0.668393, 0.600452, 0.411354, 0.0124464, 0.932304, 0.68658, 0.651966, 0.963559, 0.501305, 0.481149, 0.097994, 0.599545, 0.756747, 0.588448, 0.894486, 0.747107, 0.628909, 0.318868, 0.714078, 0.888541, 0.413327, 0.933409, 0.416808, 0.660208, 0.721075, 0.241509, 0.653758, 0.363759, 0.293086, 0.713119, 0.226911, 0.66189, 0.308896, 0.635672, 0.963046, 0.642053, 0.119232, 0.986162, 0.0680183, 0.296325, 0.398883, 0.901201, 0.0252403, 0.201992, 0.894792, 0.94021, 0.194307, 0.658472},
{0.379142, 0.127792, 0.933894, 0.197094, 0.834624, 0.832095, 0.288745, 0.886412, 0.444068, 0.225549, 0.0292963, 0.525479, 0.846488, 0.752489, 0.763687, 0.672517, 0.288696, 0.685552, 0.829942, 0.602146, 0.997307, 0.119694, 0.570583, 0.887409, 0.0405413, 0.669131, 0.895427, 0.750094, 0.0928386, 0.571258, 0.77405, 0.588983, 0.68048, 0.995875, 0.435763, 0.795769, 0.084194, 0.918112, 0.487355, 0.366894, 0.256309, 0.505676, 0.0768535, 0.42345, 0.835311, 0.951745, 0.231735, 0.0696798, 0.75198, 0.65686},
{0.0146079, 0.437682, 0.470545, 0.787205, 0.752082, 0.0995673, 0.225297, 0.00828229, 0.636352, 0.801779, 0.294901, 0.121178, 0.899691, 0.0114252, 0.872256, 0.56458, 0.794698, 0.933888, 0.862186, 0.026344, 0.54254, 0.364617, 0.531555, 0.505323, 0.0572142, 0.105727, 0.356642, 0.383313, 0.956332, 0.159941, 0.471447, 0.787578, 0.629303, 0.360773, 0.612801, 0.750498, 0.894052, 0.608846, 0.203577, 0.832764, 0.549285, 0.0501961, 0.637951, 0.000396439, 0.117917, 0.841047, 0.86298, 0.15499, 0.573843, 0.490464},
{0.139901, 0.0101221, 0.942514, 0.935164, 0.665656, 0.718712, 0.335872, 0.419781, 0.443167, 0.402695, 0.304518, 0.921504, 0.621327, 0.277438, 0.528598, 0.955391, 0.89571, 0.718796, 0.0796379, 0.0463427, 0.15634, 0.378718, 0.132332, 0.545886, 0.24808, 0.96768, 0.862951, 0.385002, 0.445164, 0.020806, 0.743316, 0.42272, 0.0719952, 0.288703, 0.446408, 0.379995, 0.644897, 0.118364, 0.542039, 0.284045, 0.0652044, 0.820333, 0.115289, 0.314106, 0.0564721, 0.455622, 0.562077, 0.914246, 0.798816, 0.517479},
{0.466871, 0.528877, 0.55651, 0.749617, 0.716404, 0.106175, 0.83852, 0.576856, 0.0750942, 0.204744, 0.535543, 0.00838948, 0.205212, 0.468515, 0.641298, 0.327768, 0.930937, 0.52183, 0.653259, 0.403468, 0.57342, 0.672423, 0.339801, 0.249261, 0.520849, 0.219702, 0.733804, 0.275407, 0.311505, 0.310385, 0.908045, 0.749809, 0.50321, 0.597313, 0.192082, 0.181029, 0.191524, 0.0879173, 0.696001, 0.110117, 0.588753, 0.532781, 0.795319, 0.296398, 0.00847702, 0.542058, 0.462977, 0.98881, 0.380811, 0.827142},
{0.57099, 0.539495, 0.394704, 0.218645, 0.184216, 0.903342, 0.61885, 0.745276, 0.355513, 0.274803, 0.0832593, 0.768669, 0.560756, 0.794122, 0.483576, 0.770323, 0.464091, 0.406647, 0.706051, 0.510982, 0.90053, 0.920576, 0.307128, 0.178114, 0.70082, 0.658685, 0.121998, 0.202222, 0.636845, 0.864055, 0.435739, 0.822521, 0.747698, 0.906728, 0.88828, 0.576765, 0.597549, 0.166566, 0.16744, 0.140984, 0.560691, 0.761457, 0.646899, 0.402159, 0.525506, 0.764074, 0.337025, 0.297789, 0.390157, 0.409905},
};

static const std::vector<float> costs = {905.986, 220.822, 106.177, 201.246, 174.696, 841.983, 46.1819, 908.354, 969.745, 320.411, 430.511, 139.639, 377.517, 342.374, 543.952, 862.767, 466.154, 441.496, 637.305, 85.1198, 354.957, 950.973, 183.701, 811.175, 189.808, 171.077, 830.438, 894.414, 364.294, 745.453, 400.117, 595.808, 241.235, 772.022, 452.966, 831.151, 854.338, 435.338, 83.915, 681.182, 101.877, 909, 960.075, 555.55, 24.8744, 238.955, 91.7638, 403.891, 878.143, 496.009};

static const std::vector<float> min_impressions = {0.731824, 0.0047012, 0.737496, 0.806454, 0.629203, 0.746745, 0.223906, 0.947676, 0.925794, 0.367168, 0.239552, 0.310976, 0.420979, 0.811612, 0.281992, 0.696235, 0.648435, 0.272381, 0.16506, 0.394007};

//
#endif
