#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 50;
static const int segments = 10;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49)};

static const std::vector<Syntax_Tree> restrictions = {cons_incl(cons_excl(cons_incl(cons_incl(cons_indep(cons_incl(cons_indep(cons_indep(cons_indep(cons_incl(events[17], events[33]),events[0]),events[30]),events[8]),events[15]),events[34]),events[39]),events[3]),events[11]),events[41]),cons_incl(cons_excl(cons_indep(cons_excl(cons_excl(cons_incl(cons_incl(cons_incl(cons_incl(cons_indep(events[26], events[32]),events[7]),events[12]),events[6]),events[1]),events[19]),events[2]),events[28]),events[48]),events[5]),cons_indep(cons_incl(cons_excl(cons_excl(cons_indep(cons_indep(cons_excl(cons_excl(cons_indep(cons_excl(events[9], events[22]),events[5]),events[35]),events[20]),events[18]),events[17]),events[41]),events[25]),events[3]),events[14]),cons_incl(cons_incl(cons_indep(cons_incl(cons_incl(cons_excl(cons_indep(cons_excl(cons_indep(cons_incl(events[20], events[9]),events[2]),events[11]),events[34]),events[32]),events[42]),events[13]),events[25]),events[23]),events[40]),cons_incl(cons_excl(cons_indep(cons_indep(cons_indep(cons_incl(cons_excl(cons_incl(cons_excl(cons_indep(events[19], events[14]),events[49]),events[43]),events[36]),events[8]),events[7]),events[16]),events[5]),events[21]),events[32]),cons_excl(cons_incl(cons_incl(cons_excl(cons_incl(cons_excl(cons_excl(cons_incl(cons_indep(cons_excl(events[34], events[24]),events[16]),events[45]),events[1]),events[49]),events[23]),events[11]),events[9]),events[0]),events[46]),cons_incl(cons_indep(cons_indep(cons_indep(cons_excl(cons_indep(cons_indep(cons_incl(cons_indep(cons_excl(events[33], events[16]),events[2]),events[36]),events[15]),events[24]),events[18]),events[34]),events[43]),events[39]),events[4]),cons_excl(cons_excl(cons_incl(cons_excl(cons_incl(cons_excl(cons_incl(cons_excl(cons_indep(cons_incl(events[7], events[36]),events[26]),events[37]),events[18]),events[45]),events[33]),events[31]),events[21]),events[30]),events[1]),cons_incl(cons_incl(cons_indep(cons_excl(cons_incl(cons_indep(cons_excl(cons_incl(cons_incl(cons_indep(events[11], events[25]),events[3]),events[9]),events[20]),events[17]),events[29]),events[13]),events[33]),events[22]),events[1]),cons_indep(cons_excl(cons_indep(cons_excl(cons_incl(cons_excl(cons_incl(cons_indep(cons_excl(cons_incl(events[30], events[42]),events[41]),events[16]),events[34]),events[23]),events[26]),events[46]),events[28]),events[20]),events[39])};


static const std::vector< std::vector<float> > prob = {{0.509539, 0.227278, 0.721709, 0.403427, 0.150741, 0.371308, 0.486451, 0.269541, 0.183639, 0.883848, 0.298436, 0.600147, 0.430717, 0.0660027, 0.400151, 0.989212, 0.464253, 0.259811, 0.978267, 0.862637, 0.126308, 0.399831, 0.00535853, 0.0977677, 0.256267, 0.212746, 0.887023, 0.821612, 0.695398, 0.565862, 0.638682, 0.56554, 0.0394048, 0.358032, 0.523286, 0.693072, 0.778799, 0.350213, 0.981341, 0.952937, 0.979926, 0.736931, 0.980947, 0.597485, 0.11535, 0.88361, 0.13537, 0.395271, 0.448707, 0.840953},
{0.00895025, 0.379589, 0.737192, 0.165638, 0.184247, 0.694619, 0.29471, 0.223516, 0.643314, 0.34484, 0.280558, 0.0883573, 0.486452, 0.528406, 0.202783, 0.592494, 0.921661, 0.891025, 0.364091, 0.863287, 0.511847, 0.79969, 0.358798, 0.560466, 0.307313, 0.479693, 0.0625008, 0.239954, 0.684093, 0.88286, 0.889056, 0.770458, 0.49321, 0.825132, 0.609211, 0.0525078, 0.173905, 0.920051, 0.225339, 0.470414, 0.752026, 0.0135172, 0.714687, 0.842179, 0.375129, 0.545998, 0.969517, 0.62799, 0.499413, 0.953568},
{0.135662, 0.416244, 0.66676, 0.890089, 0.849318, 0.32451, 0.75806, 0.151703, 0.147471, 0.27833, 0.860939, 0.137874, 0.383085, 0.688246, 0.621119, 0.849857, 0.00392316, 0.123579, 0.136833, 0.521047, 0.543146, 0.444875, 0.449093, 0.703404, 0.431322, 0.291527, 0.260091, 0.150404, 0.500501, 0.911749, 0.982566, 0.656711, 0.00800622, 0.430252, 0.509028, 0.735987, 0.600549, 0.890617, 0.0874236, 0.90293, 0.122711, 0.309973, 0.196308, 0.799188, 0.242872, 0.942037, 0.481372, 0.597213, 0.438039, 0.143562},
{0.666328, 0.276315, 0.760055, 0.978137, 0.176172, 0.994025, 0.500093, 0.975317, 0.660393, 0.430879, 0.354917, 0.356166, 0.467341, 0.219963, 0.549917, 0.352034, 0.658655, 0.961953, 0.985728, 0.487603, 0.151438, 0.483822, 0.57956, 0.671019, 0.790492, 0.350684, 0.164689, 0.0154379, 0.822855, 0.0467033, 0.846307, 0.727708, 0.762581, 0.869999, 0.585036, 0.607975, 0.393489, 0.465746, 0.667296, 0.286415, 0.524352, 0.74137, 0.473558, 0.366037, 0.0703508, 0.496202, 0.258734, 0.999942, 0.766984, 0.0293355},
{0.73401, 0.898904, 0.533616, 0.438552, 0.167035, 0.142354, 0.710655, 0.816744, 0.337816, 0.229435, 0.168653, 0.532606, 0.177879, 0.508358, 0.0243908, 0.294776, 0.0582703, 0.428035, 0.881053, 0.480121, 0.317776, 0.291537, 0.711416, 0.401164, 0.794187, 0.00672711, 0.156728, 0.119474, 0.995222, 0.238149, 0.0143161, 0.320234, 0.823798, 0.965581, 0.871111, 0.138077, 0.888902, 0.98745, 0.493948, 0.578536, 0.184304, 0.838888, 0.374277, 0.840514, 0.0872062, 0.667804, 0.187453, 0.501063, 0.316285, 0.784033},
{0.601847, 0.338741, 0.347723, 0.686103, 0.302748, 0.508142, 0.24052, 0.478463, 0.0186622, 0.74787, 0.136973, 0.981316, 0.101043, 0.640596, 0.46927, 0.239421, 0.918228, 0.607205, 0.777911, 0.728466, 0.168173, 0.12258, 0.200766, 0.814116, 0.397006, 0.503616, 0.839162, 0.775439, 0.613142, 0.66936, 0.770159, 0.42586, 0.780692, 0.667221, 0.759154, 0.614846, 0.591868, 0.783565, 0.392215, 0.462648, 0.323087, 0.0616978, 0.0919198, 0.953928, 0.240392, 0.665215, 0.244559, 0.412301, 0.0654757, 0.462769},
{0.378722, 0.77258, 0.929198, 0.63552, 0.151929, 0.554102, 0.184507, 0.910684, 0.444328, 0.534206, 0.975951, 0.647205, 0.911796, 0.386772, 0.271361, 0.517401, 0.673159, 0.695863, 0.0324889, 0.87783, 0.502495, 0.399937, 0.707844, 0.956552, 0.72395, 0.779514, 0.357037, 0.855879, 0.917821, 0.698696, 0.275184, 0.0154281, 0.730387, 0.789978, 0.340248, 0.313468, 0.782779, 0.352648, 0.432952, 0.413274, 0.788477, 0.24349, 0.388957, 0.534492, 0.169573, 0.325416, 0.309703, 0.301067, 0.696861, 0.430917},
{0.870076, 0.576738, 0.482785, 0.336822, 0.803038, 0.887781, 0.305779, 0.55897, 0.821242, 0.862288, 0.358466, 0.286843, 0.293792, 0.444584, 0.910289, 0.522875, 0.597414, 0.419056, 0.206754, 0.952773, 0.712923, 0.82412, 0.113176, 0.339878, 0.972453, 0.499208, 0.774176, 0.764029, 0.0161876, 0.557486, 0.178917, 0.0821273, 0.200679, 0.63284, 0.691021, 0.0853624, 0.10956, 0.931814, 0.351172, 0.521414, 0.982912, 0.484805, 0.984388, 0.779202, 0.939, 0.48358, 0.341662, 0.521355, 0.47619, 0.473863},
{0.541944, 0.241229, 0.447002, 0.638967, 0.755768, 0.257499, 0.431634, 0.839026, 0.349342, 0.0875888, 0.308676, 0.447652, 0.79679, 0.777431, 0.468491, 0.0775056, 0.675274, 0.675297, 0.713688, 0.6005, 0.797771, 0.927573, 0.996569, 0.347073, 0.792387, 0.491543, 0.951767, 0.843526, 0.866057, 0.924474, 0.793141, 0.573692, 0.440217, 0.422217, 0.347088, 0.212723, 0.14495, 0.0260649, 0.273616, 0.151723, 0.846361, 0.0591794, 0.514592, 0.929483, 0.479121, 0.130617, 0.988201, 0.414907, 0.121332, 0.901155},
{0.414195, 0.404697, 0.555786, 0.522987, 0.341175, 0.144732, 0.449349, 0.595776, 0.848918, 0.584711, 0.799237, 0.647656, 0.213935, 0.0168145, 0.88609, 0.999592, 0.10732, 0.77553, 0.896792, 0.254484, 0.895473, 0.627664, 0.482991, 0.975371, 0.254148, 0.871517, 0.546385, 0.866624, 0.919771, 0.136606, 0.560644, 0.958919, 0.830569, 0.38145, 0.148054, 0.523302, 0.358759, 0.854437, 0.988457, 0.0447605, 0.0666675, 0.365702, 0.876421, 0.0872742, 0.56709, 0.476988, 0.875224, 0.164884, 0.543289, 0.539435},
};

static const std::vector<float> costs = {872.749, 650.434, 905.242, 858.107, 758.962, 235.333, 832.587, 220.244, 150.954, 129.333, 531.308, 963.335, 277.261, 924.843, 559.15, 187.555, 378.536, 785.142, 590.712, 495.628, 317.29, 997.025, 144.008, 425.553, 117.647, 46.9163, 196.597, 915.301, 695.457, 279.513, 944.214, 508.062, 130.728, 470.208, 6.31468, 621.994, 317.232, 8.64263, 535.101, 408.936, 658.542, 599.875, 32.0831, 528.937, 911.961, 487.047, 857.487, 265.521, 108.452, 582.535};

static const std::vector<float> min_impressions = {0.639304, 0.678814, 0.949107, 0.269297, 0.634409, 0.802575, 0.0154283, 0.738425, 0.13113, 0.495232};

//
#endif
