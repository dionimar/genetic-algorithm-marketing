#ifndef PROBLEM_H
#define PROBLEM_H
#include <iostream>
#include "syntax_tree.hpp"


#define PAPO




static const int media = 100;
static const int segments = 5;


static const std::vector<Syntax_Tree> events = {cons_event(0), cons_event(1), cons_event(2), cons_event(3), cons_event(4), cons_event(5), cons_event(6), cons_event(7), cons_event(8), cons_event(9), cons_event(10), cons_event(11), cons_event(12), cons_event(13), cons_event(14), cons_event(15), cons_event(16), cons_event(17), cons_event(18), cons_event(19), cons_event(20), cons_event(21), cons_event(22), cons_event(23), cons_event(24), cons_event(25), cons_event(26), cons_event(27), cons_event(28), cons_event(29), cons_event(30), cons_event(31), cons_event(32), cons_event(33), cons_event(34), cons_event(35), cons_event(36), cons_event(37), cons_event(38), cons_event(39), cons_event(40), cons_event(41), cons_event(42), cons_event(43), cons_event(44), cons_event(45), cons_event(46), cons_event(47), cons_event(48), cons_event(49), cons_event(50), cons_event(51), cons_event(52), cons_event(53), cons_event(54), cons_event(55), cons_event(56), cons_event(57), cons_event(58), cons_event(59), cons_event(60), cons_event(61), cons_event(62), cons_event(63), cons_event(64), cons_event(65), cons_event(66), cons_event(67), cons_event(68), cons_event(69), cons_event(70), cons_event(71), cons_event(72), cons_event(73), cons_event(74), cons_event(75), cons_event(76), cons_event(77), cons_event(78), cons_event(79), cons_event(80), cons_event(81), cons_event(82), cons_event(83), cons_event(84), cons_event(85), cons_event(86), cons_event(87), cons_event(88), cons_event(89), cons_event(90), cons_event(91), cons_event(92), cons_event(93), cons_event(94), cons_event(95), cons_event(96), cons_event(97), cons_event(98), cons_event(99)};

static const std::vector<Syntax_Tree> restrictions = {cons_incl(cons_excl(cons_incl(cons_indep(cons_incl(cons_indep(cons_incl(cons_indep(cons_incl(cons_indep(events[1], events[97]),events[28]),events[54]),events[67]),events[43]),events[69]),events[37]),events[98]),events[20]),events[49]),cons_excl(cons_indep(cons_incl(cons_excl(cons_excl(cons_excl(cons_indep(cons_indep(cons_excl(cons_incl(events[75], events[34]),events[98]),events[33]),events[31]),events[38]),events[67]),events[73]),events[11]),events[2]),events[59]),cons_excl(cons_excl(cons_excl(cons_excl(cons_incl(cons_incl(cons_indep(cons_excl(cons_indep(cons_incl(events[29], events[81]),events[84]),events[78]),events[6]),events[41]),events[73]),events[72]),events[65]),events[42]),events[55]),cons_excl(cons_incl(cons_indep(cons_indep(cons_excl(cons_indep(cons_incl(cons_incl(cons_incl(cons_incl(events[71], events[83]),events[35]),events[75]),events[36]),events[30]),events[63]),events[81]),events[24]),events[25]),events[58]),cons_incl(cons_excl(cons_indep(cons_indep(cons_indep(cons_incl(cons_indep(cons_indep(cons_incl(cons_indep(events[90], events[97]),events[99]),events[82]),events[62]),events[91]),events[2]),events[3]),events[15]),events[10]),events[80])};


static const std::vector< std::vector<float> > prob = {{0.190843, 0.152203, 0.318892, 0.299235, 0.172979, 0.752415, 0.832134, 0.150102, 0.597503, 0.548135, 0.882619, 0.437513, 0.791812, 0.0408994, 0.20713, 0.220728, 0.667527, 0.249624, 0.583966, 0.0726375, 0.400465, 0.672713, 0.273947, 0.3758, 0.152852, 0.416992, 0.663307, 0.338837, 0.018233, 0.0415596, 0.10059, 0.775676, 0.596468, 0.775487, 0.713143, 0.474858, 0.883311, 0.0050817, 0.560604, 0.561776, 0.0968576, 0.356498, 0.5934, 0.301307, 0.571535, 0.766647, 0.0532936, 0.585392, 0.177694, 0.517948, 0.79692, 0.0836641, 0.710848, 0.390319, 0.0776384, 0.0890292, 0.165445, 0.695643, 0.21038, 0.833316, 0.387058, 0.814175, 0.960496, 0.0695211, 0.755096, 0.550807, 0.981096, 0.982414, 0.621175, 0.501042, 0.415154, 0.708882, 0.294325, 0.704647, 0.425145, 0.0105252, 0.197762, 0.276311, 0.4649, 0.253455, 0.287145, 0.45339, 0.361359, 0.665159, 0.147902, 0.618762, 0.0164162, 0.87745, 0.946768, 0.858097, 0.238595, 0.446617, 0.169134, 0.742324, 0.601711, 0.694353, 0.135883, 0.733647, 0.86859, 0.678148},
{0.801309, 0.459725, 0.763689, 0.390598, 0.900465, 0.968072, 0.336957, 0.311683, 0.379043, 0.260682, 0.561414, 0.697827, 0.017377, 0.447096, 0.605929, 0.230421, 0.889896, 0.281664, 0.235618, 0.289733, 0.620861, 0.989507, 0.289147, 0.195267, 0.708528, 0.0305048, 0.461524, 0.369403, 0.505804, 0.118906, 0.663601, 0.295453, 0.688043, 0.754648, 0.409884, 0.185504, 0.906178, 0.617766, 0.928471, 0.0787736, 0.388804, 0.337611, 0.452007, 0.197105, 0.903704, 0.465506, 0.443385, 0.252651, 0.318693, 0.652272, 0.834545, 0.465236, 0.678034, 0.493134, 0.229145, 0.944292, 0.0894161, 0.188409, 0.907998, 0.896435, 0.0398297, 0.884857, 0.711941, 0.228662, 0.155922, 0.938454, 0.375228, 0.401902, 0.750736, 0.960871, 0.177623, 0.548273, 0.601017, 0.624821, 0.466697, 0.0901339, 0.5144, 0.689964, 0.65902, 0.839869, 0.379493, 0.765218, 0.296936, 0.659479, 0.495657, 0.97069, 0.67728, 0.701494, 0.28629, 0.0714223, 0.996023, 0.444795, 0.151701, 0.812792, 0.479032, 0.264661, 0.0863187, 0.616745, 0.576531, 0.353955},
{0.6961, 0.886739, 0.0989655, 0.939478, 0.987535, 0.744845, 0.89323, 0.862735, 0.513409, 0.0768381, 0.716723, 0.759639, 0.454787, 0.178967, 0.83283, 0.530984, 0.500424, 0.43848, 0.62754, 0.854135, 0.360426, 0.548282, 0.64803, 0.0630424, 0.798946, 0.765594, 0.43871, 0.851668, 0.671387, 0.578693, 0.314167, 0.148173, 0.928383, 0.511298, 0.923564, 0.0131651, 0.676218, 0.591491, 0.566535, 0.678529, 0.0931559, 0.903962, 0.602486, 0.0363502, 0.935117, 0.181635, 0.448502, 0.502885, 0.2448, 0.266239, 0.659042, 0.98517, 0.135073, 0.776462, 0.0380872, 0.588467, 0.359161, 0.458122, 0.546538, 0.473826, 0.190332, 0.448863, 0.418476, 0.0468493, 0.206841, 0.677484, 0.938719, 0.235746, 0.494464, 0.89123, 0.305312, 0.674195, 0.0529618, 0.496284, 0.271312, 0.0485941, 0.143073, 0.862855, 0.50681, 0.545399, 0.619873, 0.469086, 0.563839, 0.128922, 0.3075, 0.431323, 0.527619, 0.886656, 0.348014, 0.393817, 0.101613, 0.593471, 0.556329, 0.0189874, 0.144171, 0.0633262, 0.75553, 0.0610315, 0.297846, 0.645727},
{0.856799, 0.97501, 0.126683, 0.310516, 0.75558, 0.205088, 0.994006, 0.0155543, 0.253733, 0.15476, 0.198433, 0.0270626, 0.998192, 0.547875, 0.886477, 0.161164, 0.420251, 0.703193, 0.079186, 0.826308, 0.544151, 0.0880817, 0.553652, 0.984692, 0.507297, 0.184875, 0.5597, 0.34315, 0.755476, 0.177589, 0.374659, 0.617684, 0.95909, 0.386961, 0.895849, 0.905681, 0.478125, 0.140356, 0.275755, 0.384623, 0.14271, 0.552593, 0.439075, 0.175724, 0.0403504, 0.916629, 0.390037, 0.808791, 0.139422, 0.475565, 0.0498799, 0.270377, 0.402195, 0.4942, 0.869124, 0.187191, 0.870677, 0.941371, 0.50576, 0.155578, 0.820818, 0.391042, 0.242806, 0.434584, 0.656571, 0.340219, 0.12585, 0.886229, 0.427916, 0.375363, 0.15878, 0.565023, 0.990841, 0.35555, 0.871741, 0.947675, 0.765651, 0.791298, 0.0875152, 0.539013, 0.00927456, 0.456916, 0.486323, 0.604032, 0.849903, 0.32557, 0.752872, 0.845091, 0.571627, 0.98954, 0.354672, 0.595852, 0.840367, 0.205363, 0.0571849, 0.765202, 0.251658, 0.855244, 0.620414, 0.755978},
{0.0623795, 0.192284, 0.372228, 0.275276, 0.461451, 0.0989203, 0.504082, 0.638179, 0.558082, 0.430374, 0.527179, 0.791009, 0.504284, 0.120497, 0.961964, 0.155561, 0.218799, 0.934627, 0.538068, 0.879247, 0.839083, 0.996685, 0.105792, 0.373117, 0.856532, 0.918517, 0.593968, 0.385188, 0.630169, 0.401449, 0.858368, 0.121321, 0.0765483, 0.33967, 0.953168, 0.814021, 0.760205, 0.609855, 0.60711, 0.629527, 0.929714, 0.262453, 0.124476, 0.673241, 0.360021, 0.333443, 0.844717, 0.91904, 0.41096, 0.199351, 0.584092, 0.828149, 0.416247, 0.0648917, 0.155051, 0.384306, 0.19563, 0.136049, 0.0609293, 0.407195, 0.690218, 0.764616, 0.255719, 0.673478, 0.0406313, 0.0232162, 0.49357, 0.709102, 0.553975, 0.825101, 0.34549, 0.47982, 0.935438, 0.312462, 0.0873392, 0.404716, 0.673101, 0.122256, 0.390721, 0.1343, 0.546775, 0.886064, 0.477326, 0.016935, 0.0991099, 0.759072, 0.764356, 0.59289, 0.929936, 0.951163, 0.353775, 0.453724, 0.285405, 0.432458, 0.277703, 0.516933, 0.504677, 0.674905, 0.317725, 0.226067},
};

static const std::vector<float> costs = {115.727, 410.248, 429.602, 727.729, 76.3985, 702.665, 137.012, 529.04, 706.574, 166.86, 742.753, 649.664, 999.135, 83.7701, 885.994, 998.634, 936.209, 912.322, 746.436, 965.344, 403.878, 849.576, 254.152, 144.371, 847.011, 571.78, 84.5491, 498.151, 601.616, 324.615, 624.768, 746.223, 580.942, 698.749, 110.084, 60.2608, 959.766, 255.938, 395.199, 529.812, 737.178, 823.99, 414.044, 767.396, 883.134, 310.124, 653.707, 167.824, 812.985, 762.15, 19.1312, 549.229, 441.286, 708.048, 804.224, 215.437, 499.287, 782.621, 125.388, 866.814, 634.084, 313.874, 878.701, 227.256, 393.786, 489.204, 72.7387, 156.272, 357.428, 712.044, 67.94, 172.673, 479.006, 315.515, 619.419, 47.506, 816.653, 941.028, 644.275, 337.53, 844.408, 837.068, 27.0489, 716.271, 902.1, 167.033, 525.192, 107.591, 384.687, 77.8012, 285.326, 532.288, 164.439, 709.702, 172.762, 915.52, 470.206, 462.575, 348.615, 84.9564};

static const std::vector<float> min_impressions = {0.457902, 0.107103, 0.0667587, 0.0784236, 0.337555};

//
#endif
